{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nHerbstsemester 16\n\n\n\n\nAlgorithmen und Datenstrukturen 2\n\n\nBusiness und Recht 1\n\n\nRecht\n\n\nBusiness-Plan\n\n\n\n\n\n\nC++\n\n\nEnglish: How Things Work\n\n\nMobile and GUI Engineering\n\n\n.NET Technologien\n\n\nSoftware Engineering 1\n\n\nWeb Engineering + Design 2\n\n\n\n\nLinks\n\n\n\n\nSlack: \nhttps://hsr-students.slack.com\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#herbstsemester-16", 
            "text": "Algorithmen und Datenstrukturen 2  Business und Recht 1  Recht  Business-Plan    C++  English: How Things Work  Mobile and GUI Engineering  .NET Technologien  Software Engineering 1  Web Engineering + Design 2", 
            "title": "Herbstsemester 16"
        }, 
        {
            "location": "/#links", 
            "text": "Slack:  https://hsr-students.slack.com  MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/hs16/ad2/", 
            "text": "Algorithmen und Datenstrukturen 2\n\n\n\n\nVisualisierungen: \nhttp://visualgo.net/\n\n\n\n\nVorlesung 1 - Binary Search Tree\n\n\n\n\nEin Heap hat das kleinste oder gr\u00f6sste Element als Root\n\n\nEine Suche auf einem Heap w\u00fcrde mit \nO(n)\n laufen, da man nicht weiss, welches Child jeweils kleiner / gr\u00f6sser ist\n\n\n\n\nMultimaps: Pro Key sind mehrere Values erlaubt\n\n\n\n\n\n\nFolie 5\n\nVoraussetzung: Random Access, Daten m\u00fcssen sortiert sein\n\n\n\n\n\n\nFolie 6\n \n\n\n\n\nInsert: Finden der richtigen Position: \nO(log(n))\n, Rest verschieben: \nO(n)\n\n\n\n\nRemove gleich wie Insert\n\n\n\n\n\n\n\n\nFolie 7\n  \n\n\n\n\nDer Baum muss so aufgebaut sein, dass der linke Child-Knoten immer \n= Parent-Node ist\n\n\nExterne Knoten speichern keine Daten. Wenn man beim Suchen einen Blattknoten erreicht, ist der Key nicht gefunden\n\n\nEine Inorder Traversierung besucht die Keys in aufsteigender Reihenfolge\n\n\n\n\n\n\n\n\nEinf\u00fcgen\n  \n\n\n\n\nSuchen nach dem einzuf\u00fcgenden Key\n\n\nMan wird auf einen \"Sentinel\" external Node treffen\n\n\nDort den neuen Key einf\u00fcgen und in einen internen Knoten umwandeln\n\n\nBei einer \nMultimap\n kann es mehrere gleiche Keys geben. Dann:\n\n\nfind, bis man auf den Knoten trifft\n\n\nnach links weiter suchen bis man auf einen external Node trifft\n\n\nDort einf\u00fcgen und in internen Node umwandeln\n\n\n\n\n\n\n\n\n\n\n\n\nL\u00f6schen\n  \n\n\n\n\nKnoten hat zwei Blatt-Kinder:\n\n\nL\u00f6sche v und sein linkes Child, rechtes Child rutscht nach oben\n\n\n\n\n\n\nKnoten hat ein Blatt-Kind:\n\n\nL\u00f6sche v und den Blatt-Knoten (links oder rechts), der andere Knoten (mit einem Key) rutscht nach oben\n\n\n\n\n\n\nKnoten hat keine Blatt-Kinder:\n\n\nFinde den Knoten \nw\n, der \nv\n in der Inorder-Traversierung folgt (\"links unten des rechten Teilbaums von \nv\n\")\n\n\nKopiere den Key von \nw\n zu \nV\n\n\nL\u00f6sche \nw\n mit dem gleichen Algorithmus wie bei Fall 1 und 2\n\n\n\n\n\n\nF\u00fcr die ersten beiden F\u00e4lle ist der Algorithmus derselbe\n\n\n\n\n\n\n\n\nPerformance\n  \n\n\n\n\nWorst Case: Komplett unbalancierter Baum (z.B. Einf\u00fcgen mit \nsortiertem\n Input). H\u00f6he ist \nO(n)\n. Dann ist es eine Linked-List\n\n\nBest Case: Mit der Mitte beginnen, komplett Balanciert.\n\n\nH\u00f6he \nlog(n)\n\n\n\n\nBalanciert sich nicht selbst (wie andere B\u00e4ume, s. sp\u00e4ter)\n\n\n\n\n\n\nImplementierung\n\n\nHier haben die Attribute der Klasse \nKnoten\n die Visibility \npackage\n, d.h es kann direkt darauf zugegriffen werden\n\n\nEinf\u00fcgen: Map (nicht Multimap). Wenn der Key schon vorhanden ist, bleibt er einfach bestehen (key wird zur\u00fcck gegeben)\n\n\n\n\n\n\n\n\n\n\nVorlesung 2 - AVL-Trees (1)\n\n\nBei einem AVL Tree muss f\u00fcr jeden Teilbaum gelten, dass die Kinder maximal einen H\u00f6henunterschied von 1 haben.\n\n\nBeweis: Jeder AVL-Baum mit minimalen Anzahl Knoten \nn\n bei H\u00f6he \nh\n hat einen linken und rechten Teilbaum. Der eine Teilbaum hat H\u00f6he \nh - 1\n und der rechte \nh - 2\n\n\n\n\n\n\nn(h) = 1 + n(h-1) + n(h-2)\n\n\nn(h) > 2n(h-2)\n\n\nn(h-2) = 1 + n(h-3) + n(h-4)\n\n\nn(h-2) > 2n(h-4)\n\n\nn(h) > 4n(h-4)\n\n\nn(h-4) = 1 + n(h-5) + n(h-6)\n\n\nn(h-4) > 2n(h-6)\n\n\nn(h) > 8n(h-6)\n\n\n\\ldots\n\n\nn(h) > 16n(h-8)\n\n\nn(h) > 2^i n(h-2i)\n\n\n\n\n\n\nn_{min}(h=1) = 1\n\n\nn_{min}(h=2) = 2\n\n\n\n\n\n\ni: h-2i = (1 | 2)\n\n\nh = (1 | 2) + 2i\n\n\n\\text{bsp.:}\n\n\ni = 1 : h = 3 | 4\n\n\ni = 2 : h = 5 | 6\n\n\ni = 3 : h = 7 | 8\n\n\n i = \\frac h2 - 1 \\text{ wobei h/2 gerundet}\n\nEinsetzen in \nn(h) > 2^i n(h-2i)\n:\n\nn > 2^{\\frac h2 - 1} \\cdot (1 | 2)\n\nKonstanten heraus streichen:\n\nn > 2^{\\frac h2-1}\n\n\nlog(n) > \\frac h2 - 1\n\n\nh < 2\\cdot log(n) + 2\n\n\n\\rightarrow h \\in O(log(n))\n\n\n\n\n\n\nEinf\u00fcgen:\n\n\nDen neuen Knoten wie bei einem BST einf\u00fcgen\n\n\nPr\u00fcfen, ob AVL-Bedingungen verletzt wurden\n\n\nAus dem neuen Knoten aus solange nach oben wandern, bis man auf einen Eltern-Knoten eines unbalancierten Teilbaums trifft\n\n\n\n\n\n\nUmstrukturierung:\n\n\nx, y, z: Aufgrund des Suchpfades Kind, Eltern, Grosseltern\n\n\na, b, c: Inorder-Reihenfolge\n\n\nWenn es von x bis z nur in eine Richtung geht: Rotation um b (= y)\n\n\nBei Richtungs\u00e4nderung von x bis z:\n\n\nZuerst den Teilbaum b und c (x und y) rotieren, so dass a, b, c wieder in einer Richtung ist wie oben\n\n\nWieder wie oben um b rotieren\n\n\n\n\n\n\n(Tipp:)\n Jeweils nach Rotation mit Inorder Traversierung pr\u00fcfen\n\n\nEine Restrukturierung mit Cut/Link muss nicht den gleichen Baum ergeben wie mit dem Rotationsverfahren!\n\n\n\n\n\n\nL\u00f6schen\n\n\nL\u00f6schen wie bei BST\n\n\nDie Balance kann verletzt werden\n\n\nDie Knoten x, y, z sollten im h\u00f6heren Teilbaum sein (beim Einf\u00fcgen automatisch gegeben)\n\n\nNach dem Restrukturierung kann eine neue Unbalance entstehen! (Im Gegensatz zum Einf\u00fcgen). Man muss bis zur Root weiter nach Unbalancierten Teilb\u00e4umen suchen\n\n\n\n\n\n\nImplementierung\n\n\nMit einer AVL-Node wird dessen H\u00f6he gespeichert\n\n\nactionPos: Die Position, in der etwas passiert ist (z.B. letzte Einf\u00fcgeposition). Ist ein Attribut der BST-Klasse\n\n\nNach dem Einf\u00fcgen wird die (BST-)Node (Item) mit einer Instanz von AVLItem ersetzt\n\n\nBesser: Funktion newNode() des BST \u00fcberschreiben\n\n\n\n\n\n\n\n\n\n\nVorlesung 4 - Splay-Trees / Merge-Sort\n\n\nSplay-Trees\n\n\n\n\nNach dem Einf\u00fcgen ist der eingef\u00fcgte Knoten immer Root\n\n\nBeim Suchen wird der Baum auch restrukturiert, der gesuchte Knoten ist danach Root\n\n\nKnoten mit gleichem Wert k\u00f6nnen weit auseinander sein\n\n\nSuchen gleich wie bei BST\n\n\nMuss nicht Balanced sein wie AVL!\n\n\n\n\nSplay-Operation\n\n\n\n\nWird nach \njeder\n Operation (auch Suchen) ausgef\u00fchrt\n\n\nrechts und links Rotation gleich wie bei AV\"L\n\n\n\"zig\" -\n linkes Kind, \"zag\" -\n rechtes Kind\n\n\nx: betroffener Knoten, y: parent von x, z: parent-parent von x\n\n\nRotationen solange wiederholen, bis x Root wird\n\n\n\n\nL\u00f6schen\n\n\n\n\nWie bei BST\n\n\nBei \"Fall 3\": Ersetze Knoten durch inorder-Nachfolger\n\n\nSplayen mit tiefstem internem \nzugegriffenem\n Knoten (Elternknoten des gel\u00f6schten)\n\n\n\n\nPerformance\n\n\n\n\nSplaying: \nO(h)\n\n\n\n\nDurchschnittlich \nO(logn)\n\n\n\n\nWorst case ist H\u00f6he h = n, d.h. \nO(n)\n\n\n\n\n\n\n\n\nOft besuchte Knoten kommen immer n\u00e4her an die Root, d.h es wird schneller\n\n\nAnwendung z.B. bei Suchmaschinen\n\n\n\n\nSplay-Entscheid\n\n\n\n\nWenn mit find() nicht gefunden wird, der letzte gefunden Knoten nehmen\n\n\n\n\nMerge-Sort\n\n\n\n\nDivide and Conquer Prinzip\n\n\nDaten in zwei Teilmengen aufteilen\n\n\nProblem rekursiv f\u00fcr beide Teilmengen l\u00f6sen\n\n\nConquer: L\u00f6sungen mischen\n\n\nVerankerung ist Inputgr\u00f6sse 1 oder 0\n\n\n\n\n\n\nMerge-Sort sortiert Rekursiv die halbe Menge und \"merged\" die beiden sortierten Teilmengen zusammen\n\n\nMerge()\n\n\nBeide Listen von vorne her leeren\n\n\nWenn A kleiner ist, A in S einf\u00fcgen, sonst B in S einf\u00fcgen\n\n\nwenn eine Liste leer, der Rest der anderen an S anf\u00fcgen\n\n\n\n\nO(n)\n mit double-linked-List\n\n\n\n\n\n\nPerformance\n\n\nDie H\u00f6he des Rerkursionsbaums ist \nO(log n)\n\n\n\n\nJede Rekursion braucht \nO(n)\n\n\n\n\nTotal \nO(n log n)\n\n\n\n\n\n\n\n\nJava.util.sort ist ein modifizierter Merge-Sort\n\n\nWenn das gr\u00f6sste Element der ersten Liste kleiner als das kleinste Element der zweiten Liste ist, kann man einfach die beiden Listen aneinander h\u00e4ngen (keine Vergleiche n\u00f6tig)\n\n\nGarantiert \nO(n log n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementierung nicht-rekursiv\n\n\nmit i = 1: Zweier-P\u00e4rchen sortieren und in out schreiben\n\n\nin und out swappen\n\n\nNun Vierer-Gruppen (zwei P\u00e4rchen) sortiert in out schreiben\n\n\nin und out swappen\n\n\nusw... Es wird immer verdoppelt\n\n\nQuasi im rekurvis-Baum \"Bottom up\"\n\n\n\n\n\n\n\n\n\n\nVorlesung 5 - Quick-Sort\n\n\n\n\nVergleich Insertion-Sort (\nO(n^2)\n) und Merge-Sort (\nO(n log n)): Bei \\(2^{14}\n Elementen ist Merge-Sort 100x schneller, bei 1 Mio. Elementen ist es 6'400x schneller\n\n\nInsertion Sort w\u00fcrde f\u00fcr 1 Mio. Elemente ca. 1h 47' ben\u00f6tigen, merge-Sort nur einige Sekunden\n\n\n\n\nQuick-Sort\n\n\n\n\nPartitionierung in 3 Mengen: Less, Equal und Greater mit einem Pivot x\n\n\nJedes Element in die richtige Menge kopieren -\n \nO(n)\n\n\n\n\n\n\n\n\nRekursiver Aufruf mit L und G\n\n\nZusammensetzen: L, E, G hintereinander wieder einf\u00fcgen\n\n\n\n\n\n\n\n\nWenn der Pivot immer das minimum oder maximum ist, gibt es einen einseitigen \"tree\", d.h Worst-Case ist \nO(n^2)\n\n\n\n\nDer optimale Pivot w\u00e4re der mittlere Wert\n\n\nWenn die Daten normalverteilt sind, gibt es zu 50% \"bad-calls\" bei zuf\u00e4lliger Wahl des Pivots (1. und 4. Viertel)\n\n\nErwartet wird ein Baum mit H\u00f6he \nlog n\n. Jedes Level ben\u00f6tigt \nO(n)\n, also total \nO(n log n)\n\n\n\n\nIn-Place Quicksort\n\n\nWorst-Case: Wenn die Liste bereits sortiert ist\n\n\n\n\n\n\n\n\nSorting Lower Bound\n\n\n\n\nJede Permutation von Daten zeigt einen Pfad durch den Entscheidungsbaum\n\n\nDas gibt n! Permutationen, also ist die H\u00f6he des Baumes log(n!)\n\nn^n > n! > {\\frac n2}^{\\frac n2}\n\n\n\n\nDie Untere Grenze f\u00fcr \nVergleichs\nalgorithmen ist \nO(n log(n))\n\n\n\n\n\n\nBucket-Sort\n\n\n\n\nEine Sequenz mit Key-Value-Paaren\n\n\nJedes Item in ein Array mit dem Key als Index kopieren\n\n\nGenauer ein Array von Listen, Elemente mit gleichem Key werden der Liste angeh\u00e4ngt\n\n\n\n\n\n\nArray durch iterieren und der Reihe nach ausgeben\n\n\nLaufzeit: \nO(n + N)\n, wobei N der gr\u00f6sstm\u00f6gliche Wert der Keys ist\n\n\nKein Widerspruch zu oben, weil Algorithmus nicht vergleichs-basiert ist\n\n\n\n\n\n\nEingeschr\u00e4nkt auf ganze, positive Zahlen\n\n\nStabile\n Sort-Eigenschaft: die relative Ordnung von Items mit gleichem Wert wird nicht ver\u00e4ndert\n\n\n\n\n\n\nVorlesung 6 - Radix-Sort / Pattern Matching\n\n\nLexikographische Sortierung\n\n\n\n\nDie letzte Dimension wird \nzuletzt\n sortiert, d.h die Dimension mit 1. Priorit\u00e4t am Schluss\n\n\nEinfachste Anwendung ist mit Strings\n\n\nRadix-Sort\n\n\nLexikographische Sortierung mit Bucket-Sort\n\n\n\n\n\n\n\n\nPattern Matching\n\n\n\n\nZiel: In einer Sequenz von Zeichen ein Pattern finden\n\n\nSubstring wird hier inklusive end-index angegeben. In Java geht der Substring bis endIndex - 1!\n\n\nBrute-Force-Methode\n\n\nPattern am Anfang des Textes ansetzen und Zeichen f\u00fcr Zeichen durchlaufen bis zum Ende\n\n\nBei jeder Iteration pr\u00fcfen, ob das Pattern \u00fcbereinstimmt\n\n\nPerformance: Pattern m n Mal durchsuchen -\n \nO(n\\cdot m)\n\n\n\n\n\n\n\n\nBoyer-Moore Heuristik\n\n\n\"Looking Glass\": Starte jeweils am Ende des Patterns\n\n\n\"Character Jump\": Bei einem Mismatch wird mit dem Pattern an die n\u00e4chstm\u00f6gliche Position gesprungen, wo das Zeichen im Text im Pattern vorkommt (wenn nicht, kann es gleich weiter geschoben werden um ganze Patternl\u00e4nge)\n\n\nEs muss zwinged auf das letzt auftretende (m\u00f6glichst weit rechte) Zeichen ausgerichtet werden\n\n\nWenn man dabei nach links schieben w\u00fcrde, wird stattdessen um 1 nach rechts geschoben\n\n\n\n\n\n\nDie Last Occurence Funktion speichert von jedem zeichen im Alphabet die letzte Position im Pattern (wenn es nicht vorkommt, -1)\n\n\nDamit kann mit \\O(1)) die Anzahl der Verschiebungen berechnet werden\n\n\nPerformance: Im Worst Case \nO(n\\cdot m + s)\n, also schlechter als Brute Force. Im Durchschnitt ist er aber sehr schnell f\u00fcr Textanalysen\n\n\n\n\n\n\nKMP Algorithmus\n\n\nSucht Suffixe, die auch Pr\u00e4fixe vom Pattern sind\n\n\nSo werden nach dem Verschieben nach rechts redundante Vergleiche vermieden\n\n\n\n\n\n\n\n\n\n\nVorlesung 8 - Tries\n\n\n\n\nZiel: Preprocessing vom Text (n), um Suchen in Abh\u00e4ngigkeit von m zu erreichen (statt voher von n)\n\n\nEin \"Trie\" ist ein geordneter Baum, wobei jeder Knoten ausser der Root ein Zeichen hat\n\n\nDie Strings entstehen vom ersten Child-Knoten bis zu den externen Nodes\n\n\nFolie 7\n\n\nErster Index ist Index in W\u00f6rter-Array S\n\n\nZweiter und dritter Index ist Range in diesem String\n\n\n\n\n\n\nMit einem normalen Trie findet man nur komplette W\u00f6rter und Pr\u00e4fixe als Matches, keine Suffixe\n\n\nDaf\u00fcr f\u00fcr jedes Wort einen Suffix-Trie erstellen\n\n\nJeder m\u00f6gliche Suffix wird in den Trie eingef\u00fcgt\n\n\nAuch substrings werden darin gefunden, da sie pr\u00e4fixe der Suffixe im Suffix-Trie sind\n\n\n\n\n\n\n\n\n\n\nVorlesung 9 - Dynamische Programmierung\n\n\n\n\nRucksack-Problem ist hier nur polynomiell l\u00f6sbar, weil es ganze Zahlen sind (sonst ist es NP-Vollst\u00e4ndig)\n\n\nZiel ist immer, Resultate von Subproblemen zu speichern, weil sie Einfluss auf die anderen L\u00f6sungen (der Subprobleme) haben\n\n\nBeispiel Fibonacci: Mit normaler Rekursiver Variante werden die tieferen Fib-Zahlen immer mehrmals berechnen. Viel schneller ist es, die Zwischenergebnisse jeweils in einer Tabelle zu speichern, und nur berechnen, wenn sie noch nicht darin vorkommen.\n\n\nBeispiel LCS\n\n\nHorizontal ist X(m), Vertikal Y(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\nG\n\n\nA\n\n\nT\n\n\n...\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n...\n\n\n\n\n\n\nT\n\n\n0\n\n\n1\n\n\n1\n\n\n2\n\n\n...\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVorlesung 10 - Graphen (1)\n\n\n\n\nDefinition: \nV\n ist Set von Vertices, \nE\n eine Collection von Vertices-Paaren (=Kanten)\n\n\nKanten und Vertizes speichern Elemente\n\n\ngerichtet: Kante hat eine Richtung\n\n\nGibt auch Graphen, die gerichtete und ungerichtete Kanten mischen (z.B. bei Klassendiagramm)\n\n\ninzident\n: Kante endet an einem Knoten V\n\n\nparallele kanten: k(anten, die die gleichen zwei Knoten verbinden\n\n\nSchleife: Kante von Knoten auf sich selbst\n\n\nEinfacher Pfad: Jede Kante und Vertices kommt nur einmal vor\n\n\nZyklus endet \u00e4ndert immer in einer Kante (die letzte Verbindung zum Startknoten)\n\n\nDie Summe der Grade in einem Graph ist immer 2*m (2 * Anzahl Kanten)\n\n\nVoll vermaschter Graph hat \n\\frac{n(n-1)}2\n Kanten, das ist die maximal m\u00f6gliche Anzahl\n\n\nDas ist \n\\frac{n(n+1)}2 - n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Kanten-Listen-Struktur hat jeweils der Vertex und die Kante eine Referenze auf die Position in der Sequenz. Dies erm\u00f6glicht, beim L\u00f6schen ein Vertex / eine Kante mit \nO(1)\n aus der Liste zu l\u00f6schen\n\n\nareAdjacent()\n, \nremoveVertex()\n und \nincidentEdges()\n brauchen \nO(m)\n\n\n\n\nRestliche Operationen \nO(1)\n\n\n\n\n\n\n\n\nAdjazent-Listen Struktur\n\n\nJeder Vertex hat eine Referenz auf eine Liste, die Referenzen auf alle incident Vertices enth\u00e4lt\n\n\nDie Kanten halten eine Referenz auf eine Position in der Incident-Liste\n\n\nBeim L\u00f6schen eines Vertex m\u00fcssen die Kanten \nund\n die Referenzen in den Incident-Listen gel\u00f6scht werden\n\n\nLaufzeit von \nremoveVertex(v)\n ist abh\u00e4ngig von der L\u00e4nge der Incident-Liste, also \nO(deg(v))\n\n\n\n\n\n\n\n\nAdjazenz-Matrix Struktur\n\n\nEinf\u00fcgen ist langsam, da die Matrix vergr\u00f6ssert (=kopiert) werden muss\n\n\nareAdjacent()\n ist schnell (\nO(1)\n), da man direkt die Position in der Matrix abfragen kann", 
            "title": "AD2"
        }, 
        {
            "location": "/hs16/ad2/#algorithmen-und-datenstrukturen-2", 
            "text": "Visualisierungen:  http://visualgo.net/", 
            "title": "Algorithmen und Datenstrukturen 2"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-1-binary-search-tree", 
            "text": "Ein Heap hat das kleinste oder gr\u00f6sste Element als Root  Eine Suche auf einem Heap w\u00fcrde mit  O(n)  laufen, da man nicht weiss, welches Child jeweils kleiner / gr\u00f6sser ist   Multimaps: Pro Key sind mehrere Values erlaubt    Folie 5 \nVoraussetzung: Random Access, Daten m\u00fcssen sortiert sein    Folie 6     Insert: Finden der richtigen Position:  O(log(n)) , Rest verschieben:  O(n)   Remove gleich wie Insert     Folie 7      Der Baum muss so aufgebaut sein, dass der linke Child-Knoten immer  = Parent-Node ist  Externe Knoten speichern keine Daten. Wenn man beim Suchen einen Blattknoten erreicht, ist der Key nicht gefunden  Eine Inorder Traversierung besucht die Keys in aufsteigender Reihenfolge     Einf\u00fcgen      Suchen nach dem einzuf\u00fcgenden Key  Man wird auf einen \"Sentinel\" external Node treffen  Dort den neuen Key einf\u00fcgen und in einen internen Knoten umwandeln  Bei einer  Multimap  kann es mehrere gleiche Keys geben. Dann:  find, bis man auf den Knoten trifft  nach links weiter suchen bis man auf einen external Node trifft  Dort einf\u00fcgen und in internen Node umwandeln       L\u00f6schen      Knoten hat zwei Blatt-Kinder:  L\u00f6sche v und sein linkes Child, rechtes Child rutscht nach oben    Knoten hat ein Blatt-Kind:  L\u00f6sche v und den Blatt-Knoten (links oder rechts), der andere Knoten (mit einem Key) rutscht nach oben    Knoten hat keine Blatt-Kinder:  Finde den Knoten  w , der  v  in der Inorder-Traversierung folgt (\"links unten des rechten Teilbaums von  v \")  Kopiere den Key von  w  zu  V  L\u00f6sche  w  mit dem gleichen Algorithmus wie bei Fall 1 und 2    F\u00fcr die ersten beiden F\u00e4lle ist der Algorithmus derselbe     Performance      Worst Case: Komplett unbalancierter Baum (z.B. Einf\u00fcgen mit  sortiertem  Input). H\u00f6he ist  O(n) . Dann ist es eine Linked-List  Best Case: Mit der Mitte beginnen, komplett Balanciert.  H\u00f6he  log(n)   Balanciert sich nicht selbst (wie andere B\u00e4ume, s. sp\u00e4ter)    Implementierung  Hier haben die Attribute der Klasse  Knoten  die Visibility  package , d.h es kann direkt darauf zugegriffen werden  Einf\u00fcgen: Map (nicht Multimap). Wenn der Key schon vorhanden ist, bleibt er einfach bestehen (key wird zur\u00fcck gegeben)", 
            "title": "Vorlesung 1 - Binary Search Tree"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-2-avl-trees-1", 
            "text": "Bei einem AVL Tree muss f\u00fcr jeden Teilbaum gelten, dass die Kinder maximal einen H\u00f6henunterschied von 1 haben.  Beweis: Jeder AVL-Baum mit minimalen Anzahl Knoten  n  bei H\u00f6he  h  hat einen linken und rechten Teilbaum. Der eine Teilbaum hat H\u00f6he  h - 1  und der rechte  h - 2    n(h) = 1 + n(h-1) + n(h-2)  n(h) > 2n(h-2)  n(h-2) = 1 + n(h-3) + n(h-4)  n(h-2) > 2n(h-4)  n(h) > 4n(h-4)  n(h-4) = 1 + n(h-5) + n(h-6)  n(h-4) > 2n(h-6)  n(h) > 8n(h-6)  \\ldots  n(h) > 16n(h-8)  n(h) > 2^i n(h-2i)    n_{min}(h=1) = 1  n_{min}(h=2) = 2    i: h-2i = (1 | 2)  h = (1 | 2) + 2i  \\text{bsp.:}  i = 1 : h = 3 | 4  i = 2 : h = 5 | 6  i = 3 : h = 7 | 8   i = \\frac h2 - 1 \\text{ wobei h/2 gerundet} \nEinsetzen in  n(h) > 2^i n(h-2i) : n > 2^{\\frac h2 - 1} \\cdot (1 | 2) \nKonstanten heraus streichen: n > 2^{\\frac h2-1}  log(n) > \\frac h2 - 1  h < 2\\cdot log(n) + 2  \\rightarrow h \\in O(log(n))    Einf\u00fcgen:  Den neuen Knoten wie bei einem BST einf\u00fcgen  Pr\u00fcfen, ob AVL-Bedingungen verletzt wurden  Aus dem neuen Knoten aus solange nach oben wandern, bis man auf einen Eltern-Knoten eines unbalancierten Teilbaums trifft    Umstrukturierung:  x, y, z: Aufgrund des Suchpfades Kind, Eltern, Grosseltern  a, b, c: Inorder-Reihenfolge  Wenn es von x bis z nur in eine Richtung geht: Rotation um b (= y)  Bei Richtungs\u00e4nderung von x bis z:  Zuerst den Teilbaum b und c (x und y) rotieren, so dass a, b, c wieder in einer Richtung ist wie oben  Wieder wie oben um b rotieren    (Tipp:)  Jeweils nach Rotation mit Inorder Traversierung pr\u00fcfen  Eine Restrukturierung mit Cut/Link muss nicht den gleichen Baum ergeben wie mit dem Rotationsverfahren!    L\u00f6schen  L\u00f6schen wie bei BST  Die Balance kann verletzt werden  Die Knoten x, y, z sollten im h\u00f6heren Teilbaum sein (beim Einf\u00fcgen automatisch gegeben)  Nach dem Restrukturierung kann eine neue Unbalance entstehen! (Im Gegensatz zum Einf\u00fcgen). Man muss bis zur Root weiter nach Unbalancierten Teilb\u00e4umen suchen    Implementierung  Mit einer AVL-Node wird dessen H\u00f6he gespeichert  actionPos: Die Position, in der etwas passiert ist (z.B. letzte Einf\u00fcgeposition). Ist ein Attribut der BST-Klasse  Nach dem Einf\u00fcgen wird die (BST-)Node (Item) mit einer Instanz von AVLItem ersetzt  Besser: Funktion newNode() des BST \u00fcberschreiben", 
            "title": "Vorlesung 2 - AVL-Trees (1)"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-4-splay-trees-merge-sort", 
            "text": "", 
            "title": "Vorlesung 4 - Splay-Trees / Merge-Sort"
        }, 
        {
            "location": "/hs16/ad2/#splay-trees", 
            "text": "Nach dem Einf\u00fcgen ist der eingef\u00fcgte Knoten immer Root  Beim Suchen wird der Baum auch restrukturiert, der gesuchte Knoten ist danach Root  Knoten mit gleichem Wert k\u00f6nnen weit auseinander sein  Suchen gleich wie bei BST  Muss nicht Balanced sein wie AVL!", 
            "title": "Splay-Trees"
        }, 
        {
            "location": "/hs16/ad2/#splay-operation", 
            "text": "Wird nach  jeder  Operation (auch Suchen) ausgef\u00fchrt  rechts und links Rotation gleich wie bei AV\"L  \"zig\" -  linkes Kind, \"zag\" -  rechtes Kind  x: betroffener Knoten, y: parent von x, z: parent-parent von x  Rotationen solange wiederholen, bis x Root wird", 
            "title": "Splay-Operation"
        }, 
        {
            "location": "/hs16/ad2/#loschen", 
            "text": "Wie bei BST  Bei \"Fall 3\": Ersetze Knoten durch inorder-Nachfolger  Splayen mit tiefstem internem  zugegriffenem  Knoten (Elternknoten des gel\u00f6schten)", 
            "title": "L\u00f6schen"
        }, 
        {
            "location": "/hs16/ad2/#performance", 
            "text": "Splaying:  O(h)   Durchschnittlich  O(logn)   Worst case ist H\u00f6he h = n, d.h.  O(n)     Oft besuchte Knoten kommen immer n\u00e4her an die Root, d.h es wird schneller  Anwendung z.B. bei Suchmaschinen", 
            "title": "Performance"
        }, 
        {
            "location": "/hs16/ad2/#splay-entscheid", 
            "text": "Wenn mit find() nicht gefunden wird, der letzte gefunden Knoten nehmen", 
            "title": "Splay-Entscheid"
        }, 
        {
            "location": "/hs16/ad2/#merge-sort", 
            "text": "Divide and Conquer Prinzip  Daten in zwei Teilmengen aufteilen  Problem rekursiv f\u00fcr beide Teilmengen l\u00f6sen  Conquer: L\u00f6sungen mischen  Verankerung ist Inputgr\u00f6sse 1 oder 0    Merge-Sort sortiert Rekursiv die halbe Menge und \"merged\" die beiden sortierten Teilmengen zusammen  Merge()  Beide Listen von vorne her leeren  Wenn A kleiner ist, A in S einf\u00fcgen, sonst B in S einf\u00fcgen  wenn eine Liste leer, der Rest der anderen an S anf\u00fcgen   O(n)  mit double-linked-List    Performance  Die H\u00f6he des Rerkursionsbaums ist  O(log n)   Jede Rekursion braucht  O(n)   Total  O(n log n)     Java.util.sort ist ein modifizierter Merge-Sort  Wenn das gr\u00f6sste Element der ersten Liste kleiner als das kleinste Element der zweiten Liste ist, kann man einfach die beiden Listen aneinander h\u00e4ngen (keine Vergleiche n\u00f6tig)  Garantiert  O(n log n)        Implementierung nicht-rekursiv  mit i = 1: Zweier-P\u00e4rchen sortieren und in out schreiben  in und out swappen  Nun Vierer-Gruppen (zwei P\u00e4rchen) sortiert in out schreiben  in und out swappen  usw... Es wird immer verdoppelt  Quasi im rekurvis-Baum \"Bottom up\"", 
            "title": "Merge-Sort"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-5-quick-sort", 
            "text": "Vergleich Insertion-Sort ( O(n^2) ) und Merge-Sort ( O(n log n)): Bei \\(2^{14}  Elementen ist Merge-Sort 100x schneller, bei 1 Mio. Elementen ist es 6'400x schneller  Insertion Sort w\u00fcrde f\u00fcr 1 Mio. Elemente ca. 1h 47' ben\u00f6tigen, merge-Sort nur einige Sekunden", 
            "title": "Vorlesung 5 - Quick-Sort"
        }, 
        {
            "location": "/hs16/ad2/#quick-sort", 
            "text": "Partitionierung in 3 Mengen: Less, Equal und Greater mit einem Pivot x  Jedes Element in die richtige Menge kopieren -   O(n)     Rekursiver Aufruf mit L und G  Zusammensetzen: L, E, G hintereinander wieder einf\u00fcgen     Wenn der Pivot immer das minimum oder maximum ist, gibt es einen einseitigen \"tree\", d.h Worst-Case ist  O(n^2)   Der optimale Pivot w\u00e4re der mittlere Wert  Wenn die Daten normalverteilt sind, gibt es zu 50% \"bad-calls\" bei zuf\u00e4lliger Wahl des Pivots (1. und 4. Viertel)  Erwartet wird ein Baum mit H\u00f6he  log n . Jedes Level ben\u00f6tigt  O(n) , also total  O(n log n)   In-Place Quicksort  Worst-Case: Wenn die Liste bereits sortiert ist", 
            "title": "Quick-Sort"
        }, 
        {
            "location": "/hs16/ad2/#sorting-lower-bound", 
            "text": "Jede Permutation von Daten zeigt einen Pfad durch den Entscheidungsbaum  Das gibt n! Permutationen, also ist die H\u00f6he des Baumes log(n!) n^n > n! > {\\frac n2}^{\\frac n2}   Die Untere Grenze f\u00fcr  Vergleichs algorithmen ist  O(n log(n))", 
            "title": "Sorting Lower Bound"
        }, 
        {
            "location": "/hs16/ad2/#bucket-sort", 
            "text": "Eine Sequenz mit Key-Value-Paaren  Jedes Item in ein Array mit dem Key als Index kopieren  Genauer ein Array von Listen, Elemente mit gleichem Key werden der Liste angeh\u00e4ngt    Array durch iterieren und der Reihe nach ausgeben  Laufzeit:  O(n + N) , wobei N der gr\u00f6sstm\u00f6gliche Wert der Keys ist  Kein Widerspruch zu oben, weil Algorithmus nicht vergleichs-basiert ist    Eingeschr\u00e4nkt auf ganze, positive Zahlen  Stabile  Sort-Eigenschaft: die relative Ordnung von Items mit gleichem Wert wird nicht ver\u00e4ndert", 
            "title": "Bucket-Sort"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-6-radix-sort-pattern-matching", 
            "text": "", 
            "title": "Vorlesung 6 - Radix-Sort / Pattern Matching"
        }, 
        {
            "location": "/hs16/ad2/#lexikographische-sortierung", 
            "text": "Die letzte Dimension wird  zuletzt  sortiert, d.h die Dimension mit 1. Priorit\u00e4t am Schluss  Einfachste Anwendung ist mit Strings  Radix-Sort  Lexikographische Sortierung mit Bucket-Sort", 
            "title": "Lexikographische Sortierung"
        }, 
        {
            "location": "/hs16/ad2/#pattern-matching", 
            "text": "Ziel: In einer Sequenz von Zeichen ein Pattern finden  Substring wird hier inklusive end-index angegeben. In Java geht der Substring bis endIndex - 1!  Brute-Force-Methode  Pattern am Anfang des Textes ansetzen und Zeichen f\u00fcr Zeichen durchlaufen bis zum Ende  Bei jeder Iteration pr\u00fcfen, ob das Pattern \u00fcbereinstimmt  Performance: Pattern m n Mal durchsuchen -   O(n\\cdot m)     Boyer-Moore Heuristik  \"Looking Glass\": Starte jeweils am Ende des Patterns  \"Character Jump\": Bei einem Mismatch wird mit dem Pattern an die n\u00e4chstm\u00f6gliche Position gesprungen, wo das Zeichen im Text im Pattern vorkommt (wenn nicht, kann es gleich weiter geschoben werden um ganze Patternl\u00e4nge)  Es muss zwinged auf das letzt auftretende (m\u00f6glichst weit rechte) Zeichen ausgerichtet werden  Wenn man dabei nach links schieben w\u00fcrde, wird stattdessen um 1 nach rechts geschoben    Die Last Occurence Funktion speichert von jedem zeichen im Alphabet die letzte Position im Pattern (wenn es nicht vorkommt, -1)  Damit kann mit \\O(1)) die Anzahl der Verschiebungen berechnet werden  Performance: Im Worst Case  O(n\\cdot m + s) , also schlechter als Brute Force. Im Durchschnitt ist er aber sehr schnell f\u00fcr Textanalysen    KMP Algorithmus  Sucht Suffixe, die auch Pr\u00e4fixe vom Pattern sind  So werden nach dem Verschieben nach rechts redundante Vergleiche vermieden", 
            "title": "Pattern Matching"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-8-tries", 
            "text": "Ziel: Preprocessing vom Text (n), um Suchen in Abh\u00e4ngigkeit von m zu erreichen (statt voher von n)  Ein \"Trie\" ist ein geordneter Baum, wobei jeder Knoten ausser der Root ein Zeichen hat  Die Strings entstehen vom ersten Child-Knoten bis zu den externen Nodes  Folie 7  Erster Index ist Index in W\u00f6rter-Array S  Zweiter und dritter Index ist Range in diesem String    Mit einem normalen Trie findet man nur komplette W\u00f6rter und Pr\u00e4fixe als Matches, keine Suffixe  Daf\u00fcr f\u00fcr jedes Wort einen Suffix-Trie erstellen  Jeder m\u00f6gliche Suffix wird in den Trie eingef\u00fcgt  Auch substrings werden darin gefunden, da sie pr\u00e4fixe der Suffixe im Suffix-Trie sind", 
            "title": "Vorlesung 8 - Tries"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-9-dynamische-programmierung", 
            "text": "Rucksack-Problem ist hier nur polynomiell l\u00f6sbar, weil es ganze Zahlen sind (sonst ist es NP-Vollst\u00e4ndig)  Ziel ist immer, Resultate von Subproblemen zu speichern, weil sie Einfluss auf die anderen L\u00f6sungen (der Subprobleme) haben  Beispiel Fibonacci: Mit normaler Rekursiver Variante werden die tieferen Fib-Zahlen immer mehrmals berechnen. Viel schneller ist es, die Zwischenergebnisse jeweils in einer Tabelle zu speichern, und nur berechnen, wenn sie noch nicht darin vorkommen.  Beispiel LCS  Horizontal ist X(m), Vertikal Y(n)        C  G  A  T  ...       G  0  1  1  1  ...    T  0  1  1  2  ...    T", 
            "title": "Vorlesung 9 - Dynamische Programmierung"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-10-graphen-1", 
            "text": "Definition:  V  ist Set von Vertices,  E  eine Collection von Vertices-Paaren (=Kanten)  Kanten und Vertizes speichern Elemente  gerichtet: Kante hat eine Richtung  Gibt auch Graphen, die gerichtete und ungerichtete Kanten mischen (z.B. bei Klassendiagramm)  inzident : Kante endet an einem Knoten V  parallele kanten: k(anten, die die gleichen zwei Knoten verbinden  Schleife: Kante von Knoten auf sich selbst  Einfacher Pfad: Jede Kante und Vertices kommt nur einmal vor  Zyklus endet \u00e4ndert immer in einer Kante (die letzte Verbindung zum Startknoten)  Die Summe der Grade in einem Graph ist immer 2*m (2 * Anzahl Kanten)  Voll vermaschter Graph hat  \\frac{n(n-1)}2  Kanten, das ist die maximal m\u00f6gliche Anzahl  Das ist  \\frac{n(n+1)}2 - n       In Kanten-Listen-Struktur hat jeweils der Vertex und die Kante eine Referenze auf die Position in der Sequenz. Dies erm\u00f6glicht, beim L\u00f6schen ein Vertex / eine Kante mit  O(1)  aus der Liste zu l\u00f6schen  areAdjacent() ,  removeVertex()  und  incidentEdges()  brauchen  O(m)   Restliche Operationen  O(1)     Adjazent-Listen Struktur  Jeder Vertex hat eine Referenz auf eine Liste, die Referenzen auf alle incident Vertices enth\u00e4lt  Die Kanten halten eine Referenz auf eine Position in der Incident-Liste  Beim L\u00f6schen eines Vertex m\u00fcssen die Kanten  und  die Referenzen in den Incident-Listen gel\u00f6scht werden  Laufzeit von  removeVertex(v)  ist abh\u00e4ngig von der L\u00e4nge der Incident-Liste, also  O(deg(v))     Adjazenz-Matrix Struktur  Einf\u00fcgen ist langsam, da die Matrix vergr\u00f6ssert (=kopiert) werden muss  areAdjacent()  ist schnell ( O(1) ), da man direkt die Position in der Matrix abfragen kann", 
            "title": "Vorlesung 10 - Graphen (1)"
        }, 
        {
            "location": "/hs16/reing/", 
            "text": "Recht\n\n\nVorlesung 1 - Vertragsrecht (I)\n\n\n\n\n\u00d6ffentliches Recht: Vom Staat aus, Staat handelt hoheitlich\n\n\nBundesstaatsrecht, Verwaltungsrecht, Strafrecht, etc.\n\n\n\n\n\n\nPrivatrecht: Zwei private (sind gleichgestellt)\n\n\nZGB, OR\n\n\n\n\n\n\n\n\nSchuldverh\u00e4ltnis\n\n\n\n\nObligation = Schuldverh\u00e4ltnis\n\n\nWichtigste Grunds\u00e4tze basieren auf r\u00f6mischem Recht\n\n\nMind. 1 Person muss etwas leisten, mind. 1 Person darf etwas fordern\n\n\nEntstehungsgr\u00fcnde\n\n\nGesetz\n\n\nunerlaubte Handlung (OR 41, 58)\n\n\nungerechtfertigte Bereicherung (62 II, 63 I OR), z.B. Fehl\u00fcberweisung\n\n\n\n\n\n\nRechtsgesch\u00e4ft\n\n\nSchuldverh\u00e4ltnis aufgrund einer (privaten) Willens\u00e4usserung\n\n\nEinseitiges Rechtsgesch\u00e4ft: Willens\u00e4usserung einer Person (z.B. Testament)\n\n\nzwei- oder mehrseitige Rechtsgesch\u00e4fte, Wissens\u00e4usserung mehrerer Personen, z.B. \nVertr\u00e4ge\n\n\n\n\n\n\n\n\n\n\nWillens\u00e4usserung\n\n\nJe nach Art ist die \u00c4usserung unterschiedlich lang g\u00fcltig\n\n\nausdr\u00fccklich / stillschweigend (konkludente)\n\n\nunmittelbare / mittelbare: Direkter Dialog beider Parteien. Mittelbar: E-mail oder Brief (l\u00e4nger g\u00fcltig)\n\n\nempfangsbed\u00fcrftige / nicht empfangsbed\u00fcrftige\n\n\n\n\n\n\n\n\nVertragsschluss\n\n\n\n\nEs braucht gegenseitige Willens\u00e4usserung (Antrag -\n Annahme)\n\n\nAntrag kann mit oder ohne Annahmefrist gestellt werden\n\n\nohne Annahmefrist: Unterscheidung unter A\nn\nwesenden oder unter A\nb\nwesenden\n\n\n\n\n\n\nFolie 16\n\n\nBefristeter Antrag (Zeitzone des Antragstellers)\n\n\nAntrag unter Anwesenden (\"Haust\u00fcrgesch\u00e4ft\" kann widerrufen werden innert 7 Tagen)\n\n\nAntrag unter Abwesenden (ca 5 Tage Frist)\n\n\nBei niedrigem Wert darf das Buch behalten werden (\"Die unbestelle Zustellung einer Sache stellt \nkein Antrag\n dar\")\n\n\n\n\n\n\nVoraussetzungen\n\n\nhandlungsf\u00e4hige Personen (ZGB 12) (m\u00fcndig und handlungsf\u00e4hig)\n\n\n\u00fcbereinstimmende Willens\u00e4usserung (Antrag / Annahme)\n\n\nEinigung \u00fcber wesentliche Punkte\n\n\n\n\n\n\nEinseitige Vertr\u00e4ge: z.B. Schenkung\n\n\nzweiseitige Vertr\u00e4ge: Beiden Parteien haben Leitsungspflicht\n\n\nvolkommen zweiseitig: Miete, Kauf\n\n\nunvolkommen zweiseitig: z.B. unentgeltlicher Auftrag, eine Leistung wird h\u00f6her gewichtet als die andere\n\n\n\n\n\n\nNomninatvertr\u00e4ge: Im Gesetzt (OR) geregelt, z.B. Kauf\n\n\nInnominatvertr\u00e4ge: gesetzlich nicht geregelt, z.B. Leasing\n\n\nBeispiele \nFolie 21\n\n\nMiete: \nNominatvertrag\n (viele zwingende Bestimmunge zum Schutz des Mieters)\n\n\nWerkvertrag: \nNominatertrag\n (Im Unterschied zum Kaufvertrag exisitert das Produkt bei Vertragsabschluss noch nicht, Erstellung eines Werkes)\n\n\nFranchising: \nInnominatvertrag\n\n\nFactoring: \nInnominatvertrag\n (Zahlungsschuld/Inkasso verkaufen an einen Factor)\n\n\nArbeitsvertrag: \nNominatvertrag\n\n\nSponsoring: \nInnominatvertrag\n\n\n\n\n\n\nVertragsfreiheit\n\n\nDie Form und der Inhalt ist frei w\u00e4hlbar\n\n\nEr kann nachtr\u00e4glich ver\u00e4ndert oder aufgehoben werden (beidseitig)\n\n\n\n\n\n\nSchranken der Vertragsfreiheit\n\n\nWiderrechtlichkeit: Verstoss gegen zwingendes Gesetz\n\n\n\u00f6ffentliche Ordnung\n\n\nSittenwidrigkeit\n\n\nVerstoss gegen Pers\u00f6nlichkeitsrecht\n\n\nUnm\u00f6glichkeit (z.B. Grundst\u00fcck auf dem Mond)\n\n\n-\n Folge: Vertrag ist nichtig\n\n\nBeispiele \nFolie 24\n\n\nWiderrechtlich\n\n\nWenn zwischen H und Z bereits ein Kaufvertrag besteht -\n Doppelverkauf. H muss zweites Abendkleid oder Schadenersatz leisten\n\n\nNichtig, Verstoss gegen Pers\u00f6nlichkeitsrecht\n\n\nNichtig. Kann gegen Pers\u00f6nlichkeitsrecht verstossen, wegem langer Vertragslaufzeit (ab 20 Jahre nach BG). Auch juristische Personen k\u00f6nnen sich auf das Pers\u00f6nlichkeitsrecht verstossen\n\n\n\n\n\n\n\n\n\n\n\n\nVorlesung 2 - Vertragsrecht (II)\n\n\n\n\nAnwendung\n\n\nIn jedem Fall sind die zwingenden Gesetze anzuwenden, keine Abweichung m\u00f6glich\n\n\nWo das Gesetzt nicht zwingend ist, kann vertraglich etwas anderes vereinbar werden\n\n\nWenn nichts vereinbart, gelten nicht zwingende Gesetzesnormen\n\n\n\n\n\n\n\n\nFormvorschriften\n\n\n\n\nVertrag kann auch ohne Form zustande kommen, z.B. etwas mit einem Preisschild ausstellen oder \"self-checkout\"\n\n\nGesetz kann eine Form vorschreiben\n\n\nz.B. Grundst\u00fcckkaufvertrag muss im Grundbuchregister eingetragen und von einem Notar beglaubigt werden (\u00f6ffentliche Beurkundung)\n\n\n\n\n\n\nFormvorschriften\n\n\neinfache Schriftlichkeit: Unterschrift oder digitale Signatur\n\n\nqualifizierte Schriftlichkeit (zus\u00e4tzliche Anforderungen)\n\n\n\u00f6ffentliche Beurkundung: Normalerweise durch Notariat\n\n\n\n\n\n\nBeispiele Folie 30\n\n\nEhevertrag (nicht die Eheschliessung, sondern z.B. G\u00fctertrennung): \n\u00f6ffentliche Beurkundung\n\n\nAuftrag: \nKeine Formvorschriften\n\n\nErbvertrag (im Unterschied zum Testament zweiseitiges Rechtsgesch\u00e4ft): \n\u00f6ffentliche Beurkundung\n\n\nArbeitsvertrag: \nKeine Form vorgeschrieben\n\n\nMietvertrag: \nKeine Form vorgeschrieben\n\n\n\n\n\n\nGrundsatz\n: Vertrag muss eingehalten werden und kann nicht einseitig aufgel\u00f6st werden. Ausnahme bei Streitfall (Zivilprozess)\n\n\n\n\nVertragserf\u00fcllung\n\n\n\n\nWer? h\u00f6chspers\u00f6nliche Leistung (v.a. Dienstleistung) durch Schuldner, andere Leistungen auch durch Dritte (Sach- und Geldleistungen)\n\n\nWas? \nvertraglich\n vereinbarte Leistung oder \ngesetzlich\n geschuldete Leistung\n\n\nWo? Erf\u00fcllungsort (vertraglich vereinbart oder gesetzlich). Geldschulden sind Bringschulden, alle \u00fcbrigen Holschulden\n\n\nWann? zur Erf\u00fcllungszeit (vertraglich vereinbart oder gesetzlich). Lohn z.B. Ende Monat, ansonsten normalerweise sofort / unmittelbar\n\n\nBeispiele Folie 37\n\n\nWenn der Chefarzt beauftragt wurde, kann es nur von ihm erf\u00fcllt werden\n\n\nWein hat je nach Jahrgang unterschiedlicher Preis. Evtl. wurde dann nicht die geschuldete Leistung erbracht\n\n\nKeine Gelschuld, also \nHol\nschuld. Ausser es wurde eine Lieferung vereinbart\n\n\nH\u00e4ufig wird F\u00e4lligkeitsdatum vereinbart. Gesetzt schreibt nichts vor, sie w\u00e4re erst Ende Monat geschuldet\n\n\n\n\n\n\n\n\nLeistungsst\u00f6rung, Verzugsfolgen, Durchsetzung der Forderung\n\n\n\n\nNichtleistung: Kommt darauf an, ob der Schuldner es selbst zu verschulden kan\n\n\nSchlechtleistung: Das falsche geleistet oder Verletzung einer Nebenpflicht (z.B. Lieferung)\n\n\nSp\u00e4tleistung: Nicht rechtzeitige Erf\u00fcllung\n\n\npositivies Interesse: So, wie der Vertrag erf\u00fcllt worden w\u00e4re\n\n\nnegatives Interesse: so, als ob der Vertrag nie stattgefunden h\u00e4tte\n\n\nBetreibungsverfahren: Am Wohnsitz des Schuldners -\n Betreibungsbegehren. Wenn vom Schuldner Rechtsvorschlag erhoben wird, muss der Gl\u00e4ubiger die Rechtfertigkeit beweisen\n\n\nWenn der Schuldner im Ausland wohnt, muss er auch im Ausland betrieben werden (Konsumentenvorschrift im Raum EU)\n\n\nVerj\u00e4hrung\n\n\nForderung besteht noch, ist aber nicht mehr zwangsweise durchzusetzen (bei Betreibung)\n\n\nMeist nach 10 Jahren verj\u00e4hrt\n\n\nPeriodische Forderungen verj\u00e4hren nach 5 Jahren\n\n\nZweck: Erhaltung der Rechtssicherheit und des Rechtsfriedens\n\n\n\n\n\n\n\n\n\n\nVorlesung 4\n\n\nEinf\u00fchrung in die Rechtsordnung\n\n\n\n\n(Ab Folie 10)\n\n\nAnforderung an die Rechtsordnung\n\n\nMuss sich ver\u00e4ndern, anpassen\n\n\nRecht muss durchgesetzt werden k\u00f6nnen\n\n\n\n\n\n\nObjektives Recht\n\n\n\u00d6ffentliches Recht (z.B. Bundesverfassung)\n\n\nist zwingend\n\n\nregelt Beziehung Staat \n-\n Gesellschaft\n\n\nregelt Organisation des Staates\n\n\nDer Staat ist mit hoheiltichen Befugnissen ausgestattet (\nSubordinationsprinzip\n)\n\n\nLegalit\u00e4tsprinzip\n: \"Prinzip der Gesetzm\u00e4ssigkeit\". Staatliches Handeln muss immer eine gesetzliche Grundlage haben\n\n\nOffizialmaxime\n: Es gibt Rechtsgegenst\u00e4nde, die von Amtes wegen verfolgt werden m\u00fcssen (z.B. T\u00f6tungsdelikt)\n\n\n\n\n\n\nPrivatrecht (z.B. ZGB, OR)\n\n\nRegelt Beziehung zwischen einzelnen Mitglieder der Gesellschaft\n\n\nZwischen zwei gleichberechtigten Rechtssubjekten\n\n\nAuch der Staat kann im Privatrecht agieren\n\n\nGrunds\u00e4tzlich ab\u00e4nderbar (dispositiv)\n\n\nPrivatautonomie\n: Parteien sind frei im Handeln. z.B. Vertragsfreiheit (OR 19). Solange es nicht gegen \u00f6ffentliches / pers\u00f6nliches Recht verst\u00f6sst oder \"gegen die guten Sitten\"\n\n\nKoordinationsprinzip\n: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVorlesung 9 - Strafrecht\n\n\n\n\nObjektiver TB: \u00e4ussere Merkmale einer Tat: Wer hat was gemacht (zu wem)?\n\n\nSubjektiver TB:\n\n\nEventualvorsatz: Dem T\u00e4ter \"ist es egal\", nimmt es in Kauf und weiss dar\u00fcber\n\n\n\n\n\n\nStrafmass wird in der Schweiz nicht automatisch addiert bei mehreren Tatbest\u00e4nden, sondern abgewogen\n\n\nNicht jeder Tatbestand ist Rechtswidrig, z.B. wegen Notwehr (nur gegen Menschen, nicht z.B. Natur), Amtspflichten, Einwilligung des Verletzten (\u00e4rtzliche Eingriffe)\n\n\nNotstand: jemand anderes retten (Schutz h\u00f6herwertiger Interessen)\n\n\n\n\n\n\nMassnahmen: Wenn jemand nicht schuldhaft gehandelt hat\n\n\nBusse ist f\u00fcr alle gleich hoch, Geldstrafe kommt auf Einkommen (H\u00f6he Tagessatz) drauf an\n\n\n\n\n\n\nVorlesung 10 - Strafrecht (2)\n\n\n\n\nMassnahmen\n\n\n\"Verwahrung\": Eine Person verwahren, um sie vor der Gesellschaft zu sch\u00fctzen, im Gegensatz zu anderen Massnahmen, die das Ziel haben, jemanden wieder in die Gesellschaft zu integrieren\n\n\nSubsidiriarit\u00e4tsprinzip: Das einfachste m\u00f6gliche Mittel (nicht \"zu hart bestrafen\")\n\n\nBegutachtungspflicht: Richter braucht Begutachter f\u00fcr Entscheidungen, ob z.B. jemand in eine Psychiatrie kommt", 
            "title": "ReIng"
        }, 
        {
            "location": "/hs16/reing/#recht", 
            "text": "", 
            "title": "Recht"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-1-vertragsrecht-i", 
            "text": "\u00d6ffentliches Recht: Vom Staat aus, Staat handelt hoheitlich  Bundesstaatsrecht, Verwaltungsrecht, Strafrecht, etc.    Privatrecht: Zwei private (sind gleichgestellt)  ZGB, OR", 
            "title": "Vorlesung 1 - Vertragsrecht (I)"
        }, 
        {
            "location": "/hs16/reing/#schuldverhaltnis", 
            "text": "Obligation = Schuldverh\u00e4ltnis  Wichtigste Grunds\u00e4tze basieren auf r\u00f6mischem Recht  Mind. 1 Person muss etwas leisten, mind. 1 Person darf etwas fordern  Entstehungsgr\u00fcnde  Gesetz  unerlaubte Handlung (OR 41, 58)  ungerechtfertigte Bereicherung (62 II, 63 I OR), z.B. Fehl\u00fcberweisung    Rechtsgesch\u00e4ft  Schuldverh\u00e4ltnis aufgrund einer (privaten) Willens\u00e4usserung  Einseitiges Rechtsgesch\u00e4ft: Willens\u00e4usserung einer Person (z.B. Testament)  zwei- oder mehrseitige Rechtsgesch\u00e4fte, Wissens\u00e4usserung mehrerer Personen, z.B.  Vertr\u00e4ge      Willens\u00e4usserung  Je nach Art ist die \u00c4usserung unterschiedlich lang g\u00fcltig  ausdr\u00fccklich / stillschweigend (konkludente)  unmittelbare / mittelbare: Direkter Dialog beider Parteien. Mittelbar: E-mail oder Brief (l\u00e4nger g\u00fcltig)  empfangsbed\u00fcrftige / nicht empfangsbed\u00fcrftige", 
            "title": "Schuldverh\u00e4ltnis"
        }, 
        {
            "location": "/hs16/reing/#vertragsschluss", 
            "text": "Es braucht gegenseitige Willens\u00e4usserung (Antrag -  Annahme)  Antrag kann mit oder ohne Annahmefrist gestellt werden  ohne Annahmefrist: Unterscheidung unter A n wesenden oder unter A b wesenden    Folie 16  Befristeter Antrag (Zeitzone des Antragstellers)  Antrag unter Anwesenden (\"Haust\u00fcrgesch\u00e4ft\" kann widerrufen werden innert 7 Tagen)  Antrag unter Abwesenden (ca 5 Tage Frist)  Bei niedrigem Wert darf das Buch behalten werden (\"Die unbestelle Zustellung einer Sache stellt  kein Antrag  dar\")    Voraussetzungen  handlungsf\u00e4hige Personen (ZGB 12) (m\u00fcndig und handlungsf\u00e4hig)  \u00fcbereinstimmende Willens\u00e4usserung (Antrag / Annahme)  Einigung \u00fcber wesentliche Punkte    Einseitige Vertr\u00e4ge: z.B. Schenkung  zweiseitige Vertr\u00e4ge: Beiden Parteien haben Leitsungspflicht  volkommen zweiseitig: Miete, Kauf  unvolkommen zweiseitig: z.B. unentgeltlicher Auftrag, eine Leistung wird h\u00f6her gewichtet als die andere    Nomninatvertr\u00e4ge: Im Gesetzt (OR) geregelt, z.B. Kauf  Innominatvertr\u00e4ge: gesetzlich nicht geregelt, z.B. Leasing  Beispiele  Folie 21  Miete:  Nominatvertrag  (viele zwingende Bestimmunge zum Schutz des Mieters)  Werkvertrag:  Nominatertrag  (Im Unterschied zum Kaufvertrag exisitert das Produkt bei Vertragsabschluss noch nicht, Erstellung eines Werkes)  Franchising:  Innominatvertrag  Factoring:  Innominatvertrag  (Zahlungsschuld/Inkasso verkaufen an einen Factor)  Arbeitsvertrag:  Nominatvertrag  Sponsoring:  Innominatvertrag    Vertragsfreiheit  Die Form und der Inhalt ist frei w\u00e4hlbar  Er kann nachtr\u00e4glich ver\u00e4ndert oder aufgehoben werden (beidseitig)    Schranken der Vertragsfreiheit  Widerrechtlichkeit: Verstoss gegen zwingendes Gesetz  \u00f6ffentliche Ordnung  Sittenwidrigkeit  Verstoss gegen Pers\u00f6nlichkeitsrecht  Unm\u00f6glichkeit (z.B. Grundst\u00fcck auf dem Mond)  -  Folge: Vertrag ist nichtig  Beispiele  Folie 24  Widerrechtlich  Wenn zwischen H und Z bereits ein Kaufvertrag besteht -  Doppelverkauf. H muss zweites Abendkleid oder Schadenersatz leisten  Nichtig, Verstoss gegen Pers\u00f6nlichkeitsrecht  Nichtig. Kann gegen Pers\u00f6nlichkeitsrecht verstossen, wegem langer Vertragslaufzeit (ab 20 Jahre nach BG). Auch juristische Personen k\u00f6nnen sich auf das Pers\u00f6nlichkeitsrecht verstossen", 
            "title": "Vertragsschluss"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-2-vertragsrecht-ii", 
            "text": "Anwendung  In jedem Fall sind die zwingenden Gesetze anzuwenden, keine Abweichung m\u00f6glich  Wo das Gesetzt nicht zwingend ist, kann vertraglich etwas anderes vereinbar werden  Wenn nichts vereinbart, gelten nicht zwingende Gesetzesnormen", 
            "title": "Vorlesung 2 - Vertragsrecht (II)"
        }, 
        {
            "location": "/hs16/reing/#formvorschriften", 
            "text": "Vertrag kann auch ohne Form zustande kommen, z.B. etwas mit einem Preisschild ausstellen oder \"self-checkout\"  Gesetz kann eine Form vorschreiben  z.B. Grundst\u00fcckkaufvertrag muss im Grundbuchregister eingetragen und von einem Notar beglaubigt werden (\u00f6ffentliche Beurkundung)    Formvorschriften  einfache Schriftlichkeit: Unterschrift oder digitale Signatur  qualifizierte Schriftlichkeit (zus\u00e4tzliche Anforderungen)  \u00f6ffentliche Beurkundung: Normalerweise durch Notariat    Beispiele Folie 30  Ehevertrag (nicht die Eheschliessung, sondern z.B. G\u00fctertrennung):  \u00f6ffentliche Beurkundung  Auftrag:  Keine Formvorschriften  Erbvertrag (im Unterschied zum Testament zweiseitiges Rechtsgesch\u00e4ft):  \u00f6ffentliche Beurkundung  Arbeitsvertrag:  Keine Form vorgeschrieben  Mietvertrag:  Keine Form vorgeschrieben    Grundsatz : Vertrag muss eingehalten werden und kann nicht einseitig aufgel\u00f6st werden. Ausnahme bei Streitfall (Zivilprozess)", 
            "title": "Formvorschriften"
        }, 
        {
            "location": "/hs16/reing/#vertragserfullung", 
            "text": "Wer? h\u00f6chspers\u00f6nliche Leistung (v.a. Dienstleistung) durch Schuldner, andere Leistungen auch durch Dritte (Sach- und Geldleistungen)  Was?  vertraglich  vereinbarte Leistung oder  gesetzlich  geschuldete Leistung  Wo? Erf\u00fcllungsort (vertraglich vereinbart oder gesetzlich). Geldschulden sind Bringschulden, alle \u00fcbrigen Holschulden  Wann? zur Erf\u00fcllungszeit (vertraglich vereinbart oder gesetzlich). Lohn z.B. Ende Monat, ansonsten normalerweise sofort / unmittelbar  Beispiele Folie 37  Wenn der Chefarzt beauftragt wurde, kann es nur von ihm erf\u00fcllt werden  Wein hat je nach Jahrgang unterschiedlicher Preis. Evtl. wurde dann nicht die geschuldete Leistung erbracht  Keine Gelschuld, also  Hol schuld. Ausser es wurde eine Lieferung vereinbart  H\u00e4ufig wird F\u00e4lligkeitsdatum vereinbart. Gesetzt schreibt nichts vor, sie w\u00e4re erst Ende Monat geschuldet", 
            "title": "Vertragserf\u00fcllung"
        }, 
        {
            "location": "/hs16/reing/#leistungsstorung-verzugsfolgen-durchsetzung-der-forderung", 
            "text": "Nichtleistung: Kommt darauf an, ob der Schuldner es selbst zu verschulden kan  Schlechtleistung: Das falsche geleistet oder Verletzung einer Nebenpflicht (z.B. Lieferung)  Sp\u00e4tleistung: Nicht rechtzeitige Erf\u00fcllung  positivies Interesse: So, wie der Vertrag erf\u00fcllt worden w\u00e4re  negatives Interesse: so, als ob der Vertrag nie stattgefunden h\u00e4tte  Betreibungsverfahren: Am Wohnsitz des Schuldners -  Betreibungsbegehren. Wenn vom Schuldner Rechtsvorschlag erhoben wird, muss der Gl\u00e4ubiger die Rechtfertigkeit beweisen  Wenn der Schuldner im Ausland wohnt, muss er auch im Ausland betrieben werden (Konsumentenvorschrift im Raum EU)  Verj\u00e4hrung  Forderung besteht noch, ist aber nicht mehr zwangsweise durchzusetzen (bei Betreibung)  Meist nach 10 Jahren verj\u00e4hrt  Periodische Forderungen verj\u00e4hren nach 5 Jahren  Zweck: Erhaltung der Rechtssicherheit und des Rechtsfriedens", 
            "title": "Leistungsst\u00f6rung, Verzugsfolgen, Durchsetzung der Forderung"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-4", 
            "text": "", 
            "title": "Vorlesung 4"
        }, 
        {
            "location": "/hs16/reing/#einfuhrung-in-die-rechtsordnung", 
            "text": "(Ab Folie 10)  Anforderung an die Rechtsordnung  Muss sich ver\u00e4ndern, anpassen  Recht muss durchgesetzt werden k\u00f6nnen    Objektives Recht  \u00d6ffentliches Recht (z.B. Bundesverfassung)  ist zwingend  regelt Beziehung Staat  -  Gesellschaft  regelt Organisation des Staates  Der Staat ist mit hoheiltichen Befugnissen ausgestattet ( Subordinationsprinzip )  Legalit\u00e4tsprinzip : \"Prinzip der Gesetzm\u00e4ssigkeit\". Staatliches Handeln muss immer eine gesetzliche Grundlage haben  Offizialmaxime : Es gibt Rechtsgegenst\u00e4nde, die von Amtes wegen verfolgt werden m\u00fcssen (z.B. T\u00f6tungsdelikt)    Privatrecht (z.B. ZGB, OR)  Regelt Beziehung zwischen einzelnen Mitglieder der Gesellschaft  Zwischen zwei gleichberechtigten Rechtssubjekten  Auch der Staat kann im Privatrecht agieren  Grunds\u00e4tzlich ab\u00e4nderbar (dispositiv)  Privatautonomie : Parteien sind frei im Handeln. z.B. Vertragsfreiheit (OR 19). Solange es nicht gegen \u00f6ffentliches / pers\u00f6nliches Recht verst\u00f6sst oder \"gegen die guten Sitten\"  Koordinationsprinzip :", 
            "title": "Einf\u00fchrung in die Rechtsordnung"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-9-strafrecht", 
            "text": "Objektiver TB: \u00e4ussere Merkmale einer Tat: Wer hat was gemacht (zu wem)?  Subjektiver TB:  Eventualvorsatz: Dem T\u00e4ter \"ist es egal\", nimmt es in Kauf und weiss dar\u00fcber    Strafmass wird in der Schweiz nicht automatisch addiert bei mehreren Tatbest\u00e4nden, sondern abgewogen  Nicht jeder Tatbestand ist Rechtswidrig, z.B. wegen Notwehr (nur gegen Menschen, nicht z.B. Natur), Amtspflichten, Einwilligung des Verletzten (\u00e4rtzliche Eingriffe)  Notstand: jemand anderes retten (Schutz h\u00f6herwertiger Interessen)    Massnahmen: Wenn jemand nicht schuldhaft gehandelt hat  Busse ist f\u00fcr alle gleich hoch, Geldstrafe kommt auf Einkommen (H\u00f6he Tagessatz) drauf an", 
            "title": "Vorlesung 9 - Strafrecht"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-10-strafrecht-2", 
            "text": "Massnahmen  \"Verwahrung\": Eine Person verwahren, um sie vor der Gesellschaft zu sch\u00fctzen, im Gegensatz zu anderen Massnahmen, die das Ziel haben, jemanden wieder in die Gesellschaft zu integrieren  Subsidiriarit\u00e4tsprinzip: Das einfachste m\u00f6gliche Mittel (nicht \"zu hart bestrafen\")  Begutachtungspflicht: Richter braucht Begutachter f\u00fcr Entscheidungen, ob z.B. jemand in eine Psychiatrie kommt", 
            "title": "Vorlesung 10 - Strafrecht (2)"
        }, 
        {
            "location": "/hs16/bupl/", 
            "text": "Business Plan\n\n\nModularbeit\n\n\n\n\nAbgabe Mittwoch, 21. Dez\n\n\nAufbau aus 1. Vorlesung Folie 10 \u00fcbernehmen\n\n\nca. 20 Seiten\n\n\nEigenst\u00e4ndigkeitserkl\u00e4rung\n\n\nGebunden\n\n\nKurzbeschreibung auf Deckblatt\n\n\n\n\nGesch\u00e4ftsidee\n\n\n\n\nMarktorientierte Definition: Was ist der Kundennutze?\n\n\nMarket Pull: Es gibt einen markt daf\u00fcr (ungel\u00f6stes Problem), das man l\u00f6sen m\u00f6chte\n\n\nTechnology Push: Neue Technologien bringen neue Dienstleistungen, der Markt muss sich zuerst entwickeln\n\n\n\"Copycat\" Z.b. auch Ideen, die in Japan/USA schon funktionieren, aber noch nicht hier sind\n\n\n\n\nElevator Pitch\n\n\n\n\nWhat is your product?\n\n\nWho is your market?\n\n\nWhat is your revenue model? (How do you expect to make money?)\n\n\nWho is behind the company?\n\n\nWho is your competition?\n\n\nWhat is your competitive advantage?\n\n\n\n\nGesch\u00e4ftsmodelle\n\n\nKonkurrenz\n\n\n\n\nMarktformen: In welchem Markt befinden wir uns?\n\n\nBranchenstruktur NOGA: Offizieller Branchenschl\u00fcssel. In welcher Branche sind wir? NOGA-Code finden. Siehe \nhttp://kubb2008.bfs.admin.ch\n\n\nFive-Forces: Drei Dimensionen der Konkurrenz\n\n\nStrategische Gruppe: \u00c4hnliche Konkurrenten gruppieren\n\n\nAchsen sind Branchenspezifisch (Dimensionen d\u00fcrfen nicht korrelieren!)\n\n\n\n\n\n\nWettbewerbsanalyse: Unternehmen der gleichen Gruppe vergleichen\n\n\nBusinessplan ca. 2 Seiten", 
            "title": "BuPl"
        }, 
        {
            "location": "/hs16/bupl/#business-plan", 
            "text": "", 
            "title": "Business Plan"
        }, 
        {
            "location": "/hs16/bupl/#modularbeit", 
            "text": "Abgabe Mittwoch, 21. Dez  Aufbau aus 1. Vorlesung Folie 10 \u00fcbernehmen  ca. 20 Seiten  Eigenst\u00e4ndigkeitserkl\u00e4rung  Gebunden  Kurzbeschreibung auf Deckblatt", 
            "title": "Modularbeit"
        }, 
        {
            "location": "/hs16/bupl/#geschaftsidee", 
            "text": "Marktorientierte Definition: Was ist der Kundennutze?  Market Pull: Es gibt einen markt daf\u00fcr (ungel\u00f6stes Problem), das man l\u00f6sen m\u00f6chte  Technology Push: Neue Technologien bringen neue Dienstleistungen, der Markt muss sich zuerst entwickeln  \"Copycat\" Z.b. auch Ideen, die in Japan/USA schon funktionieren, aber noch nicht hier sind", 
            "title": "Gesch\u00e4ftsidee"
        }, 
        {
            "location": "/hs16/bupl/#elevator-pitch", 
            "text": "What is your product?  Who is your market?  What is your revenue model? (How do you expect to make money?)  Who is behind the company?  Who is your competition?  What is your competitive advantage?", 
            "title": "Elevator Pitch"
        }, 
        {
            "location": "/hs16/bupl/#geschaftsmodelle", 
            "text": "", 
            "title": "Gesch\u00e4ftsmodelle"
        }, 
        {
            "location": "/hs16/bupl/#konkurrenz", 
            "text": "Marktformen: In welchem Markt befinden wir uns?  Branchenstruktur NOGA: Offizieller Branchenschl\u00fcssel. In welcher Branche sind wir? NOGA-Code finden. Siehe  http://kubb2008.bfs.admin.ch  Five-Forces: Drei Dimensionen der Konkurrenz  Strategische Gruppe: \u00c4hnliche Konkurrenten gruppieren  Achsen sind Branchenspezifisch (Dimensionen d\u00fcrfen nicht korrelieren!)    Wettbewerbsanalyse: Unternehmen der gleichen Gruppe vergleichen  Businessplan ca. 2 Seiten", 
            "title": "Konkurrenz"
        }, 
        {
            "location": "/hs16/cpi/", 
            "text": "C++\n\n\n\n\nWiki: \nhttps://wiki.ifs.hsr.ch/CPlusPlus/wiki.cgi?CPlusPlus\n\n\nC++ Referenz: \nhttp://en.cppreference.com/w/cpp\n\n\n\n\nVorlesung 1\n\n\n\n\n\"Undefined Behaviour\": Verhalten nicht definiert, wenn z.B. Divison durch 0 oder Segmentation fault (\"Es kann alles passieren\"). Schlimmster Fall: Es l\u00e4uft!\n\n\nHelloWorld:\n\n\n#include\n: Pr\u00e4prozessor Anweisung\n\n\nusing namespace std;\n: Kann alle Namen ohne \nstd::\n benutzen. Man kann dann nicht sagen, aus welchem Namespace eine Anweisung kommt, oder ob es eine Variable oder Funktion etc. ist\n\n\n: Links Shift, ist Teil der Bibliothek (Operator Overloading). Quasi Funktionsaufruf mit string-literal als Argument\n\n\ncout\n: Ein Stream von \nstd\n\n\nendl\n ist eine Funktion, flusht den Stream\n\n\n\n\n\n\nCompilation\n\n\nIm Header (z.B. \niostream\n) stehen die Definitionen (z.B. dass es \ncout\n gibt)\n\n\nDer Linker linkt die standard library (dort ist \ncout\n implementiert)\n\n\n\n\n\n\nStrings z.B. werden im Unterschied zu Java direkt auf dem Stack abgelegt\n\n\nKlassen: \nstruct\n heisst public, \nclass\n privat\n\n\nEin private bzw. public block mit \npublic:\n, \nprivate:\n bezeichnen, alles ab dort hat dann den Scope\n\n\nNach Klassendefinition ein \n;\n: \nsruct Hello {...};\n\n\n\n\n\n\n\n\n\n\nVorlesung 2\n\n\nRepetition: \n- Wir trennen Header von Source-Files, um die Deklaration von der Implementierung zu trennen\n- \niostream\n, \niosfwd\n und \nostream\n sind Libraries mit unterschiedlichem Umfang. \niosfwd\n ist die Kleinste, \niostream\n die Gr\u00f6sste (mit u.a. \nstd::cout\n)\n\n\nVariablen / Datentypen\n\n\n\n\ntype\n \nname\n {\nvalue\n}\n\n\nWenn eine Klasse mit \nconst\n initialisiert wird, d\u00fcrfen darauf nur Member-Funktionen aufgerufen werden, die \nconst\n sind (\nvoid helloWorld() const {...}\n)\n\n\nconstexpr\n berechnet den Wert zu Compilezeit: \ndouble constexpr pi{3.14}\n\n\nImmer \nconst\n verwenden wenn m\u00f6glich!\n\n\nVariablendefinitionen \"close to use\"\n\n\nbool\n und \nchar\n sind im Hintergrund Integers\n\n\nstring\n und \nvector\n sind in der Standardbibliothek und m\u00fcssen importiert werden\n\n\nL\u00e4nge von int, long, etc sind nicht fix definiert (nur short \n int \n long \n long long)\n\n\nGleitkommazahlen sind \ndouble\n wenn nicht explizit angegeben\n\n\nString-Literale sind char-Arrays (nicht \nstd::string\n). Umwandlung mit \n\"string\"s\n mit \nusing namespace std::literals\n\n\nR\"\nstring\n\"\n sind Raw-Strings. Zeichen m\u00fcssen nicht escaped werden (wie \n@\"\"\n in C#)\n\n\nAlles != 0 -\n true, 0 -\n false\n\n\nFloat nur verwenden, wenn Speicher knapp ist\n\n\nNaN ist ungleich jeder Zahl\n\n\nStrings (std::string) sind mutable, k\u00f6nnen also ver\u00e4ndert werden\n\n\nArgumente werden normalerweise \"by-value\" \u00fcbergeben. F\u00fcr \"by-reference\" als Argument ein \n vor den Namen setzen\n\n\nFolie 20: Reihenfolge der Aufrufe in den Funktionsargumenten ist nicht definiert (welches \ninputName()\n hier zuerst ausgef\u00fchrt wird)\n\n\nStreams: Wenn ein stream erst mal \"kaputt\" geht (!stream.good()) muss er zuerst zur\u00fcck gesetzt werden mit clear()\n\n\niomanip\n: z.B. \nstd::oct\n: Alle folgenden Zeichen, die in den Stream geschrieben werden, werden als oktal interpretiert\n\n\n\n\n\u00dcbung 2\n\n\nStd-Library\n\n\n\n\nstd::cin\n: iostream\n\n\nstd:endl\n: endl\n\n\nstd::tolower\n: cctype\n\n\nstd::string\n: string\n\n\nstd::distance\n: iterator\n\n\nstd::istream_iterator\n: iterator\n\n\nstd::size_t\n: cstddef\n\n\nstd::vector\n: vector\n\n\n\n\nTypes\n\n\n\n\n45: int\n\n\n0XDULL: unsigned long long 0xd (=13)\n\n\n5.75: double 5.57\n\n\n.2f: 0.2 float\n\n\n\"string\": char-Array\n\n\n'': char\n\n\n\n\nstreams\n\n\nint i{};\nstd::cin \n i;\nstd::cout \n \ninput: \n \n i \n \n\\n\n;\nstd::cout \n \nfail: \n \n std::cin.fail() \n \n\\n\n;\nstd::cout \n \neof: \n \n std::cin.eof() \n \n\\n\n;\nstd::cout \n \nbad: \n \n std::cin.bad() \n \n\\n\n;\n\n\n\n\n\n\nWenn man ein Zeichen (keine Zahl eingibt), wird \nfail()\n = 1\n\n\nWenn man Enter dr\u00fcckt, wird es ignoriert und weiter auf einen input gewartet\n\n\nWhitespace wird ignoriert\n\n\n\n\nVorlesung 3 - Simple Sequences\n\n\nVectors\n\n\n\n\nWie in Java generischer Datentyp: \nstd::vector\nT\n\n\nMuss aber nicht \"geboxed\" werden\n\n\nInitialisierung in geschweiften Klammern: \nstd::vector\nint\n v{1, 2, 3}\n\n\nMit Runden Klammern Parameter an den Konstruktor geben: Anzahl Elemente: \nstd::vector\nint\n v(6)\n f\u00fcr vector mit Gr\u00f6sse 6\n\n\nfront()\n: Erstes Element\n\n\nback()\n: Letztes Element\n\n\nfront und back k\u00f6nnen auch lvalues sein\n\n\nvector kann auch wachsen. Mit \npushback(x)\n Element anf\u00fcgen\n\n\nbegin()\n, \nend()\n etc sind Iteratoren\n\n\nat(i)\n gibt das i-te Element zur\u00fcck, ist aber bounds-checked\n\n\nindex out of bounds ist undefined behaviour!\n\n\nsize_t\n ist vorzeichenloser Datentyp, gross genug f\u00fcr indices aller m\u00f6glichen vectors\n\n\nIteration (einzige sinnvolle for-Schleife)\n\n\n\n\nfor (auto const i: v) {\n    std::cout \n \nelement \n \n i \n '\\n';\n}\n\n\n\n\n\n\nDie Laufvariable erh\u00e4lt eine Kopie, sonst per Referenz \u00fcbergeben: \nfor(auto \ni: v)\n\n\nSo const wie m\u00f6glich (\nPr\u00fcfungsthema\n)\n\n\n\n\nIterators\n\n\n\n\nMan braucht immer ein Paar von Iteratoren\n\n\nStart Iterator \nbegin()\n mit End-Iterator \nend()\n vergleichen. Wenn gleich, ist es \nhinter\n dem Ende\n\n\nZugriff mit \n*iterator\n\n\nmit \ncbegin()\n und \ncend()\n ist der Wert const\n\n\n\n\nfor (auto it=cbegin(v); it != cend(v); ++it) {\n    std::cout \n *it \n \n, \n;\n}\n\n\n\n\n\n\nMit \nrend()\n und \nrbegin()\n r\u00fcckw\u00e4rts iterieren (aber auch jeweils inkrementieren!)\n\n\nF\u00fcr Schleifen grunds\u00e4tzlich algorithms verwenden\n\n\ncontainers ausgeben mit \nostream_iterator\n\n\nIterator um einem Array zu erweitern: \nback_inserter(v)\n\n\n\n\nAlgorithms\n\n\n\n\nBsp Leerzeichen z\u00e4hlen: \ncount(begin(s), end(s), ' ')\n\n\ndistance(b, e)\n gibt Distanz zwischen zwei iteratoren\n\n\n\n\nLambdas\n\n\n\n\nfor_each(b, e, fn)\n mit fn als Lambda oder funktionsname\n\n\n[] (parameters)-\nreturn_type{statements}\n\n\nreturn type und runde Klammer sind optional. \n[]{}\n ist eine g\u00fcltige Lambda Expression\n\n\nAufruf mit runden Klammern: bsp. \n[]{}()\n\n\nauto\n als Parameter-Typ erlaubt (im Gegensatz zu normalen Funktionen)\n\n\nLambda-Funktion kann auch in eine Variable geschrieben werden: \nauto l = []{}; l();\n\n\n[]\n wird f\u00fcr Capture verwendet. Was in den Klammern definiert ist, ist auch ausserhalb des Lambda-Scopes noch g\u00fcltig. Referenz mit \n angeben\n\n\n\n\nIterators for IO\n\n\n\n\nostream_iterator\nT\n{std::out, \", \"}\n gibt Werte auf \nstd::out\n mit Trennzeichen \n,\n aus\n\n\nistream_iterator\nT\n{}\n wird als Enditerator beim Input verwendet\n\n\ntype alias: \nusing name=type;\n, dann kann ein Alias f\u00fcr den Type verwendet werden\n\n\nostream_iterator\n und \nistream_iterator\n benutzt \n und \n f\u00fcr Ein- und Ausgabe\n\n\nNormalerweise werden Leerzeichen ignoriert\n\n\nf\u00fcr char-Types gibt es daf\u00fcr \nistreambuf_iterator\n. Einlesen mit \nistream::get()\n\n\n\n\n\n\nVorlesung 4\n\n\n\n\nGute Funktion:\n\n\nMacht nur etwas\n\n\nM\u00f6glichst wenig Parameter\n\n\nGarantiertes Resultat\n\n\n\n\n\n\nLambdas\n\n\nFunktion (oder Lambda) als Parameter \u00fcbergeben\n\n\n\n\n\n\n\n\nvoid foo(std::function\nchar(char)\n function) {\n    std:cout \n function('a');\n}\n// main\nauto const g = [](char c) { return c + 1; }\nfoo(g);\n\n\n\n\n- Scopes werden mit `{}` definiert\n- Nach dem `}` wird aufger\u00e4umt, auch Objekte!\n\n\n\n\n\nNamespaces\n\n\nnamespace grenzt ein Scope ein\n\n\nstd::\n ist Namespace-Prefix\n\n\nGlobaler Namespace ist unter \n::\n\n\nDefinition mit \nnamespace myNamespace{..}\n\n\nNamespace mit gleichem Name kann mehrmals \"ge\u00f6ffnet\" werden. Er wird dann erweitert;\n\n\n\"Importieren\" (ohne Prefix benutzen) mit \nusing myNamespace;\n\n\nAlias mit \nusing str=std::string; str t{\"myString\"};\n\n\nNamespace ohne Namensangabe ist anonym. Braucht man, um eigene Funktionen zu \"verstecken\" und ist nicht von anderen Files aufrufbar\n\n\n\n\n\n\nReferenzen\n\n\nAchtung, wenn Referenz noch benutzt wird, aber die referenzierte Variable nicht mehr existiert! -\n undefined behaviour\n\n\nWenn eine referenz \nconst\n wird, darf die variable darunter auch nicht mehr ver\u00e4ndert werden\n\n\nvar\n ist \nlvalue\n-Referenz\n\n\nReferenzen zur\u00fcck geben\n\n\nF\u00fcr chaining n\u00fctzlich, wenn Parameter schon ref ist\n\n\nNiemals referenz auf lokale variable zur\u00fcck geben, nicht mehr g\u00fcltig!\n\n\n\n\n\n\nStreams by value kopieren mit rvalue-Referenzen (\n)\n\n\n \"saugt\" den Wert heraus, ist im Original (caller) dann nicht mehr verwendbar\n\n\n\n\n\n\nOverloading wie in Java, return-type wird nicht beachtet\n\n\nDefault Arguments wie in C# (ist ein impliziter overload) und muss im Header-File definiert sein\n\n\nFunktionen als Parameter: \nvoid func(double x, double f(double)) {...}\n\n\nError-Handling\n\n\nz.B. zus\u00e4tzliches funktionsargument per referenz mitgeben (z.B. boolean)\n\n\noder komplizierterer R\u00fcckgabewert\n\n\nAm besten: Exception\n\n\nIgnorieren des Fehlers (-\n undefined behaviour) kann Sinn machen, wenn es schnell sein muss (Aufrufer muss dann Preconditions erf\u00fcllen)\n\n\nexceptions\n\n\nMit \nthrow\n kann jeder (kopierbare) typ geworfen werden\n\n\nPer default keine meta-infos wie stacktrace\n\n\ntry {...} catch (type const \ne) {...}\n\n\nCatchen immer mit Referenz auf exception (\"Throw by value, catch by const ref\")\n\n\nCatch all: \ncatch(...)\n \n- Mit 3 Punkten!\n\n\nIn \nstdexcept\n sind exception types, z.B. \nstd::logic_error\n und \nstd::runtime_error\n\n\nMessage in Konstruktor mitgeben, im catch mit \ne.what()\n aufrufen\n\n\nTesten in CUTE mit \nASSERT_THROWS(\ncode\n, \nexpected exception type\n)\n\n\n\n\n\n\n\n\n\n\n\n\ntry {\n    // throwing code\n    throw \nvalue\n;\n} catch (\ntype\n const \n e) {\n    // Exception handling\n}\n\n\n\n\n\n\nVorlesung 5 - Classes and Enums\n\n\n\n\nEine gute Klasse hat eine Invariant, eine Garantie \u00fcber den Status der Klasse\n\n\nKlasse wird normalerweise im Header definiert mit \nClass \nname\n {...};\n\n\nEin Verwender der Klasse muss wissen, wie der Speicher der Klasse aufgebaut ist, darum ist die Klasse mit Members im Header definiert\n\n\nEinzelne Sektionen \npublic:\n, \nprivate:\n, \nprotected:\n\n\nBei Klassen sind funktionen implizit private, bei structs public\n\n\n\n\n\n\nKonstruktor: \nClass(value1, value2) : member{value1}, member2{value2}\n\n\nIn Reihenfolge der Member-Deklaration\n\n\n\n\n\n\nKopier-Konstruktor: Wird dann ausgef\u00fchrt, wenn einer instanzierung der eigene Typ als argument mitgegeben wird: \nDate d2{d1}\n\n\nIst implizit verf\u00fcgbar: \nDate(Date const \n)\n\n\n\n\n\n\nMove-Konstruktor ebenfalls implizit vorhanden\n\n\nexplicit Date(std::string const \n)\n, um dem Konstruktor einen anderen Datentyp mitzugeben, um sie in den Typ zu verwandeln\n\n\nDestruktor: \n~Date();\n ist implizit vorhanden, sollte selten explizit implementiert werden. Wird beim Aufr\u00e4umen aufgerufen\n\n\nVererbung mit \nclass Sub : public Base {...};\n angeben\n\n\nFolie 19: onyInBase ist private\n\n\nWenn \nprivate\n geerbt wird, kann man in Sub auf die private Member von Base zugreifen, aber nicht ausserhalb von Sub\n\n\nMehrfachvererbung m\u00f6glich\n\n\n\n\n\n\nImplementierung: Jeweils \ntype\n::\nfunction\n {...}\n\n\nStatische Funktionen aufrufen mit \ntype::function\n\n\nconst\n Funktionen k\u00f6nnen keine Klassen-Felder ver\u00e4ndern\n\n\nIm Konstruktor pr\u00fcfen, ob die Daten (z.B. das Datum) g\u00fcltig ist\n\n\nEstablishes invariant\n\n\n\n\n\n\nKonstruktoren delegieren: \nDate::Date() : Date{1980, 1, 1}\n wie \nthis()\n in Java\n\n\nmember-Funktionen darf invarianz nicht kaputt machen\n\n\nExpliziter Zugriff auf Felder mit \nthis-\nmember\n\n\nStatic Functions brauchen keine static-Deklartion in der Implementierung\n\n\nK\u00f6nnen nicht \nconst\n sein\n\n\n\n\n\n\nstatic const\n-Felder k\u00f6nnen direkt im Header initialisiert werden\n\n\nOperator-Overloading\n\n\nreturntype\n operator\nop\n (\nparameters\n)\n\n\nEin Parameter f\u00fcr un\u00e4re Operatoren, zwei f\u00fcr bin\u00e4re\n\n\nAusnahme: inkrement, dekrement prefix nimmt zwei parameter, um prefix und suffix zu unterscheiden\n\n\nWenn overloading im header-File implementiert wird, mit \ninline\n deklarieren\n\n\nProblem mit \"free\" Operator (ausserhalb der Klasse): Kein Zugriff auf private Members\n\n\nAlternative: Operator Overloading als Member in die Klasse hinein nehmen. Nur noch 1 Parameter f\u00fcr right-hand-side (linke Seite ist this-Objekt). Ist implizit \ninline\n\n\nstd::tie()\n vergleicht komponentenweise zwei Elemente\n\n\n\n\n\n\n\n\nbool Date::operator\n(Date const \n rhs) const {\n    return std::tie(year, month, day) \n\n    std::tie(rhs.year, rhs.month, rhs.day);\n}\n\n\n\n\n\n\nMit boost kann man z.B. \n implementieren, und bekommt dann \n, \n= und \n=\n (Erben von \nboost::less_than_comparable\nmyType\n)\n\n\n \u00fcberschreiben f\u00fcr Ausgabe\n\n\nProblem: in Member-Funktion ist das linke Argument vorgegeben mit \nthis\n, dann m\u00fcsste der Stream rechts von \n sein\n\n\nL\u00f6sung: Hilfsfunktion \nprint()\n in der Klasse, die von freier Funktion aufgerufen wird\n\n\n\n\n\n\n\n\nclass Date {\n    int year, month, day;\npublic:\n    std::ostream \n print(std::ostream \n os) const {\n        os \n year \n \n/\n \n month \n \n/\n \n day;\n        return os;\n    }\n};\ninline std::ostream \n operator\n(std::ostream \n os, Date const \n date){\n    return date.print(os);\n}\n\n\n\n\n- \ninline\n, weil Funtkion im Header implementiert ist. Ohne inline w\u00fcrde es einen Konflikt beim linken geben, wenn mehrere Files dieses Header-File verwenden (one-definition-rule)\n\n\nVorlesung 6\n\n\n\n\nread()\n: Wenn Parsen fehlschl\u00e4gt, wird das Fail-bit gesetzt\n\n\nAlle objekte mit \n{}\n initialisieren (auch mit leeren Konstruktor)\n\n\nDefault-Initialisierungen von Member Variablen k\u00f6nnen direkt im Header angegeben werden, der default-Konstruktor kann leergelassen werden\n\n\n\n\nclass Date {\nint year{9999}, month{12}, day{31};\n... }\n\n\n\n\n\n\nIm Header \nDate() = default;\n schreiben, um einen Default-Konstruktor zu erstellen, auch wenn es explizite Konstruktoren gibt\n\n\nImplizite Konstruktoren (z.B. copy / move) k\u00f6nnen gel\u00f6scht werden: \nDate() = delete;\n\n\nArgument Dependent Lookup: Wenn ein Member in einem Namespace mit einer Klasse ist und dessen Argumente vom Typ dieser Klasse sind, kann der Compiler beim Aufruf auch ohne namespace-prefix entscheiden, welche Funktion gemeint ist.\n\n\nz.B. \ncopy(begin(v)), end(v), ..)\n. v ist ein Vektor aus std, deshalb wird begin() auch von dort aufgerufen, und wiederum \ncopy()\n genauso\n\n\n\n\n\n\n\n\nEnums\n\n\n\n\nunscoped enum\n\n\n\n\nenum day_of_week {\nMon, Tue, Wed, Thu, Fri, Sat, Sun\n// 0, 1, 2, 3, ...\n};\n\n\n\n\n\n\nSind im umliegenden Scope direkt verf\u00fcgbar (\"leaken nach aussen\")\n\n\nscoped enum: Mit \nenum class day_of_week\n\n\nLeaken nicht ausserhalb des Scopes\n\n\n\n\n\n\nEnum-Werte k\u00f6nnen auch explizit deklariert werden (oder doppelt)\n\n\n\n\nenum month {\njan = 1, feb, mar, apr, may,\njun, jul, aug, sep, oct, nov, dec,\njanuary = jan, february, march,\napril, june = jun, july, august,\nseptember, october, november,\ndecember\n};\n\n\n\n\n\n\nUm einen anderen unterliegenden Typ zu verwenden, von diesem erben: \nenum class my_enum : unsigned char\n\n\n\n\n\n\nVorlesung 7 - Standard containers\n\n\n\n\nJeder Container hat Iteratoren f\u00fcr begin() und end(), insert, erase\n\n\nbegin zeigt auf das \nerste\n, end \nhinter das letzte\n Element, d.h bei leerem container ist begin == end\n\n\n\n\n\n\nContainer k\u00f6nnen mit einem anderen container constructed werden, dann wird eine \nKopie\n erstellt\n\n\nInhalt kann mit == verglichen werden\n\n\nstd::list\nint\n l(5,42)\n erstellt 5 Elemente mit dem Wert 42\n\n\nRunde Klammern, weil sonst Mehrdeutigkeit mit direkter initialisierung \n{5, 42}\n (-\n zwei Elemente)\n\n\n\n\n\n\ncontainer mit Range: \nstd::deque\nint\n q{begin(v),end(v)}\n\n\nIteratoren-Kategorien sind Tags, wie \"Marker-Interfaces\" in Java (z.B. \"cloneable\", \"serializable\")\n\n\nInput Iterators k\u00f6nnen nur einmal auf das aktuelle Element zugreifen (nur lesend)\n\n\nForward Iterator ist ein Input-Iterator, der auch schreibend auf das aktuelle Elemente zugreifen kann\n\n\nBidirektionaler Iterator kann vortw\u00e4rts und r\u00fcckw\u00e4rts iterieren, mehr als einmal pro Element\n\n\nRandom-Access-Iteratoren sind bidirektional, aber k\u00f6nnen auch mit \n[]\n direkt auf den Index zugreifen\n\n\nOutput-Iterator ann etwas auf das aktuelle Element \nschreiben\n, aber nur einmal\n\n\nstd::advance(iter, n)\n springt um n Positionen weiter\n\n\nnext()\n funktioniert gleich, gibt aber den Iterator zur\u00fcck\n\n\n\n\n\n\nauto\n f\u00fcr iteratoren-typen verwenden, da return-types oft kompliziert sind\n\n\nstd::list\n ist double-linked-list, \nstd::forward_list\n single-linked-list\n\n\nstd::array\nint,6\n f\u00fcr fixe Arrays\n\n\nstd::stack\n braucht vektor mit beschr\u00e4nktem Interface\n\n\npop()\n gibt void zur\u00fcck! (mit \ntop()\n abfragen)\n\n\n\n\n\n\nstd::queue\n nutzt dequeue mit limitierter Funktionalit\u00e4t\n\n\nIteration nicht m\u00f6glich\n\n\n\n\n\n\n\n\nAssociative Containers\n\n\n\n\nSind sortiert\n\n\nstd::set\n speichert Elemente sortiert\n\n\nmit \ncount(el)\n pr\u00fcfen, ob Element in Set ist (gibt nur 0 oder 1 zur\u00fcck)\n\n\n\n\n\n\nstd::map\n speichert key-value-pairs sortiert\n\n\nZugriff mit Typ \nstd::pair\nkey,value\n, mit \nfirst()\n und \nsecond()\n (\nauto\n verwenden)\n\n\nBei Zugriff auf Key, der nicht in der Map existiert, wird ein neues Element eingef\u00fcgt mit Default-Value (bei vector w\u00e4re das undef. beh.!!)\n\n\n\n\n\n\nstd::multiset\n erlaubt mehrere gleiche Keys\n\n\nequal_range\n gibt paar von upper und lower bound zur\u00fcck\n\n\n\n\n\n\nunordered_set\n (und \"_map\") ist Hash-Set, aber hashcode ist nur f\u00fcr default types (z.B. strings) definiert\n\n\nNicht sortiert\n\n\n\n\n\n\nBsp Folie 33:\n\n\nistreambuf_iterator\n \u00fcberspring whitespace nicht!\n\n\nremove_copy_if\n kopiert streams, aber ohne Elemente, die Bedingung erf\u00fcllen\n\n\n\n\n\n\n\n\n\n\nVorlesung 8 - Algorithms\n\n\n\n\nalgorithm\n f\u00fcr die meisten Algorithmen, \nnumeric\n f\u00fcr ein paar numerische\n\n\nStreams m\u00fcssen mit einem \nistream_iterator\n bzw. \nostream_iterator\n gewrappt werden, um sie mit Algorithmen zu verwenden\n\n\nDefault-konstruierter \n_iterator\n ist immer EOF\n\n\n\n\n\n\nFunctor: Klasse, die Call-Operator \n()\n anbietet\n\n\nInstanz davon kann z.B. einem \nfor_each\n mitgegeben werden, oder aufgerufen mit \ninstance\n()\n\n\nLambdas sind intern mit Functors gel\u00f6st\n\n\n\n\n\n\nTransform mappt Elemente von ein oder zwei ranges (gleiche Gr\u00f6sse)\n\n\nremove\n entfernt nicht Elemente, sondern schiebt nur die Werte nach vorne und gibt einen Iterator zur\u00fcck, der auf das Ende der neuen Range zeigt\n\n\nDer hintere Teil darf dann nicht mehr verwendet werden. Dieser kann entfernt werden mit \nvec.erase(removed, vec.end())\n, wobei \nremoved\n der returnierte Iterator ist\n\n\n\n\n\n\nViele Algorithmen gibt es auch mit \n_if\n, dem ein Predicate mitgegeben werden kann. Z.B. \ncount_if\n, \nreplace_if\n, \nremove_if\n etc.\n\n\nWenn man keinen End-Iterator hat, kann man mit \n_n\n algorithmen eine konkrete Zahl angeben\n\n\nPitfalls\n\n\nBeim Kopieren in eine neue Sequenz muss dort gen\u00fcgend Platz frei sein, ein vector wird nicht selbst vergr\u00f6ssert!\n\n\nBesser \nback_inserter\n oder \nfront_inserter\n verwenden statt v.begin() f\u00fcr den neuen vector, dann werden die einzelnen Elemente gepusht\n\n\n\n\n\n\nWird w\u00e4hrend der Iteration z.B. push_back aufgerufen, wird der Iterator invalidiert (wie \"concurrent modification exception\" in java)\n\n\n\n\n\n\n\n\n\n\nVorlesung 9\n\n\n\n\nFunctor kann z.B. f\u00fcr for_each verwendet werden (wird dann f\u00fcr jedes Element aufgerufen)\n\n\nVorteil: \u00dcberladener \n()\n Operator kann auf Member-Variablen der Instanz zugreifen\n\n\n\n\nstd::vector\ndouble\n v{7,4,1,3,5,3.3,4.7};\nauto const res=for_each(v.begin(),v.end(),averager{});\n\n\n\n\n\n\ngenerate(firstIt, lastIt, Generator)\n:\n\n\nGenerator ist ein objekt (oder lambda), das ein Wert zur\u00fcckgeben muss, der dem iterator zugewiesen werden kann\n\n\nGenerator kann auch ein functor sein (d.h darauf der call-Parameter \u00fcberschreiben)\n\n\n\n\n\n\nLambda kann einer Variable zugewiesen werden mit \nauto\n\n\nIntern wird der Typ vom Compiler definiert (nicht vom Standard vorgeschrieben)\n\n\nReturn-Type kann mit \n[]()-\nchar{}\n manuell angegeben werden, ist aber nicht n\u00f6tig\n\n\n\n\n\n\ncapture mit \n[=]\n: Kopie in Lamba\n\n\nCapture mit \n[\n]\n: Referenz auf variable\n\n\nMit \n[x=value]\n ist im Lambda-Body die Variable \nx\n verf\u00fcgbar (gleich wie man die variable im Body deklarieren w\u00fcrde)\n\n\n[this]\n capture in Member-Funktion: \nthis\n ist ein Pointer!\n\n\nthis-\nvar\n\n\n(*this).var\n\n\nWenn man \nthis\n per copy capturen, bekommt man nur den Pointer, der ist const (siehe unten), aber man kann weiterhin member-Variablen ver\u00e4ndern!\n\n\n\n\n\n\nLambda mit \n[]() mutable {}\n\n\nPer default sind variablen mit \n[=]\n gecaptured nicht ver\u00e4nderbar\n\n\nMit \nmutable\n sind sie ver\u00e4nderbar\n\n\nGilt nicht bei variablen, die per Referenz \n[\n]\n gecaptured werden\n\n\n\n\n\n\nLambdas sind intern meist functors\n\n\nF\u00fcr einfache Funktionen gibt es Standard-Funktoren wie \nstd::negate\nT\n oder \nstd::greater\nT\n\n\nFunktionen k\u00f6nnen andere Funktionen als Parameter entgegen nehmen \nfoo(double bar(int))\n\n\nBeim Aufruf kann ein Funktionsname mitgegeben werden, oder ein Lambda\n\n\nGeht aber nicht mit Funktoren\n\n\nKann mit templates gemacht werden (n\u00e4chste Vorlesung)\n\n\nOder als parameter in der Funktion den typ \nstd::function\ndouble(int)\n verwenden\n\n\n\n\n\n\nEine \nstd::function\n kann in ein bool konvertiert werden und gibt zur\u00fcck, ob eine g\u00fcltige Funktion darin ist\n\n\n\n\n\n\nVorlesung 10 - Function Templates\n\n\n\n\nGenerische Funktionen\n\n\ntemplates sind zu compile-time polymorph\n\n\n\n\nnamespace MyMin{\ntemplate \ntypename T\n\nT const\n min(T const\n a, T const\n b){\n    return (a \n b)? a : b ;\n}\n}\n\n\n\n\n\n\nParameter k\u00f6nnen Typen sein oder templates (n\u00e4chste Woche) - oder ganzzahlige Werte (cpp advanced)\n\n\ntypename\n legt Parameter als Type-Parameter fest (synonym \nclass\n - deprecated)\n\n\nParameter werden beim Aufruf vom Compiler automatisch ersetzt (vgl. \nauto\n keyword) - \"template argument deduction\"\n\n\nBody der Template-Funktion immer im header definieren\n\n\nReferenz als R\u00fcckgabetyp, weil vom Aufruf die Referenz garantiert nicht \"dangling\" ist\n\n\nFolie 8\n\n\nNamespace explizit angeben, weil Argument \nstd::string\n -\n Compiler sucht zuerst in \nstd\n nach \nmin()\n\n\nmin(\"Pete\", \"Toni\")\n: Literals sind vom Typ \nchar[5]\n, d.h. die beiden m\u00fcssen gleich lang sein, denn \nchar[6]\n ist ein anderer \"Typ\"!\n\n\n\n\n\n\nArgumente k\u00f6nnen auch explizit angegeben werden mit \nmin\ntype\n()\n. \nmin\nstd::string\n(\"Peter\", \"Toni\")\n funktioniert.\n\n\nEs m\u00fcssen nicht alle Parameter explizit angegeben werden, die restlichen werden dann impliziert\n\n\n\n\n\n\nImplizite Anforderungen an Template-Parameter sind \nConcepts\n\n\nBei \nmin()\n \n\n\ndarf T nicht \nvoid\n sein (wegen R\u00fcckgabewert Referenz ist)\n\n\nOperator \n muss definiert sein (und bool zur\u00fcckgeben)\n\n\n\n\n\n\nConcepts sind immer implizit (bis \u00fcbern\u00e4chsten C++ Standard)\n\n\nBei \nmax()\n (Folie 11) muss T kopierbar / move-bar sein, da R\u00fcckgabewert keine Referenz ist\n\n\nFolie 14: Dies ist problematisch, wenn man null-pointer \u00fcbergibt -\n Undef. Beh.\n\n\nTemplates kann man auch overloaden - Der spezialisierteste overload wird ausgef\u00fchrt\n\n\nGef\u00e4hrlich, weil schnell ambiguities entstehen\n\n\n\n\n\n\nVariadic Templates: Type-safe varying number of arguments\n    \nc++\n    template \ntypename...ARGS\n\n    void variadic(ARGS...args){\n        println(std::cout,args...);\n    }\n\n\nBeispiel \nprintln()\n\n\nWenn \ntail...\n leer ist, wird per overloading resolution die \nprintln()\n funktion mit einem Argument gew\u00e4hlt -\n Rekursions-Basecase\n\n\n\n\n\n\nTemplate-Parameter k\u00f6nnen default-Werte annehmen: \ntemplate \ntypename T, typename U=T", 
            "title": "C++"
        }, 
        {
            "location": "/hs16/cpi/#c", 
            "text": "Wiki:  https://wiki.ifs.hsr.ch/CPlusPlus/wiki.cgi?CPlusPlus  C++ Referenz:  http://en.cppreference.com/w/cpp", 
            "title": "C++"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-1", 
            "text": "\"Undefined Behaviour\": Verhalten nicht definiert, wenn z.B. Divison durch 0 oder Segmentation fault (\"Es kann alles passieren\"). Schlimmster Fall: Es l\u00e4uft!  HelloWorld:  #include : Pr\u00e4prozessor Anweisung  using namespace std; : Kann alle Namen ohne  std::  benutzen. Man kann dann nicht sagen, aus welchem Namespace eine Anweisung kommt, oder ob es eine Variable oder Funktion etc. ist  : Links Shift, ist Teil der Bibliothek (Operator Overloading). Quasi Funktionsaufruf mit string-literal als Argument  cout : Ein Stream von  std  endl  ist eine Funktion, flusht den Stream    Compilation  Im Header (z.B.  iostream ) stehen die Definitionen (z.B. dass es  cout  gibt)  Der Linker linkt die standard library (dort ist  cout  implementiert)    Strings z.B. werden im Unterschied zu Java direkt auf dem Stack abgelegt  Klassen:  struct  heisst public,  class  privat  Ein private bzw. public block mit  public: ,  private:  bezeichnen, alles ab dort hat dann den Scope  Nach Klassendefinition ein  ; :  sruct Hello {...};", 
            "title": "Vorlesung 1"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-2", 
            "text": "Repetition: \n- Wir trennen Header von Source-Files, um die Deklaration von der Implementierung zu trennen\n-  iostream ,  iosfwd  und  ostream  sind Libraries mit unterschiedlichem Umfang.  iosfwd  ist die Kleinste,  iostream  die Gr\u00f6sste (mit u.a.  std::cout )", 
            "title": "Vorlesung 2"
        }, 
        {
            "location": "/hs16/cpi/#variablen-datentypen", 
            "text": "type   name  { value }  Wenn eine Klasse mit  const  initialisiert wird, d\u00fcrfen darauf nur Member-Funktionen aufgerufen werden, die  const  sind ( void helloWorld() const {...} )  constexpr  berechnet den Wert zu Compilezeit:  double constexpr pi{3.14}  Immer  const  verwenden wenn m\u00f6glich!  Variablendefinitionen \"close to use\"  bool  und  char  sind im Hintergrund Integers  string  und  vector  sind in der Standardbibliothek und m\u00fcssen importiert werden  L\u00e4nge von int, long, etc sind nicht fix definiert (nur short   int   long   long long)  Gleitkommazahlen sind  double  wenn nicht explizit angegeben  String-Literale sind char-Arrays (nicht  std::string ). Umwandlung mit  \"string\"s  mit  using namespace std::literals  R\" string \"  sind Raw-Strings. Zeichen m\u00fcssen nicht escaped werden (wie  @\"\"  in C#)  Alles != 0 -  true, 0 -  false  Float nur verwenden, wenn Speicher knapp ist  NaN ist ungleich jeder Zahl  Strings (std::string) sind mutable, k\u00f6nnen also ver\u00e4ndert werden  Argumente werden normalerweise \"by-value\" \u00fcbergeben. F\u00fcr \"by-reference\" als Argument ein   vor den Namen setzen  Folie 20: Reihenfolge der Aufrufe in den Funktionsargumenten ist nicht definiert (welches  inputName()  hier zuerst ausgef\u00fchrt wird)  Streams: Wenn ein stream erst mal \"kaputt\" geht (!stream.good()) muss er zuerst zur\u00fcck gesetzt werden mit clear()  iomanip : z.B.  std::oct : Alle folgenden Zeichen, die in den Stream geschrieben werden, werden als oktal interpretiert", 
            "title": "Variablen / Datentypen"
        }, 
        {
            "location": "/hs16/cpi/#ubung-2", 
            "text": "", 
            "title": "\u00dcbung 2"
        }, 
        {
            "location": "/hs16/cpi/#std-library", 
            "text": "std::cin : iostream  std:endl : endl  std::tolower : cctype  std::string : string  std::distance : iterator  std::istream_iterator : iterator  std::size_t : cstddef  std::vector : vector", 
            "title": "Std-Library"
        }, 
        {
            "location": "/hs16/cpi/#types", 
            "text": "45: int  0XDULL: unsigned long long 0xd (=13)  5.75: double 5.57  .2f: 0.2 float  \"string\": char-Array  '': char", 
            "title": "Types"
        }, 
        {
            "location": "/hs16/cpi/#streams", 
            "text": "int i{};\nstd::cin   i;\nstd::cout    input:     i    \\n ;\nstd::cout    fail:     std::cin.fail()    \\n ;\nstd::cout    eof:     std::cin.eof()    \\n ;\nstd::cout    bad:     std::cin.bad()    \\n ;   Wenn man ein Zeichen (keine Zahl eingibt), wird  fail()  = 1  Wenn man Enter dr\u00fcckt, wird es ignoriert und weiter auf einen input gewartet  Whitespace wird ignoriert", 
            "title": "streams"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-3-simple-sequences", 
            "text": "", 
            "title": "Vorlesung 3 - Simple Sequences"
        }, 
        {
            "location": "/hs16/cpi/#vectors", 
            "text": "Wie in Java generischer Datentyp:  std::vector T  Muss aber nicht \"geboxed\" werden  Initialisierung in geschweiften Klammern:  std::vector int  v{1, 2, 3}  Mit Runden Klammern Parameter an den Konstruktor geben: Anzahl Elemente:  std::vector int  v(6)  f\u00fcr vector mit Gr\u00f6sse 6  front() : Erstes Element  back() : Letztes Element  front und back k\u00f6nnen auch lvalues sein  vector kann auch wachsen. Mit  pushback(x)  Element anf\u00fcgen  begin() ,  end()  etc sind Iteratoren  at(i)  gibt das i-te Element zur\u00fcck, ist aber bounds-checked  index out of bounds ist undefined behaviour!  size_t  ist vorzeichenloser Datentyp, gross genug f\u00fcr indices aller m\u00f6glichen vectors  Iteration (einzige sinnvolle for-Schleife)   for (auto const i: v) {\n    std::cout    element     i   '\\n';\n}   Die Laufvariable erh\u00e4lt eine Kopie, sonst per Referenz \u00fcbergeben:  for(auto  i: v)  So const wie m\u00f6glich ( Pr\u00fcfungsthema )", 
            "title": "Vectors"
        }, 
        {
            "location": "/hs16/cpi/#iterators", 
            "text": "Man braucht immer ein Paar von Iteratoren  Start Iterator  begin()  mit End-Iterator  end()  vergleichen. Wenn gleich, ist es  hinter  dem Ende  Zugriff mit  *iterator  mit  cbegin()  und  cend()  ist der Wert const   for (auto it=cbegin(v); it != cend(v); ++it) {\n    std::cout   *it    ,  ;\n}   Mit  rend()  und  rbegin()  r\u00fcckw\u00e4rts iterieren (aber auch jeweils inkrementieren!)  F\u00fcr Schleifen grunds\u00e4tzlich algorithms verwenden  containers ausgeben mit  ostream_iterator  Iterator um einem Array zu erweitern:  back_inserter(v)", 
            "title": "Iterators"
        }, 
        {
            "location": "/hs16/cpi/#algorithms", 
            "text": "Bsp Leerzeichen z\u00e4hlen:  count(begin(s), end(s), ' ')  distance(b, e)  gibt Distanz zwischen zwei iteratoren", 
            "title": "Algorithms"
        }, 
        {
            "location": "/hs16/cpi/#lambdas", 
            "text": "for_each(b, e, fn)  mit fn als Lambda oder funktionsname  [] (parameters)- return_type{statements}  return type und runde Klammer sind optional.  []{}  ist eine g\u00fcltige Lambda Expression  Aufruf mit runden Klammern: bsp.  []{}()  auto  als Parameter-Typ erlaubt (im Gegensatz zu normalen Funktionen)  Lambda-Funktion kann auch in eine Variable geschrieben werden:  auto l = []{}; l();  []  wird f\u00fcr Capture verwendet. Was in den Klammern definiert ist, ist auch ausserhalb des Lambda-Scopes noch g\u00fcltig. Referenz mit   angeben", 
            "title": "Lambdas"
        }, 
        {
            "location": "/hs16/cpi/#iterators-for-io", 
            "text": "ostream_iterator T {std::out, \", \"}  gibt Werte auf  std::out  mit Trennzeichen  ,  aus  istream_iterator T {}  wird als Enditerator beim Input verwendet  type alias:  using name=type; , dann kann ein Alias f\u00fcr den Type verwendet werden  ostream_iterator  und  istream_iterator  benutzt   und   f\u00fcr Ein- und Ausgabe  Normalerweise werden Leerzeichen ignoriert  f\u00fcr char-Types gibt es daf\u00fcr  istreambuf_iterator . Einlesen mit  istream::get()", 
            "title": "Iterators for IO"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-4", 
            "text": "Gute Funktion:  Macht nur etwas  M\u00f6glichst wenig Parameter  Garantiertes Resultat    Lambdas  Funktion (oder Lambda) als Parameter \u00fcbergeben     void foo(std::function char(char)  function) {\n    std:cout   function('a');\n}\n// main\nauto const g = [](char c) { return c + 1; }\nfoo(g);  - Scopes werden mit `{}` definiert\n- Nach dem `}` wird aufger\u00e4umt, auch Objekte!   Namespaces  namespace grenzt ein Scope ein  std::  ist Namespace-Prefix  Globaler Namespace ist unter  ::  Definition mit  namespace myNamespace{..}  Namespace mit gleichem Name kann mehrmals \"ge\u00f6ffnet\" werden. Er wird dann erweitert;  \"Importieren\" (ohne Prefix benutzen) mit  using myNamespace;  Alias mit  using str=std::string; str t{\"myString\"};  Namespace ohne Namensangabe ist anonym. Braucht man, um eigene Funktionen zu \"verstecken\" und ist nicht von anderen Files aufrufbar    Referenzen  Achtung, wenn Referenz noch benutzt wird, aber die referenzierte Variable nicht mehr existiert! -  undefined behaviour  Wenn eine referenz  const  wird, darf die variable darunter auch nicht mehr ver\u00e4ndert werden  var  ist  lvalue -Referenz  Referenzen zur\u00fcck geben  F\u00fcr chaining n\u00fctzlich, wenn Parameter schon ref ist  Niemals referenz auf lokale variable zur\u00fcck geben, nicht mehr g\u00fcltig!    Streams by value kopieren mit rvalue-Referenzen ( )   \"saugt\" den Wert heraus, ist im Original (caller) dann nicht mehr verwendbar    Overloading wie in Java, return-type wird nicht beachtet  Default Arguments wie in C# (ist ein impliziter overload) und muss im Header-File definiert sein  Funktionen als Parameter:  void func(double x, double f(double)) {...}  Error-Handling  z.B. zus\u00e4tzliches funktionsargument per referenz mitgeben (z.B. boolean)  oder komplizierterer R\u00fcckgabewert  Am besten: Exception  Ignorieren des Fehlers (-  undefined behaviour) kann Sinn machen, wenn es schnell sein muss (Aufrufer muss dann Preconditions erf\u00fcllen)  exceptions  Mit  throw  kann jeder (kopierbare) typ geworfen werden  Per default keine meta-infos wie stacktrace  try {...} catch (type const  e) {...}  Catchen immer mit Referenz auf exception (\"Throw by value, catch by const ref\")  Catch all:  catch(...)   - Mit 3 Punkten!  In  stdexcept  sind exception types, z.B.  std::logic_error  und  std::runtime_error  Message in Konstruktor mitgeben, im catch mit  e.what()  aufrufen  Testen in CUTE mit  ASSERT_THROWS( code ,  expected exception type )       try {\n    // throwing code\n    throw  value ;\n} catch ( type  const   e) {\n    // Exception handling\n}", 
            "title": "Vorlesung 4"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-5-classes-and-enums", 
            "text": "Eine gute Klasse hat eine Invariant, eine Garantie \u00fcber den Status der Klasse  Klasse wird normalerweise im Header definiert mit  Class  name  {...};  Ein Verwender der Klasse muss wissen, wie der Speicher der Klasse aufgebaut ist, darum ist die Klasse mit Members im Header definiert  Einzelne Sektionen  public: ,  private: ,  protected:  Bei Klassen sind funktionen implizit private, bei structs public    Konstruktor:  Class(value1, value2) : member{value1}, member2{value2}  In Reihenfolge der Member-Deklaration    Kopier-Konstruktor: Wird dann ausgef\u00fchrt, wenn einer instanzierung der eigene Typ als argument mitgegeben wird:  Date d2{d1}  Ist implizit verf\u00fcgbar:  Date(Date const  )    Move-Konstruktor ebenfalls implizit vorhanden  explicit Date(std::string const  ) , um dem Konstruktor einen anderen Datentyp mitzugeben, um sie in den Typ zu verwandeln  Destruktor:  ~Date();  ist implizit vorhanden, sollte selten explizit implementiert werden. Wird beim Aufr\u00e4umen aufgerufen  Vererbung mit  class Sub : public Base {...};  angeben  Folie 19: onyInBase ist private  Wenn  private  geerbt wird, kann man in Sub auf die private Member von Base zugreifen, aber nicht ausserhalb von Sub  Mehrfachvererbung m\u00f6glich    Implementierung: Jeweils  type :: function  {...}  Statische Funktionen aufrufen mit  type::function  const  Funktionen k\u00f6nnen keine Klassen-Felder ver\u00e4ndern  Im Konstruktor pr\u00fcfen, ob die Daten (z.B. das Datum) g\u00fcltig ist  Establishes invariant    Konstruktoren delegieren:  Date::Date() : Date{1980, 1, 1}  wie  this()  in Java  member-Funktionen darf invarianz nicht kaputt machen  Expliziter Zugriff auf Felder mit  this- member  Static Functions brauchen keine static-Deklartion in der Implementierung  K\u00f6nnen nicht  const  sein    static const -Felder k\u00f6nnen direkt im Header initialisiert werden  Operator-Overloading  returntype  operator op  ( parameters )  Ein Parameter f\u00fcr un\u00e4re Operatoren, zwei f\u00fcr bin\u00e4re  Ausnahme: inkrement, dekrement prefix nimmt zwei parameter, um prefix und suffix zu unterscheiden  Wenn overloading im header-File implementiert wird, mit  inline  deklarieren  Problem mit \"free\" Operator (ausserhalb der Klasse): Kein Zugriff auf private Members  Alternative: Operator Overloading als Member in die Klasse hinein nehmen. Nur noch 1 Parameter f\u00fcr right-hand-side (linke Seite ist this-Objekt). Ist implizit  inline  std::tie()  vergleicht komponentenweise zwei Elemente     bool Date::operator (Date const   rhs) const {\n    return std::tie(year, month, day)  \n    std::tie(rhs.year, rhs.month, rhs.day);\n}   Mit boost kann man z.B.   implementieren, und bekommt dann  ,  = und  =  (Erben von  boost::less_than_comparable myType )   \u00fcberschreiben f\u00fcr Ausgabe  Problem: in Member-Funktion ist das linke Argument vorgegeben mit  this , dann m\u00fcsste der Stream rechts von   sein  L\u00f6sung: Hilfsfunktion  print()  in der Klasse, die von freier Funktion aufgerufen wird     class Date {\n    int year, month, day;\npublic:\n    std::ostream   print(std::ostream   os) const {\n        os   year    /    month    /    day;\n        return os;\n    }\n};\ninline std::ostream   operator (std::ostream   os, Date const   date){\n    return date.print(os);\n}", 
            "title": "Vorlesung 5 - Classes and Enums"
        }, 
        {
            "location": "/hs16/cpi/#-inline-weil-funtkion-im-header-implementiert-ist-ohne-inline-wurde-es-einen-konflikt-beim-linken-geben-wenn-mehrere-files-dieses-header-file-verwenden-one-definition-rule", 
            "text": "", 
            "title": "- inline, weil Funtkion im Header implementiert ist. Ohne inline w\u00fcrde es einen Konflikt beim linken geben, wenn mehrere Files dieses Header-File verwenden (one-definition-rule)"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-6", 
            "text": "read() : Wenn Parsen fehlschl\u00e4gt, wird das Fail-bit gesetzt  Alle objekte mit  {}  initialisieren (auch mit leeren Konstruktor)  Default-Initialisierungen von Member Variablen k\u00f6nnen direkt im Header angegeben werden, der default-Konstruktor kann leergelassen werden   class Date {\nint year{9999}, month{12}, day{31};\n... }   Im Header  Date() = default;  schreiben, um einen Default-Konstruktor zu erstellen, auch wenn es explizite Konstruktoren gibt  Implizite Konstruktoren (z.B. copy / move) k\u00f6nnen gel\u00f6scht werden:  Date() = delete;  Argument Dependent Lookup: Wenn ein Member in einem Namespace mit einer Klasse ist und dessen Argumente vom Typ dieser Klasse sind, kann der Compiler beim Aufruf auch ohne namespace-prefix entscheiden, welche Funktion gemeint ist.  z.B.  copy(begin(v)), end(v), ..) . v ist ein Vektor aus std, deshalb wird begin() auch von dort aufgerufen, und wiederum  copy()  genauso", 
            "title": "Vorlesung 6"
        }, 
        {
            "location": "/hs16/cpi/#enums", 
            "text": "unscoped enum   enum day_of_week {\nMon, Tue, Wed, Thu, Fri, Sat, Sun\n// 0, 1, 2, 3, ...\n};   Sind im umliegenden Scope direkt verf\u00fcgbar (\"leaken nach aussen\")  scoped enum: Mit  enum class day_of_week  Leaken nicht ausserhalb des Scopes    Enum-Werte k\u00f6nnen auch explizit deklariert werden (oder doppelt)   enum month {\njan = 1, feb, mar, apr, may,\njun, jul, aug, sep, oct, nov, dec,\njanuary = jan, february, march,\napril, june = jun, july, august,\nseptember, october, november,\ndecember\n};   Um einen anderen unterliegenden Typ zu verwenden, von diesem erben:  enum class my_enum : unsigned char", 
            "title": "Enums"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-7-standard-containers", 
            "text": "Jeder Container hat Iteratoren f\u00fcr begin() und end(), insert, erase  begin zeigt auf das  erste , end  hinter das letzte  Element, d.h bei leerem container ist begin == end    Container k\u00f6nnen mit einem anderen container constructed werden, dann wird eine  Kopie  erstellt  Inhalt kann mit == verglichen werden  std::list int  l(5,42)  erstellt 5 Elemente mit dem Wert 42  Runde Klammern, weil sonst Mehrdeutigkeit mit direkter initialisierung  {5, 42}  (-  zwei Elemente)    container mit Range:  std::deque int  q{begin(v),end(v)}  Iteratoren-Kategorien sind Tags, wie \"Marker-Interfaces\" in Java (z.B. \"cloneable\", \"serializable\")  Input Iterators k\u00f6nnen nur einmal auf das aktuelle Element zugreifen (nur lesend)  Forward Iterator ist ein Input-Iterator, der auch schreibend auf das aktuelle Elemente zugreifen kann  Bidirektionaler Iterator kann vortw\u00e4rts und r\u00fcckw\u00e4rts iterieren, mehr als einmal pro Element  Random-Access-Iteratoren sind bidirektional, aber k\u00f6nnen auch mit  []  direkt auf den Index zugreifen  Output-Iterator ann etwas auf das aktuelle Element  schreiben , aber nur einmal  std::advance(iter, n)  springt um n Positionen weiter  next()  funktioniert gleich, gibt aber den Iterator zur\u00fcck    auto  f\u00fcr iteratoren-typen verwenden, da return-types oft kompliziert sind  std::list  ist double-linked-list,  std::forward_list  single-linked-list  std::array int,6  f\u00fcr fixe Arrays  std::stack  braucht vektor mit beschr\u00e4nktem Interface  pop()  gibt void zur\u00fcck! (mit  top()  abfragen)    std::queue  nutzt dequeue mit limitierter Funktionalit\u00e4t  Iteration nicht m\u00f6glich", 
            "title": "Vorlesung 7 - Standard containers"
        }, 
        {
            "location": "/hs16/cpi/#associative-containers", 
            "text": "Sind sortiert  std::set  speichert Elemente sortiert  mit  count(el)  pr\u00fcfen, ob Element in Set ist (gibt nur 0 oder 1 zur\u00fcck)    std::map  speichert key-value-pairs sortiert  Zugriff mit Typ  std::pair key,value , mit  first()  und  second()  ( auto  verwenden)  Bei Zugriff auf Key, der nicht in der Map existiert, wird ein neues Element eingef\u00fcgt mit Default-Value (bei vector w\u00e4re das undef. beh.!!)    std::multiset  erlaubt mehrere gleiche Keys  equal_range  gibt paar von upper und lower bound zur\u00fcck    unordered_set  (und \"_map\") ist Hash-Set, aber hashcode ist nur f\u00fcr default types (z.B. strings) definiert  Nicht sortiert    Bsp Folie 33:  istreambuf_iterator  \u00fcberspring whitespace nicht!  remove_copy_if  kopiert streams, aber ohne Elemente, die Bedingung erf\u00fcllen", 
            "title": "Associative Containers"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-8-algorithms", 
            "text": "algorithm  f\u00fcr die meisten Algorithmen,  numeric  f\u00fcr ein paar numerische  Streams m\u00fcssen mit einem  istream_iterator  bzw.  ostream_iterator  gewrappt werden, um sie mit Algorithmen zu verwenden  Default-konstruierter  _iterator  ist immer EOF    Functor: Klasse, die Call-Operator  ()  anbietet  Instanz davon kann z.B. einem  for_each  mitgegeben werden, oder aufgerufen mit  instance ()  Lambdas sind intern mit Functors gel\u00f6st    Transform mappt Elemente von ein oder zwei ranges (gleiche Gr\u00f6sse)  remove  entfernt nicht Elemente, sondern schiebt nur die Werte nach vorne und gibt einen Iterator zur\u00fcck, der auf das Ende der neuen Range zeigt  Der hintere Teil darf dann nicht mehr verwendet werden. Dieser kann entfernt werden mit  vec.erase(removed, vec.end()) , wobei  removed  der returnierte Iterator ist    Viele Algorithmen gibt es auch mit  _if , dem ein Predicate mitgegeben werden kann. Z.B.  count_if ,  replace_if ,  remove_if  etc.  Wenn man keinen End-Iterator hat, kann man mit  _n  algorithmen eine konkrete Zahl angeben  Pitfalls  Beim Kopieren in eine neue Sequenz muss dort gen\u00fcgend Platz frei sein, ein vector wird nicht selbst vergr\u00f6ssert!  Besser  back_inserter  oder  front_inserter  verwenden statt v.begin() f\u00fcr den neuen vector, dann werden die einzelnen Elemente gepusht    Wird w\u00e4hrend der Iteration z.B. push_back aufgerufen, wird der Iterator invalidiert (wie \"concurrent modification exception\" in java)", 
            "title": "Vorlesung 8 - Algorithms"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-9", 
            "text": "Functor kann z.B. f\u00fcr for_each verwendet werden (wird dann f\u00fcr jedes Element aufgerufen)  Vorteil: \u00dcberladener  ()  Operator kann auf Member-Variablen der Instanz zugreifen   std::vector double  v{7,4,1,3,5,3.3,4.7};\nauto const res=for_each(v.begin(),v.end(),averager{});   generate(firstIt, lastIt, Generator) :  Generator ist ein objekt (oder lambda), das ein Wert zur\u00fcckgeben muss, der dem iterator zugewiesen werden kann  Generator kann auch ein functor sein (d.h darauf der call-Parameter \u00fcberschreiben)    Lambda kann einer Variable zugewiesen werden mit  auto  Intern wird der Typ vom Compiler definiert (nicht vom Standard vorgeschrieben)  Return-Type kann mit  []()- char{}  manuell angegeben werden, ist aber nicht n\u00f6tig    capture mit  [=] : Kopie in Lamba  Capture mit  [ ] : Referenz auf variable  Mit  [x=value]  ist im Lambda-Body die Variable  x  verf\u00fcgbar (gleich wie man die variable im Body deklarieren w\u00fcrde)  [this]  capture in Member-Funktion:  this  ist ein Pointer!  this- var  (*this).var  Wenn man  this  per copy capturen, bekommt man nur den Pointer, der ist const (siehe unten), aber man kann weiterhin member-Variablen ver\u00e4ndern!    Lambda mit  []() mutable {}  Per default sind variablen mit  [=]  gecaptured nicht ver\u00e4nderbar  Mit  mutable  sind sie ver\u00e4nderbar  Gilt nicht bei variablen, die per Referenz  [ ]  gecaptured werden    Lambdas sind intern meist functors  F\u00fcr einfache Funktionen gibt es Standard-Funktoren wie  std::negate T  oder  std::greater T  Funktionen k\u00f6nnen andere Funktionen als Parameter entgegen nehmen  foo(double bar(int))  Beim Aufruf kann ein Funktionsname mitgegeben werden, oder ein Lambda  Geht aber nicht mit Funktoren  Kann mit templates gemacht werden (n\u00e4chste Vorlesung)  Oder als parameter in der Funktion den typ  std::function double(int)  verwenden    Eine  std::function  kann in ein bool konvertiert werden und gibt zur\u00fcck, ob eine g\u00fcltige Funktion darin ist", 
            "title": "Vorlesung 9"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-10-function-templates", 
            "text": "Generische Funktionen  templates sind zu compile-time polymorph   namespace MyMin{\ntemplate  typename T \nT const  min(T const  a, T const  b){\n    return (a   b)? a : b ;\n}\n}   Parameter k\u00f6nnen Typen sein oder templates (n\u00e4chste Woche) - oder ganzzahlige Werte (cpp advanced)  typename  legt Parameter als Type-Parameter fest (synonym  class  - deprecated)  Parameter werden beim Aufruf vom Compiler automatisch ersetzt (vgl.  auto  keyword) - \"template argument deduction\"  Body der Template-Funktion immer im header definieren  Referenz als R\u00fcckgabetyp, weil vom Aufruf die Referenz garantiert nicht \"dangling\" ist  Folie 8  Namespace explizit angeben, weil Argument  std::string  -  Compiler sucht zuerst in  std  nach  min()  min(\"Pete\", \"Toni\") : Literals sind vom Typ  char[5] , d.h. die beiden m\u00fcssen gleich lang sein, denn  char[6]  ist ein anderer \"Typ\"!    Argumente k\u00f6nnen auch explizit angegeben werden mit  min type () .  min std::string (\"Peter\", \"Toni\")  funktioniert.  Es m\u00fcssen nicht alle Parameter explizit angegeben werden, die restlichen werden dann impliziert    Implizite Anforderungen an Template-Parameter sind  Concepts  Bei  min()    darf T nicht  void  sein (wegen R\u00fcckgabewert Referenz ist)  Operator   muss definiert sein (und bool zur\u00fcckgeben)    Concepts sind immer implizit (bis \u00fcbern\u00e4chsten C++ Standard)  Bei  max()  (Folie 11) muss T kopierbar / move-bar sein, da R\u00fcckgabewert keine Referenz ist  Folie 14: Dies ist problematisch, wenn man null-pointer \u00fcbergibt -  Undef. Beh.  Templates kann man auch overloaden - Der spezialisierteste overload wird ausgef\u00fchrt  Gef\u00e4hrlich, weil schnell ambiguities entstehen    Variadic Templates: Type-safe varying number of arguments\n     c++\n    template  typename...ARGS \n    void variadic(ARGS...args){\n        println(std::cout,args...);\n    }  Beispiel  println()  Wenn  tail...  leer ist, wird per overloading resolution die  println()  funktion mit einem Argument gew\u00e4hlt -  Rekursions-Basecase    Template-Parameter k\u00f6nnen default-Werte annehmen:  template  typename T, typename U=T", 
            "title": "Vorlesung 10 - Function Templates"
        }, 
        {
            "location": "/hs16/englhtw/", 
            "text": "English: How Things Work\n\n\nPresentation\n\n\n\n\n10min\n\n\nTechnical Process\n\n\nStructure!\n\n\nFree Speech!\n\n\nMany passive verbs / simple present\n\n\nIdeas\n\n\nWhat it takes to go to space / to mars\n\n\n\n\n\n\n\n\nPrep\n\n\n\n\nTitle: How to get to Mars\n\n\nNext step: How to colonize Mars\n\n\nSpaceX Presentation: \nhttp://www.spacex.com/sites/spacex/files/mars_presentation.pdf\n\n\nStructure\n\n\nHow to get to Space\n\n\nBasic orbital mechanics\n\n\n\n\n\n\nFrom Earth to Mars\n\n\nProposal from SpaceX: 100 people at a time\n\n\nInterplanetary Transport System\n\n\nMultiple refueling mission in LEO before taking off to Mars\n\n\nLanding on Mars\n\n\n\n\n\n\nNext Steps\n\n\nColonize\n\n\nWhy? - \"Making humans a multiplanetary species\"\n\n\nHow? - Habitats, O2 generation, etc.\n\n\n\n\n\n\n1 Million people needed, according to spaceX\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 Wiki Listening\n\n\n\n\naccess\n\n\nask\n\n\nexamples\n\n\nblending\n\n\nselling\n\n\ninformation\n\n\ncontent\n\n\nquickly\n\n\nConcept\n\n\nconfused\n\n\nproject\n\n\nwebsites\n\n\ntools\n\n\nedited\n\n\neducation\n\n\nbusiness\n\n\npolitics\n\n\ndisadvantage\n\n\nenvironmental\n\n\nreply\n\n\ncontributor\n\n\nreports\n\n\nkey\n\n\ngovernment\n\n\n\n\n2.4\n\n\n\n\nresearch, banking\n\n\n??\n\n\nbatch processing\n\n\nremote connection\n\n\nshare 1 pc with mult. users\n\n\ndefense advanced defencse agency, cold war\n\n\n??\n\n\nmilitary network in US (RAND), commercial netowrk for national physical labaratory in eng, scientific network \"cyclades\" in france\n\n\nshielding of network\n\n\nncp: network control protocol\n\n\nbreak up files into packets to avoid congestion\n\n\nstandarddize, osi model\n\n\n\n\nConditional\n\n\n\n\n\n\n\n\nNr\n\n\nIf-Clause\n\n\nMain clause\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nWhen it rains,\n\n\nthe street get wet.\n\n\nGeneral statements\n\n\n\n\n\n\n1\n\n\nIf you work hard,\n\n\nyou will succeed.\n\n\nAlways S.P. + Will\n\n\n\n\n\n\n2\n\n\nIf I had 10 Mio $,\n\n\nI would...\n\n\nWish, dream, advice\n\n\n\n\n\n\n3\n\n\nIf she had known about the party,\n\n\nshe would have come\n\n\nImagining the past, you can't change the past, Pa. Perf. + would have\n\n\n\n\n\n\n\n\nBook Questions\n\n\nPeople\n\n\n\n\nJoseph Henry\n\n\nWilliam Surgeon\n\n\nInvented Electromagnet\n\n\n\n\n\n\nSamuel Morse\n\n\n\n\nINtroduction\n\n\nWhat would happen if all electrons stopped?\n\n\nSee Page 3/4\n\n\nChapter 1\n\n\nHow does a telegraph work?\n\n\nAn electromagnet is on one end, a battery on the other. When the battery is connected, current flows, it activates the magnet (coil) and produces a mechanical click. \nSamuel Morse\n invented the Morse alphabet to transmit letters\n\n\nHow did the telegraph change the world?\n\n\nIt connected cities and countries, making it possible to e.g. synchronize time, financial information and trains\n\n\nDiscuss Bodanis\u2019 statement that the telegraph was \u201can early form of globalization\u201d. (p. 26)\n\n\nThe telegraph made transportation of information instant (before it was very slow). Now not every city was its own world, but everything was synchronized throughout the world\n\n\nDiscuss the last sentences of the chapter: \u201cThe result was a dynamic  immigrant- rich America. It was everything Joseph Henry loved. It was everything Samuel Morse hated.\u201d (p.26) and describe the characters of Joseph Henry and Samuel Morse.\n\n\nSamuel Morse was a conspiracy theorist, believing the world was controlled by catholics and jesuits. On the other hand, Henry was more open\n\n\nChapter 2\n\n\nIn 1875 Alec Bell took an apparatus he had built to the now aged Joseph Henry. Describe the apparatus in your own words or draw it. (p.30)\n\n\nIt was an electric wire strechting out from a battery and connected to a single tuning fork. By switching the battery on and off, he could make the tuning fork hum in various ways.\n\n\nDescribe the \u201cartificial throat and lips\u201d that Bell and his brother had created as teenagers. (p.35)\n\n\nit was made from a larynx of a sheep and bellows as lungs\n\n\nAt the time, several researchers were trying to invent a \u201ctelephone\u201d. In what way was Bell\u2019s approach different? Describe his telephone experiments on p.36.\n\n\nhe put a parchment close to his mouth and attached a wire to it. When he spoke, the parchment touched the wire and caused the electric resistance to change\n\n\nHow does a telephone basically work? (p.36/37)\n\n\nSee above. The speaker is the exact reverse, moving a surface (plastic) with the unair \"waves\" in the wire\n\n\nChapter 3\n\n\nWhat were \u201ctechnological mercenaries\u201d, who employed them and to what purpose? How does the scenario relate to Edison, Orton and Bell? (p. 40)\n\n\nRich financiers tried to find technological mercenaries who could produce the same device using a slightly different process. The original inventor would be destroyed. Orton was the head of Western Union and employed \nThomas Edison\n to go against Bell's telephone company\n\n\nWhat \u201cflaw\u201d did Bell\u2019s telephone technology have and how did Edison improve it? (p.41)\n\n\nBell's signal was too weak for longer distances. Edison improved it by sending a base signal through the wire, the voice would modifiy it, making it a little bit weaker or stronger\n\n\nExplain why \u201cfor decades researchers had dreamed of making a practical artificial light, but no one had come close to succeeding.\u201d (p.42)\n\n\nThey could see thtat a heated piece of metal would glow, but the challenge was to make the glowing last long enough to be useful as a light source.\n\n\nHow did Edison attempt to solve the problems? (list several attempts) And how did he eventually succeed? (p. 43-46)\n\n\n\n\nusing platinum because of the high melting point -\n too expensive\n\n\nnickel wire -\n too bright\n\n\nCreate vaccuums inside class containers to prevent oxygen from getting to the wire -\n still too hot\n\n\nMadake bamboo strands from Japan -\n successful, over 1500 hours\n\n\n\n\nDiscuss the following quote: \u201cTransferring information faster shrank the globe, just as the lightbulb shrank the night.\u201d (p. 47)\n\n\nThe telegraph made it possible to exchange information instantly, \"shrinking the globe\", and the lightbulb \"made the night brighter\"\n\n\nHow does the electric motor basically work? (p.48/49) Make a drawing.\n\n\nA electromagnet pulls the rotating thing, making it turn about a half revolution. Shortly before it reaches the magnetized point, the magnet switches directions and pulls to the other side. Momentum makes it rotate further and now pulls it for a full revolution. Rinse and repeat...\n\n\nWhat impact did the invention of the electric motor have on urban development and society? (p. 49 / 50 )\n\n\nIt made elevators possible, important for skyscrapers, and powered streetcars. The spare capacity of the street cars were used to power amusement parks (Roller coasters))\n\n\nDiscuss the following two quotes: \u201c [Edison] was supposed to be the greatest electrician of his age, yet he didn\u2019t even know what was happening inside an electric wire.\u201d \u2013 \u201cEdison was puzzled by the dots.\u201d (p.52)\n\n\n\n\nEdison wasn't an academic and had no deep understanding of electricity.\n\n\nHe noticed a black spot on the inside of lightbulbs. He never found out why\n\n\n\n\nWhat did J.J. Thomson discover? (p.53)\n\n\nHe found out what the black spots were by \"steering\" them with a magnet. That's how he discovered the \nelectron\n and that it was electrons that travelled inside a wire. The \"bumping and crashing\" of these electrons made the wire glow\n\n\nChapter 4\n\n\nFaraday discovered the \"force fields\" of magnets, proving that there isn't just empty space between two objects. He was a deeply religious man and had therefore a different view on nature, not as strictly \"deterministic\" as Newton's view was.\n\n\nHe was not educated, lacking formal education in mathematics. His colleagues didn't take his theories seriously because of that.\n\n\nWhat was the connection between Faraday\u2019s experience in Switzerland and \u201cwhat he  believed of science?\n\n\nIn Switzerland he saw a rainbow. Science told him that the rainbow \"was always waiting, but could only sometimes be seen\". \n\n\nChapter 5\n\n\nCyrus Field was the first one to tackle a sea cable over the atlantic to connect europe and america. Cities were already connected through telegraphs, but continents weren't. Field was a rich business man and could afford to make his vision come true.\n\n\nHe travelled to London and worked with the Scottish scientist \nWilliam Thomson\n (not JJ!).\n\n\nThe first attempt at sea cables failed. The misconception was that cables were like a hose, you \"poor\" in electricity at the one end and it comes out at the other. But the signals were \"blurred\" (noisy) when they arrived. Thomson understood why, as the cable was a force field \"carrying\" the electrons forward. The first sea cables had a thick iron casting around them, making the noise worse. Field didn't want to change his view, and turned to \nEdward Whitehouse\n, who had the same view as him. \n\n\nWhitehouse and Field built the cable, but it was a huge embarrassement when the messages from the Queen took forever to get through the cable. In panic, Whitehouse hooked big batteries up to the cable, hoping that more electricity would help, but that just heated up the cable, melting the rubber insulation and eventually causing a short circuit with the outer iron casting. Eventually, no signal at all could go through anymore.\n\n\nThomson took over again, and they built a better cable in 1866, this time it was a success\n\n\nMaxwell discovered that there are two parts to an electrical field - a magnetic part and an electric part.\n\n\nChapter 6\n\n\nWhen Heinrich Hertz started to experiment with \u2018wave machines\u2019, whose theories did he want to examine? (p. 99)\n\n\nMaxwells' wave theory\n\n\nWhat was Heinrich Hertz\u2019s next step in his investigations? (p. 103)\n\n\nHe sepparated the transmitter and receiver to opposite ends of the large auditorium.\n\n\nWhat did he manage to show in his experiments with solid conducting walls? (p.105)\n\n\nThat electromagnetic waves reflect from solid conducting walls\n\n\nWhere did Heinrich Hertz take a professorship? (p. 105)\n\n\nIn Bonn (he had the choice between Bonn and Berlin)\n\n\nWhat was the problem with the house he moved into? (p. 106)\n\n\nThe House had served as a medical clinic, they warned him about contamination\n\n\nWhat happened to Heinrich Hertz in 1892? (p. 108)\n\n\nHe got a cold which got worse and worse\n\n\nWhat did Heinrich Hertz die of? When did he die? What was his final age? (p. 110)\n\n\nHe died of blood poisoning (probably contamination of the house) on January 1, 1894. He was 36 years old.\n\n\nWhich scientist continued to investigate the \u2018Hertzian waves\u2019? (p. 110)\n\n\nGuglielmo Marconi\n\n\nWhich example was given of early naval (ship) communication with radio waves? (p. 112)\n\n\n1912, A ship telegraphed with radiowaves that the Titanic was sinking.\n\n\nHow did radio transform society in the field of (1) business, (2) culture and (3) politics? (p. 113/114)\n\n\n\n\nRadio Music Box\n\n\nBrands became popular, through the radio celebrities attracted fans\n\n\nPropaganda through the radio (Germany)\n\n\n\n\nChapter 7\n\n\nHow does the effect of radio waves hitting a human body or rock differ from the effect of radio waves hitting metal? (p. 120)\n\n\nA radio wave will go right through a human body. In metal, the outermost electrons are free, it is conductive\n\n\nWhat consequences did this have for airplanes and warfare? (p.121)\n\n\nThe metal reflected the electromagnetic waves, which makes radar possible\n\n\nWhat alternative methods had been used to detect enemy planes? (p. 123)\n\n\nIn WW1, blind people were used to hear the aircrafts through big horns. In 1930, a giant horn was built. But both techniques didn't really work.\n\n\nWhat did Watson Watt mean when he said \u201cBritain has become an island once more.\u201d? (p. 124)\n\n\nThat Britain was the first one with this technology and that this would provide a major advantage in warfare\n\n\nWhat does radar stand for? (p. 123)\n\n\n\"Radio Detection and Ranging\"\n - Remember!. Before, the term \"radio direction finding\" was used, not to give too much information to the enemy\n\n\nPut the following quote into the context of World War II: \u201cInhospitably, the reception committee turned all these overseas visitors away.\u201d (p. 129)\n\n\nIn August 1940, the German air fleet attacked England, but they had already detected them on radar and were waiting for them with the RAF.\n\n\nChapter 8\n\n\nWhat was the difference between German and British radar systems in WWII? (p. 134 / 135)\n\n\nGermany had developed a much smaller radar device that could fit on a van or a plane.\n\n\nWhat military operation did the British plan to deal with the \u201cW\u00fcrzburg\u201d? (p. 135 \u2013 137)\n\n\nThey infiltrated the base where the radar system was located with paratroopers and stole some parts of the radar devices\n\n\nWhat was the weak spot of the \u201cW\u00fcrzburg\u201d? (p. 141)\n\n\nIts settings were hard to change, because the radar had to be \"fool-proof\" to be operated by german radar operators\n\n\nHow did \u201cchaff\u201d work? (p. 142)\n\n\nA large number of aluminium strips were dropped from an airplane to send back radar \"noise\"\n\n\nWhat was the role of Jones, Cox and Harris in chapter 8?\n\n\n\n\nJones was responsible for detecting the german radar system\n\n\nCox was an amateur radio ham and in the army. He was put on the paratrooper team on short notice to infiltrate the german base and steal the radar equipment\n\n\nHarris was the head of the RAF Bomber Command. He had a hatred towards blue-collar-workers and wanted to bomb german cities, even killing civilians\n\n\n\n\nWhat aspects of the planned attack on Hamburg horrified Watson Watt? (p. 145)\n\n\nThat they didn't bomb factories (tactical targets) but only civilian houses\n\n\nWhat are \u201cquantum jumps\u201d? (p.151)\n\n\nThe notion that electrons can jump through space and pop in and out of existence\n\n\nChapter 9\n\n\nIn what ways was Alan Turing different as a child? (p. 158)\n\n\nHe loved the way he could think his way out of problems.\n\n\nWhat tragic event marked his late teenage years? (p. 159)\n\n\nHis boyfriend with 17 died of tuberculosis\n\n\nWhat was special about Turing\u2019s solution to the mathematical problem of David Hilbert? (p. 161)\n\n\nHe didn't come up with an abstract mathematical proof, but imagined a machine that could solve the problem (Turing Machine)\n\n\nWhy couldn\u2019t Turing build his electrical thinking machine at the time of the 1930s? (p.163)\n\n\nThe machine would have been to big (and too complicated) just with wires and switches\n\n\nWhere did Alan Turing work during WW2 and what was his job there? (p. 165)\n\n\nBletchley Park, as part of a codebreaking group\n\n\nWhat was the name of the machine he designed there? (p. 168)\n\n\n\"bombe\"\n\n\nWhich problems did Turing face when working in Manchester after WW2? (p. 171-2)\n\n\nSir Charles Darwin did not understand how a \"universal\" machine could be built, but thought a machine always had to be particular one.\nIn Manchester, the other engineerins were not welcoming, as Turing had a south-england accent that wasn't met with a lot of respect there\n\n\nWhy did the authorities force Turing to take female hormones? (p. 174)\n\n\nHomosexuality was a crime in Britain. The could avoid prison by undergoing a \"cure\", taking female hormones. But the treatment made it hard to concentrate and he was developing breasts\n\n\nHow did Alan Turing die? (p. 174)\n\n\nHe commited suicide with an apple filled with potassium cyanide\n\n\nChapter 10\n\n\nChapter 11\n\n\nChapter 12", 
            "title": "EnglHTw"
        }, 
        {
            "location": "/hs16/englhtw/#english-how-things-work", 
            "text": "", 
            "title": "English: How Things Work"
        }, 
        {
            "location": "/hs16/englhtw/#presentation", 
            "text": "10min  Technical Process  Structure!  Free Speech!  Many passive verbs / simple present  Ideas  What it takes to go to space / to mars", 
            "title": "Presentation"
        }, 
        {
            "location": "/hs16/englhtw/#prep", 
            "text": "Title: How to get to Mars  Next step: How to colonize Mars  SpaceX Presentation:  http://www.spacex.com/sites/spacex/files/mars_presentation.pdf  Structure  How to get to Space  Basic orbital mechanics    From Earth to Mars  Proposal from SpaceX: 100 people at a time  Interplanetary Transport System  Multiple refueling mission in LEO before taking off to Mars  Landing on Mars    Next Steps  Colonize  Why? - \"Making humans a multiplanetary species\"  How? - Habitats, O2 generation, etc.    1 Million people needed, according to spaceX", 
            "title": "Prep"
        }, 
        {
            "location": "/hs16/englhtw/#32-wiki-listening", 
            "text": "access  ask  examples  blending  selling  information  content  quickly  Concept  confused  project  websites  tools  edited  education  business  politics  disadvantage  environmental  reply  contributor  reports  key  government", 
            "title": "3.2 Wiki Listening"
        }, 
        {
            "location": "/hs16/englhtw/#24", 
            "text": "research, banking  ??  batch processing  remote connection  share 1 pc with mult. users  defense advanced defencse agency, cold war  ??  military network in US (RAND), commercial netowrk for national physical labaratory in eng, scientific network \"cyclades\" in france  shielding of network  ncp: network control protocol  break up files into packets to avoid congestion  standarddize, osi model", 
            "title": "2.4"
        }, 
        {
            "location": "/hs16/englhtw/#conditional", 
            "text": "Nr  If-Clause  Main clause  Description      0  When it rains,  the street get wet.  General statements    1  If you work hard,  you will succeed.  Always S.P. + Will    2  If I had 10 Mio $,  I would...  Wish, dream, advice    3  If she had known about the party,  she would have come  Imagining the past, you can't change the past, Pa. Perf. + would have", 
            "title": "Conditional"
        }, 
        {
            "location": "/hs16/englhtw/#book-questions", 
            "text": "", 
            "title": "Book Questions"
        }, 
        {
            "location": "/hs16/englhtw/#people", 
            "text": "Joseph Henry  William Surgeon  Invented Electromagnet    Samuel Morse", 
            "title": "People"
        }, 
        {
            "location": "/hs16/englhtw/#introduction", 
            "text": "What would happen if all electrons stopped?  See Page 3/4", 
            "title": "INtroduction"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-1", 
            "text": "How does a telegraph work?  An electromagnet is on one end, a battery on the other. When the battery is connected, current flows, it activates the magnet (coil) and produces a mechanical click.  Samuel Morse  invented the Morse alphabet to transmit letters  How did the telegraph change the world?  It connected cities and countries, making it possible to e.g. synchronize time, financial information and trains  Discuss Bodanis\u2019 statement that the telegraph was \u201can early form of globalization\u201d. (p. 26)  The telegraph made transportation of information instant (before it was very slow). Now not every city was its own world, but everything was synchronized throughout the world  Discuss the last sentences of the chapter: \u201cThe result was a dynamic  immigrant- rich America. It was everything Joseph Henry loved. It was everything Samuel Morse hated.\u201d (p.26) and describe the characters of Joseph Henry and Samuel Morse.  Samuel Morse was a conspiracy theorist, believing the world was controlled by catholics and jesuits. On the other hand, Henry was more open", 
            "title": "Chapter 1"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-2", 
            "text": "In 1875 Alec Bell took an apparatus he had built to the now aged Joseph Henry. Describe the apparatus in your own words or draw it. (p.30)  It was an electric wire strechting out from a battery and connected to a single tuning fork. By switching the battery on and off, he could make the tuning fork hum in various ways.  Describe the \u201cartificial throat and lips\u201d that Bell and his brother had created as teenagers. (p.35)  it was made from a larynx of a sheep and bellows as lungs  At the time, several researchers were trying to invent a \u201ctelephone\u201d. In what way was Bell\u2019s approach different? Describe his telephone experiments on p.36.  he put a parchment close to his mouth and attached a wire to it. When he spoke, the parchment touched the wire and caused the electric resistance to change  How does a telephone basically work? (p.36/37)  See above. The speaker is the exact reverse, moving a surface (plastic) with the unair \"waves\" in the wire", 
            "title": "Chapter 2"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-3", 
            "text": "What were \u201ctechnological mercenaries\u201d, who employed them and to what purpose? How does the scenario relate to Edison, Orton and Bell? (p. 40)  Rich financiers tried to find technological mercenaries who could produce the same device using a slightly different process. The original inventor would be destroyed. Orton was the head of Western Union and employed  Thomas Edison  to go against Bell's telephone company  What \u201cflaw\u201d did Bell\u2019s telephone technology have and how did Edison improve it? (p.41)  Bell's signal was too weak for longer distances. Edison improved it by sending a base signal through the wire, the voice would modifiy it, making it a little bit weaker or stronger  Explain why \u201cfor decades researchers had dreamed of making a practical artificial light, but no one had come close to succeeding.\u201d (p.42)  They could see thtat a heated piece of metal would glow, but the challenge was to make the glowing last long enough to be useful as a light source.  How did Edison attempt to solve the problems? (list several attempts) And how did he eventually succeed? (p. 43-46)   using platinum because of the high melting point -  too expensive  nickel wire -  too bright  Create vaccuums inside class containers to prevent oxygen from getting to the wire -  still too hot  Madake bamboo strands from Japan -  successful, over 1500 hours   Discuss the following quote: \u201cTransferring information faster shrank the globe, just as the lightbulb shrank the night.\u201d (p. 47)  The telegraph made it possible to exchange information instantly, \"shrinking the globe\", and the lightbulb \"made the night brighter\"  How does the electric motor basically work? (p.48/49) Make a drawing.  A electromagnet pulls the rotating thing, making it turn about a half revolution. Shortly before it reaches the magnetized point, the magnet switches directions and pulls to the other side. Momentum makes it rotate further and now pulls it for a full revolution. Rinse and repeat...  What impact did the invention of the electric motor have on urban development and society? (p. 49 / 50 )  It made elevators possible, important for skyscrapers, and powered streetcars. The spare capacity of the street cars were used to power amusement parks (Roller coasters))  Discuss the following two quotes: \u201c [Edison] was supposed to be the greatest electrician of his age, yet he didn\u2019t even know what was happening inside an electric wire.\u201d \u2013 \u201cEdison was puzzled by the dots.\u201d (p.52)   Edison wasn't an academic and had no deep understanding of electricity.  He noticed a black spot on the inside of lightbulbs. He never found out why   What did J.J. Thomson discover? (p.53)  He found out what the black spots were by \"steering\" them with a magnet. That's how he discovered the  electron  and that it was electrons that travelled inside a wire. The \"bumping and crashing\" of these electrons made the wire glow", 
            "title": "Chapter 3"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-4", 
            "text": "Faraday discovered the \"force fields\" of magnets, proving that there isn't just empty space between two objects. He was a deeply religious man and had therefore a different view on nature, not as strictly \"deterministic\" as Newton's view was.  He was not educated, lacking formal education in mathematics. His colleagues didn't take his theories seriously because of that.  What was the connection between Faraday\u2019s experience in Switzerland and \u201cwhat he  believed of science?  In Switzerland he saw a rainbow. Science told him that the rainbow \"was always waiting, but could only sometimes be seen\".", 
            "title": "Chapter 4"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-5", 
            "text": "Cyrus Field was the first one to tackle a sea cable over the atlantic to connect europe and america. Cities were already connected through telegraphs, but continents weren't. Field was a rich business man and could afford to make his vision come true.  He travelled to London and worked with the Scottish scientist  William Thomson  (not JJ!).  The first attempt at sea cables failed. The misconception was that cables were like a hose, you \"poor\" in electricity at the one end and it comes out at the other. But the signals were \"blurred\" (noisy) when they arrived. Thomson understood why, as the cable was a force field \"carrying\" the electrons forward. The first sea cables had a thick iron casting around them, making the noise worse. Field didn't want to change his view, and turned to  Edward Whitehouse , who had the same view as him.   Whitehouse and Field built the cable, but it was a huge embarrassement when the messages from the Queen took forever to get through the cable. In panic, Whitehouse hooked big batteries up to the cable, hoping that more electricity would help, but that just heated up the cable, melting the rubber insulation and eventually causing a short circuit with the outer iron casting. Eventually, no signal at all could go through anymore.  Thomson took over again, and they built a better cable in 1866, this time it was a success  Maxwell discovered that there are two parts to an electrical field - a magnetic part and an electric part.", 
            "title": "Chapter 5"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-6", 
            "text": "When Heinrich Hertz started to experiment with \u2018wave machines\u2019, whose theories did he want to examine? (p. 99)  Maxwells' wave theory  What was Heinrich Hertz\u2019s next step in his investigations? (p. 103)  He sepparated the transmitter and receiver to opposite ends of the large auditorium.  What did he manage to show in his experiments with solid conducting walls? (p.105)  That electromagnetic waves reflect from solid conducting walls  Where did Heinrich Hertz take a professorship? (p. 105)  In Bonn (he had the choice between Bonn and Berlin)  What was the problem with the house he moved into? (p. 106)  The House had served as a medical clinic, they warned him about contamination  What happened to Heinrich Hertz in 1892? (p. 108)  He got a cold which got worse and worse  What did Heinrich Hertz die of? When did he die? What was his final age? (p. 110)  He died of blood poisoning (probably contamination of the house) on January 1, 1894. He was 36 years old.  Which scientist continued to investigate the \u2018Hertzian waves\u2019? (p. 110)  Guglielmo Marconi  Which example was given of early naval (ship) communication with radio waves? (p. 112)  1912, A ship telegraphed with radiowaves that the Titanic was sinking.  How did radio transform society in the field of (1) business, (2) culture and (3) politics? (p. 113/114)   Radio Music Box  Brands became popular, through the radio celebrities attracted fans  Propaganda through the radio (Germany)", 
            "title": "Chapter 6"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-7", 
            "text": "How does the effect of radio waves hitting a human body or rock differ from the effect of radio waves hitting metal? (p. 120)  A radio wave will go right through a human body. In metal, the outermost electrons are free, it is conductive  What consequences did this have for airplanes and warfare? (p.121)  The metal reflected the electromagnetic waves, which makes radar possible  What alternative methods had been used to detect enemy planes? (p. 123)  In WW1, blind people were used to hear the aircrafts through big horns. In 1930, a giant horn was built. But both techniques didn't really work.  What did Watson Watt mean when he said \u201cBritain has become an island once more.\u201d? (p. 124)  That Britain was the first one with this technology and that this would provide a major advantage in warfare  What does radar stand for? (p. 123)  \"Radio Detection and Ranging\"  - Remember!. Before, the term \"radio direction finding\" was used, not to give too much information to the enemy  Put the following quote into the context of World War II: \u201cInhospitably, the reception committee turned all these overseas visitors away.\u201d (p. 129)  In August 1940, the German air fleet attacked England, but they had already detected them on radar and were waiting for them with the RAF.", 
            "title": "Chapter 7"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-8", 
            "text": "What was the difference between German and British radar systems in WWII? (p. 134 / 135)  Germany had developed a much smaller radar device that could fit on a van or a plane.  What military operation did the British plan to deal with the \u201cW\u00fcrzburg\u201d? (p. 135 \u2013 137)  They infiltrated the base where the radar system was located with paratroopers and stole some parts of the radar devices  What was the weak spot of the \u201cW\u00fcrzburg\u201d? (p. 141)  Its settings were hard to change, because the radar had to be \"fool-proof\" to be operated by german radar operators  How did \u201cchaff\u201d work? (p. 142)  A large number of aluminium strips were dropped from an airplane to send back radar \"noise\"  What was the role of Jones, Cox and Harris in chapter 8?   Jones was responsible for detecting the german radar system  Cox was an amateur radio ham and in the army. He was put on the paratrooper team on short notice to infiltrate the german base and steal the radar equipment  Harris was the head of the RAF Bomber Command. He had a hatred towards blue-collar-workers and wanted to bomb german cities, even killing civilians   What aspects of the planned attack on Hamburg horrified Watson Watt? (p. 145)  That they didn't bomb factories (tactical targets) but only civilian houses  What are \u201cquantum jumps\u201d? (p.151)  The notion that electrons can jump through space and pop in and out of existence", 
            "title": "Chapter 8"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-9", 
            "text": "In what ways was Alan Turing different as a child? (p. 158)  He loved the way he could think his way out of problems.  What tragic event marked his late teenage years? (p. 159)  His boyfriend with 17 died of tuberculosis  What was special about Turing\u2019s solution to the mathematical problem of David Hilbert? (p. 161)  He didn't come up with an abstract mathematical proof, but imagined a machine that could solve the problem (Turing Machine)  Why couldn\u2019t Turing build his electrical thinking machine at the time of the 1930s? (p.163)  The machine would have been to big (and too complicated) just with wires and switches  Where did Alan Turing work during WW2 and what was his job there? (p. 165)  Bletchley Park, as part of a codebreaking group  What was the name of the machine he designed there? (p. 168)  \"bombe\"  Which problems did Turing face when working in Manchester after WW2? (p. 171-2)  Sir Charles Darwin did not understand how a \"universal\" machine could be built, but thought a machine always had to be particular one.\nIn Manchester, the other engineerins were not welcoming, as Turing had a south-england accent that wasn't met with a lot of respect there  Why did the authorities force Turing to take female hormones? (p. 174)  Homosexuality was a crime in Britain. The could avoid prison by undergoing a \"cure\", taking female hormones. But the treatment made it hard to concentrate and he was developing breasts  How did Alan Turing die? (p. 174)  He commited suicide with an apple filled with potassium cyanide", 
            "title": "Chapter 9"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-10", 
            "text": "", 
            "title": "Chapter 10"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-11", 
            "text": "", 
            "title": "Chapter 11"
        }, 
        {
            "location": "/hs16/englhtw/#chapter-12", 
            "text": "", 
            "title": "Chapter 12"
        }, 
        {
            "location": "/hs16/mge/", 
            "text": "Pr\u00fcfung\n\n\n\n\nPro Teil 1h\n\n\nPro Teil 10 A4-Seiten Zusammenfassung\n\n\nTeil Android\n\n\nKein XML selber schreiben, aber lesen k\u00f6nnen\n\n\n\n\n\n\n\n\nTeil Android\n\n\nVorlesung 1 - Einf\u00fchrung Android\n\n\n\n\n\n\nMiniprojekt Abgabe Woche 7 und Woche 14\n\n\n\n\n\n\nAndroid Basics\n\n\n\n\nJava 7 auf Android\n\n\nActivities sind ~\"Screens\"\n\n\nApps werden automatisch geschlossen\n\n\nAllgemein wird der Lifecylce stark vom System gesteuert\n\n\nEine Activity sollte eine einzelne Aufgabe realisieren\n\n\nActivity kann sich in verschiedenen Zust\u00e4nden befinden: Wird gestartet, ist aktiv, wird in den Hintergrund gehen, etc.\n\n\nDie einzelnen Methoden werden \u00fcberschrieben (z.B. \nonCreate()\n)\n\n\nStart einer Activity: \nonCreate()\n, \nonStart()\n, \nonResume()\n, erst dann ist sie interagierbar\n\n\nWird eine Activity \u00fcberdeckt, wird sie pausiert \nonPause()\n. Kommt sie wieder in den Vordergrund, wird nur \nonResume()\n aufgerufen\n\n\nonDestroy()\n k\u00f6nnte auch direkt anderen Zust\u00e4nden aufgerufen werden!\n\n\nBei Konfigurations\u00e4nderungen wird die Activity neu gestartet (zerst\u00f6rt und neu aufgebaut). Also auch z.B. beim Drehen des Screens!\n\n\nDaten in \nonPause()\n sichern\n\n\nActivities werden in einem Stack verwaltet (muss nicht von gleicher App sein)\n\n\nDer Back-Button poped normalerweise die oberste Activity auf dem Stack\n\n\nEine Gruppe von Activities (= Activity Stack) heissen \"Task\"\n\n\nEine ge\u00f6ffnete App ist ein Task, bzw. ist ein Eintrag im \"Overview Screen\" ein Task\n\n\n\n\n\n\nSystemsicht\n\n\nPro APK wird ein Prozess mit einem Thread gestartet\n\n\nJede APK wird unter eigenem Linux User installiert\n\n\nAPKs sind quasi JARs (= Zip-Files) \n\n\n\n\n\n\nIntents\n\n\nAlle Intents werden \u00fcber das System verwaltet\n\n\nExpliziter Intent: Eine bestimmte Klasse ansprechen\n\n\nImpliziter Intent: z.B. \"Absicht, Bild aufzunehmen\"\n\n\nExplizite Intents normalerweise f\u00fcr interne Activities, implizite f\u00fcr generische Aktionen\n\n\n\n\n\n\nViews\n\n\nAlles, was der Benutzer sieht\n\n\nJede Activity hat eine View\n\n\nGUI kann deklarativ mit XMl oder imperativ mit Java Code erstellt werden\n\n\n\n\n\n\n\n\nVorlesung 2 - Grundlagen GUI\n\n\n\n\nEine \nView\n ist immer eine Rechteckige Fl\u00e4che, f\u00fcr die die View verantwortlich ist\n\n\nWidgets sind fertige Komponenten (buttons, images, checkboxes, ...)\n\n\nViewGroup ist eine Unterklasse von View\n\n\nLayouts k\u00f6nnen ineinander verschachtelt werden (auch unterschiedliche)\n\n\nmatch_parent\n: Nimm den ganzen Platz ein\n\n\nwrap_content\n: Nur so viel Platz wie n\u00f6tig\n\n\nLinear-Layout: Wenn kein Gewicht angegeben wird, wird m\u00f6glichst wenig Platz verwendet. Mit Gewicht entsprechend dem Werten (mehr Gewicht -\n mehr Platz)\n\n\nNeu gibt es \nConstraintLayout\n, das auf den GUI-Builder optimiert wurde. Ist allerdings noch in Alpha\n\n\nDie \nR\n Klasse enth\u00e4lt Konstanten f\u00fcr alle XML-Files im res-Ordner (wird vom Compiler generiert) und bildet dessen Ordnerstruktur ab\n\n\n@+\n ist die Definition einer Ressource, \n@\n ein Verweis darauf\n\n\nmipmap\n: Launcher-Icon der App\n\n\nStrings mit \ngetString(R.string.string_name)\n abrufen\n\n\ndimens.xml\n enth\u00e4lt Dimensionen f\u00fcr Layouts, z.B. \n16dp\n und werden \u00fcber einen Namen aufgerufen\n\n\ndp\n: Density-independent-pixels: Unabh\u00e4ngig von Screen-dpi. Der Basis-Faktor wird von 160dpi berechnet (\"mdpi\")\n\n\nF\u00fcr verschiedene Screen-Gr\u00f6ssen, Sprachen, Versionen, etc. werden verschiedene XML-Files angelegt\n\n\nDie App hat nach den Lifecycle-Aufrufen keine Kontrolle mehr. Das System sendet Events (ausgel\u00f6st durch User oder z.B. Sensoren), die dann behandelt werden (Event-Listener)\n\n\nAuch Widgets k\u00f6nnen Events ausl\u00f6sen (-\n \nTextWatcher\n)\n\n\n\n\nVorlesung 3 - Strukturierung und Navigation\n\n\nNavigations-Design\n\n\n\n\nF\u00fcr einen ersten App-Entwurf ein Domain-Modell erstellen\n\n\n\"Screen Map\" - Beziehungen zwischen Screens erstellen\n\n\nScreens gruppieren, z.B. mehrere Screens mit Tabs (Panes) trennen\n\n\nNavigation: Parent-Child-Beziehung (Hierarchisch) oder \"lateral Navigation\" (zwischen zwei Kindern)\n\n\nBeispiel HSR-App: Home -\n Cafeteria ist hierarchisch, einzelne Wochentage lateral\n\n\nBack-Button macht \"zeitliche Navigation\" (vorheriges Kind oder Parent)\n\n\nButton oben links sollte immer zum Parent zur\u00fcck gehen\n\n\nF\u00fcr eine Gesamt\u00fcbersicht Wireframes / Storyboards erstellen\n\n\n\n\nFragments\n\n\n\n\nEs kann nur immer eine Activity gleichzeitig aktiv sein.\n\n\nFragment hat eigenen Lifecycle\n\n\nEin Fragment kann in mehrere Activities eingebunden werden und eine Activity kann mehrere Fragments beinhalten\n\n\nKann zur Laufzeit in Activity eingebunden (\nonAttach()\n) und wieder entfernt werden (\nonDetach()\n)\n\n\nFragments k\u00f6nnen fix eingebunden werden, direkt als \nfragment\n Tag im XML der Activity (mit \nname\n die Klasse angeben). Der Code der Activity \u00e4ndert sich dabei nicht\n\n\nOder dynamisch: Normalerweise mit Frame-Layout\n\n\n\n\npublic class MainActivity extends Activity {\n\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n\n       FragmentManager fragmentManager = getFragmentManager();\n       FragmentTransaction fragmentTransaction = \n                               fragmentManager.beginTransaction();\n\n       MainActivityFragment fragment = new MainActivityFragment();\n       fragmentTransaction.add(R.id.fragment_container, fragment);\n       fragmentTransaction.commit();\n   }\n}\n\n\n\n\n\n\nIm Unterschied zur Activity wird hier das Fragment selbst instanziert\n\n\nFragment sollte unabh\u00e4ngig von der Activity sein\n\n\nZur Kommunikation zwischen Fragment und Activity definiert das Fragment ein Interface, dass die Activity implementiert\n\n\n\n\nMaster-Detail Navigation\n\n\n\n\nEin Pattern, z.B. eine Liste mit Mails -\n einzelne Mail\n\n\nz.B. hat das Phone-Design nur ein einzelnes Fragment pro Activity, das Tablet-layout zeigt beide Layouts auf der gleichen Activity an\n\n\nWenn Activity einen Einstiegspunkt in die App sein kann, muss es eine Activity sein, kein Fragment\n\n\n\n\nMen\u00fcs\n\n\nProgrammatisch:\n\n\npublic boolean onCreateOptionsMenu(Menu menu) {\n    menu.add(0, START_MENU_ITEM, 0, \nStart\n);\n    menu.add(0, SUBMIT_MENU_ITEM, 0, \nSubmit\n);\n    return true;\n}\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case START_MENU_ITEM:\n            // handle start\n            return true;\n        case SUBMIT_MENU_ITEM:\n            // handle submit\n            return true;\n    }\n    return super.onOptionsItemSelected(item);\n}\n\n\n\n\n\n\nDeklarativ: als menu-File in XML\n\n\nEinbinden mit \ngetMenuInflater().inflate(id, Menu)\n in der \nonCreateOptionsMenu()\n Methode\n\n\nMit dem \"PreferenceScreen\" kann ein Settings-Men\u00fc gebaut werden\n\n\nAuch das Fragment kann ein Men\u00fc steuern\n\n\nNach Android 5.0 ist die \"ActionBar\" deprecated, neu ist die \"Toolbar\"\n\n\nNavigation Drawer (\"Hamburger Menu\") hat schlechte usability\n\n\n\n\n\n\nVorlesung 4 - Listen und Persistenz\n\n\nListen\n\n\n\n\nListView\n\n\n\n\nListView\n   android:layout_width=\nmatch_parent\n\n   android:layout_height=\nmatch_parent\n\n   android:id=\n@+id/listView\n/\n\n\n\n\n\n\n\nFolie 12: \"Klient\" ist ListView und \"Dienst\" unsere Klasse\n\n\nDie ListView nutzt einen Adapter \u00fcber ein Interface, der die Klassen an das Interface anpasst\n\n\nAdapter muss wissen, wieviele Elemente es gibt (\ngetCount()\n) und ein bestimmtes Element zur\u00fcckgeben (\ngetView()\n)\n\n\nLayout der jeweiligen Eintr\u00e4ge sind in eigenem Layout definiert\n\n\ngetView()\n in eigenem Adapter \u00fcberschreiben\n\n\n\n\npublic View getView(int position, View convertView, ViewGroup parent) {\n   final Module module = modulList.get(position);\n\n   if (convertView == null) {\n       LayoutInflater layoutInflater = (...) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n       convertView = layoutInflater.inflate(R.layout.rowlayout, null);\n   }\n   // Get views with findViewByID, display data and set listeners\n   return convertView;\n}\n\n\n\n\n\n\nDemo: \nhttps://github.com/HSR-MGE/W04-CustomArrayAdapterDemo\n\n\nAn einer View kann ein Tag angeh\u00e4ngt werden (beliebiges \nObject\n)\n\n\nF\u00fcr Performance-Optimierung: \nfindViewByID()\n nur beim ersten Mal aufrufen und im Tag speichern\n\n\n\n\nif (convertView == null) {\n   ...\n\n   TextView textView = (TextView) convertView.findViewById(R.id.textView);\n   CheckBox checkBox = (CheckBox) convertView.findViewById(R.id.checkBox);\n\n   Pair\nTextView, CheckBox\n views = new Pair\n(textView, checkBox);\n   convertView.setTag(views);\n}\n\nPair\nTextView, CheckBox\n views = (Pair\nTextView, CheckBox\n) convertView.getTag();\nTextView textView = views.first;\nCheckBox checkBox = views.second;\n\n\n\n\n\n\nIn \nRecyclerView\n ist das bereits eingebaut\n\n\nIn \nonBindViewHolder()\n sind die UI-Elemente schon drin im ViewHolder und m\u00fcssen nur noch abgef\u00fcllt werden\n\n\nVariante mit ListView quasi aufgeteilt in zwei Methoden\n\n\n\n\n\n\n\n\nPersistenz\n\n\n\n\nonSaveInstanceState()\n speichert per default alle Views mit einer ID im Bundle gespeichert\n\n\nWird aber nicht immer ausgef\u00fchrt (z.B. \u00fcber Back-Button verlassen)\n\n\n\n\n\n\nonCreate()\n erh\u00e4lt das Bundle von \nonSaveInstanceState()\n\n\nKonsequenz: Daten immer in \nonPause()\n sichern\n\n\nShared Preferences (nur bool, float, int, long, String, Set\n)\n\n\n\n\nSharedPreferences settings = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\nSharedPreferences.Editor editor = settings.edit();\neditor.putBoolean(\ndisabled\n, false);\n\nboolean isDisabled = settings.getBoolean(\ndisabled\n, false);\n\neditor.commit();\n\n\n\n\n\n\nSQLite Helper trackt die Version. Wenn z.B. das Schema ge\u00e4ndert wird, kann bei einem Update der App eine neue Version angegeben werden, um die Daten zu migrieren (in \nonUpgrade\n)\n\n\n\n\nHintergrundaktionen\n\n\n\n\nMit \nRunnable\n die Methode \nrun()\n \u00fcberschreiben\n\n\nEinen neuen Threat starten\n\n\n\n\npublic void onClick(View v) {\n\n   Runnable runnable = new Runnable() {\n       @Override\n       public void run() {\n           final Bitmap bitmap = download(\nhttp://slow.hsr.ch/hsr_cat.bmp\n);\n\n           Runnable command = new Runnable() {\n               @Override\n               public void run() {\n                   imageView.setImageBitmap(bitmap);\n               }\n           };\n           imageView.post(command);\n       }\n   };\n   Thread thread = new Thread(runnable);\n   thread.start();\n}\n\n\n\n\n\n\n\nViews d\u00fcrfen nur aus dem Main-Thread ver\u00e4ndert werden, darum \nimageView.post()\n. Dies setzt einen neuen Task in die Event-Queue\n\n\nOK f\u00fcr einfache Tasks, besser mit AsyncTask\n\n\nonPreExecute()\n: Vorbereitung im UI-Thread\n\n\ndoInBackground()\n: In eigemen Thread ausgef\u00fchrt\n\n\nonPostExecute()\n: Resultat setzen, wieder im GUI-Thread\n\n\n\n\n\n\n\n\nclass DownloadBitmapTask extends AsyncTask\nString, Void, Bitmap\n {\n\n   @Override\n   protected void onPreExecute() {\n       super.onPreExecute();\n   }\n\n   @Override\n   protected Bitmap doInBackground(String... params) {\n       return download(params[0]);\n   }\n\n   @Override\n   protected void onPostExecute(Bitmap bitmap) {\n       imageView.setImageBitmap(bitmap);\n   }\n}\n\nnew DownloadBitmapTask().execute(\nhttp://slow.hsr.ch/hsr_cat.bmp\n);\n\n\n\n\n\n\nVorlesung 5 - Material Design\n\n\n\n\nMaterial Design styleguide: \nhttps://material.google.com/\n\n\nAlle Elemente sollten auf einem Grid von 8dp angeordnet werden\n\n\n-\n Abstand immer Vielfaches von 8\n\n\n\n\n\n\nFarbkombinationen: \nhttps://material.google.com/style/color.html#color-color-palette\n\n\n\n\n\n\nVorlesung 6 - Patterns \n Serivces\n\n\nUI Patterns\n\n\n\n\nMultitier Architecture\n\n\nAufteilung in (typisch) 3 Layer: Presentation, Domain, Data\n\n\nPresentation ist verantwortlich f\u00fcr die Darstellung, hat auf Domain Zugriff\n\n\nDomain enth\u00e4lt Business Logik und Domain Klassen\n\n\nData implementiert die Speicherung der Daten und stellt sie der Domain zur Verf\u00fcgung\n\n\n\n\n\n\nKeine Zyklen erlaubt\n\n\nObserver-Pattern verwenden\n\n\n\n\n\n\n\n\nServices\n\n\n\n\nMuss im Manifest deklariert werden\n\n\nEinmaliger Task -\n started Service\n\n\nL\u00e4uft im Hintergrund und wird nicht gestoppt, auch wenn die App pausiert / gestoppt wird\n\n\nL\u00e4uft im gleichen Thread wie das UI!\n\n\nStarten \u00fcber einen Intent \nstartService(intent)\n\n\nonStartCommand()\n \u00fcberschreiben, um Task auszuf\u00fchren\n\n\nmit \nstopSelf()\n im Service stoppen\n\n\nIntentService kommuniziert \u00fcber Intents, wird dann im \nonHandleIntent()\n abgearbeitet\n\n\nStellt einen Worker Thread zur Verf\u00fcgung\n\n\nProblem: Wie kann der Service die Activity benachrichtigen? -\n Broadcasts oder \"pending Intent\"\n\n\n\n\n\n\nClient-Server-Kommunikation -\n bound service\n\n\nAuch \u00fcber einen Intent gestartet\n\n\nGibt Interface, \u00fcber den kommuniziert werden kann\n\n\n\n\n\n\nAsyncTask: Aufgabe von Main-Thread entkoppeln. Kombinieren mit Services, um GUI-Thread nicht zu blockieren\n\n\nBeide M\u00f6glichkeiten brauchen dieselbe Service-Klasse\n\n\n\n\nBroadcast Receiver\n\n\n\n\nDas System versendet Meldungen als Intents\n\n\nz.B low battery, Power connected, boot completed, etc.\n\n\nRegistrierung\n\n\nStatisch im Manifest mit einem intent-Filter\n\n\nDynamisch \u00fcber einen \nLocalBroadcastManager\n\n\n\n\n\n\nEigene Broadcasts versenden mit \nsendBroadcast(intent)\n\n\nEs k\u00f6nnen auch Broadcasts innerhalb der App versendet werden\n\n\n\n\n\n\nVorlesung 7 - Weiterf\u00fchrende Themen\n\n\nSensoren\n\n\n\n\nUnterst\u00fctzung von Ger\u00e4t zu Ger\u00e4t verschieden\n\n\nQualit\u00e4t der Daten sehr unterschiedlich\n\n\nSensordaten unterschiedlich zu interpretieren: \nhttps://developer.android.com/reference/android/hardware/SensorEvent.html#values\n\n\nDelay gibt an, wie h\u00e4ufig Daten abgefragt werden (braucht entsprechend mehr oder weniger Strom)\n\n\n\n\nsensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\nlightSensor = sensorManager.getSensorList(Sensor.TYPE_LIGHT).get(0); // Pr\u00fcfen, ob Sensor existiert!\n...\n// onResume():\nsensorManager.registerListener(this, lightSensor, SensorManager.SENSOR_DELAY_NORMAL);\n// Im onPause listener wieder abmelden\n...\n@Override\npublic void onSensorChanged(SensorEvent event) {\n    textView.setText(String.format(\nHelligkeit: %.0f\n, event.values[0]));\n}\n\n\n\n\nDependency Injection\n\n\n\n\nProblem: Klasse ist von einer anderen direkt abh\u00e4ngig und instanziert diese (z.B. wird eine Server-Adresse gesetzt)\n\n\nSchlecht testbar mit einem Fake-Server\n\n\nL\u00f6sungsansatz: Klasse braucht ein Interface, dass dann z.B. von einem richtigen Service und einem \"Fake\"-Service implementiert wird\n\n\nImplementation\n\n\nInstanzierung im Konstruktor\n\n\nBuilder-Pattern (z.B. wie AlertDialog)\n\n\nDagger 2 Framework\n\n\n\n\n\n\nBringt zentrale Konfiguration und einfachere Testbarkeit, aber ist mehr Schreibaufwand\n\n\nView Injection\n\n\nMit 3rd-Party-Library \"Butterknife\"\n\n\nMacht binds anhand von annotierten attributen und methoden\n\n\n\n\n\n\n\n\nData Binding\n\n\n\n\nIdee: im XML direkt auf Objekte zugreifen, damit es sich von selbst aktualisiert (\"XML ist der Observer\")\n\n\nlayout\n-Tag als Root-Element, spezifisches Layout darin verschachtelt\n\n\nIm layout gibt es einen \ndata\n Block mit Variablen-Namen und Typen\n\n\nZugriff im Layout mit \n@(\nexpression\n)\n\n\nEs wird eine Klasse generiert, z.B. \nActivityMainBinding\n, \u00fcber den das Data-Binding gemacht werden kann\n\n\nKlasse bietet Setter-Methoden f\u00fcr die Variablen\n\n\nAuch Listener k\u00f6nnen direkt im layout gebindet werden\n\n\nUm Views automatisch zu aktualisieren, \nObservableField\nT\n verwenden\n\n\nAufpassen, dass nicht zuviel Logik ins XML kommt\n\n\n\n\n\n\nTeil WPF\n\n\nVorlesung 8 - Einf\u00fchrung WPF\n\n\n\n\nXAML\n\n\nDer \"x\"-Namespace wird sepparat importiert\n\n\nIst wie der \"android:\" Namespace in Android\n\n\nPixel sind immer device-independent! D.h. sie sehen auf jeder Aufl\u00f6sung gleich gross aus\n\n\n1 Pixel ist immer 1/96 Inch\n\n\nProblem: Aliasing, weil kanten nicht mehr direkt auf Pixel liegen m\u00fcssen. Kann mit Properties verhindert werden\n\n\n\n\n\n\nElemente werden zu Klassen \u00fcbersetzt, dessen Attribute zu Properties der Klasse\n\n\nXAML ist also nur eine Hilfe, Objekte zu instanziieren. Das gleiche k\u00f6nnte man in Code machen\n\n\nEs gibt auch eine Property Element Syntax, um komplexere Properties zu definieren, z.B. verschachtelte Elemente\n\n\n\n\n\n\nLogical Tree: Baum, der man selbst per XAML / Code definiert hat\n\n\nVisual Tree: Baum, der zur Laufzeit angezeigt wird (also z.B. auch Borders)\n\n\nEvents werden dem Logical Tree herunter gegeben (von Window aus) und vom Element hinauf (Bubbling)\n\n\nPreview\n-Events sind Tunneling, also von \"oben\"\n\n\n\n\n\n\nVorlesung 9 - UI Entwurf\n\n\n\n\nZusatzinfos in Appendix-Folien (auch Pr\u00fcfungsstoff!)\n\n\nUnter \nControl\n sind intereraktive Elemente, \nFrameworkElement\n beherbergt alle, aber auch nicht interaktive Elemente wie Bilder\n\n\nIm Gegensatz zu Android keine \nmatchParent\n o.\u00e4, sondern wird \u00fcber alignment gel\u00f6st, z.B. \nstretch\n\n\nWidth / Height gilt immer mit dem Rahmen (wie bei CSS \nbox-sizing: border-box\n)\n\n\nFarbangaben werden vom Compiler in einen Brush umgewandelt\n\n\nEin Grid ohne Zellen und Spalten (= 1 Zelle) kann verwendet werden, um darin Elemente anzuordnen. Nacheinander stehende Elemente werden gestacked\n\n\nIm XAML mit \nlocal:\n auf den aktuellen Namespace zugreifen, z.B. auf eigenen Klassen\n\n\nDialogfenster werden geschlossen, wenn das Property \nDialogResult\n gesetzt wird (als Nebeneffekt!)\n\n\n\n\n\n\nVorlesung 10 - GUI-Design\n\n\nResources\n\n\n\n\nXAML-Objekte, die in Layout verwendet werden k\u00f6nnen\n\n\nz.B. Brush, Color, Style, String\n\n\nJede Ressource mit einem Key\n\n\nWerden in dll rein kompiliert\n\n\nIn Application.xaml Datei unter \nApplication.Resources\n\n\nMit \nx:Key\n Attribut eine ID festlegen\n\n\nIm layout mit \n{StaticResource \nresourceID\n}\n ansprechen\n\n\n\n\n\n\nKey wird zuerst in Element und Parent-Nodes gesucht, dann bei \nWindow.Resources\n, am Schluss bei \nApplication.Resources\n\n\nStatic Resource: Binding geschieht Compile-Time\n\n\nDynamische Resource: Mit \n{DynamicResource \nresourceID\n}\n, l\u00e4sst auch dynamisch geladene Resourcen zu, binding zur Laufzeit. Z.B. um Themes zur Laufzeit zu wechseln\n\n\nIm Code zugreifen mit \nobject FindResource(key)\n und auf entsprechenden Type casten\n\n\nEigenes Resource Dictionary in eigenem File erstellen\n\n\nRoot-Tag \nResourceDictionary\n\n\nExterne Res-Dicts einbinden in Tag \nResourceDictionary.MergedDictionaries\n\n\nResource ist verf\u00fcgbar, sobald sie im XAML definiert wurde (oder aus externem File verlinkt)\n\n\n\n\n\n\n\n\nStyles\n\n\n\n\nF\u00fcr ein Steuerelement einen Style festlegen mit mehreren Eigenschaften\n\n\nStyle mit \nStyle x:Key=\"id\"\n in Resource-Dictionary definieren\n\n\nals statiche Resource beim Steuerelement dem \nStyle\n-Property zuweisen\n\n\nButton.Property\n ist nur eine Hilfe f\u00fcr den Compiler. Der Style k\u00f6nnte auch auf ein anderen Control-Typ angewendet werden\n\n\nMit \nTargetType\n kann im Style das Steuerelement angegeben werden. Wenn der Key weggelassen wird, ist er standardm\u00e4ssig auf alle Controls dieses Typs angewendet\n\n\nStyles k\u00f6nnen vererbt werden\n\n\nMit \nBasedOn\n Property im Style-Tag \"Parent\" definieren\n\n\n\n\n\n\nMit Templates kann das komplette Aussehen eines Controls ver\u00e4ndert werden\n\n\nIm \nTemplate\n-Property des Styles festgelegt\n\n\nMit \nTemplateBinding\n die Default-Werte abrufen\n\n\n\n\n\n\nMit \nStyle.Triggers\n z.B. MouseOver-Verhalten festlegen\n\n\nVisual State Manager \u00fcbersteuert z.T. Style-Triggers\n\n\nL\u00f6sung: Eigenes Control Template schreiben", 
            "title": "MGE"
        }, 
        {
            "location": "/hs16/mge/#prufung", 
            "text": "Pro Teil 1h  Pro Teil 10 A4-Seiten Zusammenfassung  Teil Android  Kein XML selber schreiben, aber lesen k\u00f6nnen", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/mge/#teil-android", 
            "text": "", 
            "title": "Teil Android"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-1-einfuhrung-android", 
            "text": "Miniprojekt Abgabe Woche 7 und Woche 14    Android Basics   Java 7 auf Android  Activities sind ~\"Screens\"  Apps werden automatisch geschlossen  Allgemein wird der Lifecylce stark vom System gesteuert  Eine Activity sollte eine einzelne Aufgabe realisieren  Activity kann sich in verschiedenen Zust\u00e4nden befinden: Wird gestartet, ist aktiv, wird in den Hintergrund gehen, etc.  Die einzelnen Methoden werden \u00fcberschrieben (z.B.  onCreate() )  Start einer Activity:  onCreate() ,  onStart() ,  onResume() , erst dann ist sie interagierbar  Wird eine Activity \u00fcberdeckt, wird sie pausiert  onPause() . Kommt sie wieder in den Vordergrund, wird nur  onResume()  aufgerufen  onDestroy()  k\u00f6nnte auch direkt anderen Zust\u00e4nden aufgerufen werden!  Bei Konfigurations\u00e4nderungen wird die Activity neu gestartet (zerst\u00f6rt und neu aufgebaut). Also auch z.B. beim Drehen des Screens!  Daten in  onPause()  sichern  Activities werden in einem Stack verwaltet (muss nicht von gleicher App sein)  Der Back-Button poped normalerweise die oberste Activity auf dem Stack  Eine Gruppe von Activities (= Activity Stack) heissen \"Task\"  Eine ge\u00f6ffnete App ist ein Task, bzw. ist ein Eintrag im \"Overview Screen\" ein Task    Systemsicht  Pro APK wird ein Prozess mit einem Thread gestartet  Jede APK wird unter eigenem Linux User installiert  APKs sind quasi JARs (= Zip-Files)     Intents  Alle Intents werden \u00fcber das System verwaltet  Expliziter Intent: Eine bestimmte Klasse ansprechen  Impliziter Intent: z.B. \"Absicht, Bild aufzunehmen\"  Explizite Intents normalerweise f\u00fcr interne Activities, implizite f\u00fcr generische Aktionen    Views  Alles, was der Benutzer sieht  Jede Activity hat eine View  GUI kann deklarativ mit XMl oder imperativ mit Java Code erstellt werden", 
            "title": "Vorlesung 1 - Einf\u00fchrung Android"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-2-grundlagen-gui", 
            "text": "Eine  View  ist immer eine Rechteckige Fl\u00e4che, f\u00fcr die die View verantwortlich ist  Widgets sind fertige Komponenten (buttons, images, checkboxes, ...)  ViewGroup ist eine Unterklasse von View  Layouts k\u00f6nnen ineinander verschachtelt werden (auch unterschiedliche)  match_parent : Nimm den ganzen Platz ein  wrap_content : Nur so viel Platz wie n\u00f6tig  Linear-Layout: Wenn kein Gewicht angegeben wird, wird m\u00f6glichst wenig Platz verwendet. Mit Gewicht entsprechend dem Werten (mehr Gewicht -  mehr Platz)  Neu gibt es  ConstraintLayout , das auf den GUI-Builder optimiert wurde. Ist allerdings noch in Alpha  Die  R  Klasse enth\u00e4lt Konstanten f\u00fcr alle XML-Files im res-Ordner (wird vom Compiler generiert) und bildet dessen Ordnerstruktur ab  @+  ist die Definition einer Ressource,  @  ein Verweis darauf  mipmap : Launcher-Icon der App  Strings mit  getString(R.string.string_name)  abrufen  dimens.xml  enth\u00e4lt Dimensionen f\u00fcr Layouts, z.B.  16dp  und werden \u00fcber einen Namen aufgerufen  dp : Density-independent-pixels: Unabh\u00e4ngig von Screen-dpi. Der Basis-Faktor wird von 160dpi berechnet (\"mdpi\")  F\u00fcr verschiedene Screen-Gr\u00f6ssen, Sprachen, Versionen, etc. werden verschiedene XML-Files angelegt  Die App hat nach den Lifecycle-Aufrufen keine Kontrolle mehr. Das System sendet Events (ausgel\u00f6st durch User oder z.B. Sensoren), die dann behandelt werden (Event-Listener)  Auch Widgets k\u00f6nnen Events ausl\u00f6sen (-   TextWatcher )", 
            "title": "Vorlesung 2 - Grundlagen GUI"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-3-strukturierung-und-navigation", 
            "text": "", 
            "title": "Vorlesung 3 - Strukturierung und Navigation"
        }, 
        {
            "location": "/hs16/mge/#navigations-design", 
            "text": "F\u00fcr einen ersten App-Entwurf ein Domain-Modell erstellen  \"Screen Map\" - Beziehungen zwischen Screens erstellen  Screens gruppieren, z.B. mehrere Screens mit Tabs (Panes) trennen  Navigation: Parent-Child-Beziehung (Hierarchisch) oder \"lateral Navigation\" (zwischen zwei Kindern)  Beispiel HSR-App: Home -  Cafeteria ist hierarchisch, einzelne Wochentage lateral  Back-Button macht \"zeitliche Navigation\" (vorheriges Kind oder Parent)  Button oben links sollte immer zum Parent zur\u00fcck gehen  F\u00fcr eine Gesamt\u00fcbersicht Wireframes / Storyboards erstellen", 
            "title": "Navigations-Design"
        }, 
        {
            "location": "/hs16/mge/#fragments", 
            "text": "Es kann nur immer eine Activity gleichzeitig aktiv sein.  Fragment hat eigenen Lifecycle  Ein Fragment kann in mehrere Activities eingebunden werden und eine Activity kann mehrere Fragments beinhalten  Kann zur Laufzeit in Activity eingebunden ( onAttach() ) und wieder entfernt werden ( onDetach() )  Fragments k\u00f6nnen fix eingebunden werden, direkt als  fragment  Tag im XML der Activity (mit  name  die Klasse angeben). Der Code der Activity \u00e4ndert sich dabei nicht  Oder dynamisch: Normalerweise mit Frame-Layout   public class MainActivity extends Activity {\n\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n\n       FragmentManager fragmentManager = getFragmentManager();\n       FragmentTransaction fragmentTransaction = \n                               fragmentManager.beginTransaction();\n\n       MainActivityFragment fragment = new MainActivityFragment();\n       fragmentTransaction.add(R.id.fragment_container, fragment);\n       fragmentTransaction.commit();\n   }\n}   Im Unterschied zur Activity wird hier das Fragment selbst instanziert  Fragment sollte unabh\u00e4ngig von der Activity sein  Zur Kommunikation zwischen Fragment und Activity definiert das Fragment ein Interface, dass die Activity implementiert", 
            "title": "Fragments"
        }, 
        {
            "location": "/hs16/mge/#master-detail-navigation", 
            "text": "Ein Pattern, z.B. eine Liste mit Mails -  einzelne Mail  z.B. hat das Phone-Design nur ein einzelnes Fragment pro Activity, das Tablet-layout zeigt beide Layouts auf der gleichen Activity an  Wenn Activity einen Einstiegspunkt in die App sein kann, muss es eine Activity sein, kein Fragment", 
            "title": "Master-Detail Navigation"
        }, 
        {
            "location": "/hs16/mge/#menus", 
            "text": "Programmatisch:  public boolean onCreateOptionsMenu(Menu menu) {\n    menu.add(0, START_MENU_ITEM, 0,  Start );\n    menu.add(0, SUBMIT_MENU_ITEM, 0,  Submit );\n    return true;\n}\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case START_MENU_ITEM:\n            // handle start\n            return true;\n        case SUBMIT_MENU_ITEM:\n            // handle submit\n            return true;\n    }\n    return super.onOptionsItemSelected(item);\n}   Deklarativ: als menu-File in XML  Einbinden mit  getMenuInflater().inflate(id, Menu)  in der  onCreateOptionsMenu()  Methode  Mit dem \"PreferenceScreen\" kann ein Settings-Men\u00fc gebaut werden  Auch das Fragment kann ein Men\u00fc steuern  Nach Android 5.0 ist die \"ActionBar\" deprecated, neu ist die \"Toolbar\"  Navigation Drawer (\"Hamburger Menu\") hat schlechte usability", 
            "title": "Men\u00fcs"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-4-listen-und-persistenz", 
            "text": "", 
            "title": "Vorlesung 4 - Listen und Persistenz"
        }, 
        {
            "location": "/hs16/mge/#listen", 
            "text": "ListView   ListView\n   android:layout_width= match_parent \n   android:layout_height= match_parent \n   android:id= @+id/listView /    Folie 12: \"Klient\" ist ListView und \"Dienst\" unsere Klasse  Die ListView nutzt einen Adapter \u00fcber ein Interface, der die Klassen an das Interface anpasst  Adapter muss wissen, wieviele Elemente es gibt ( getCount() ) und ein bestimmtes Element zur\u00fcckgeben ( getView() )  Layout der jeweiligen Eintr\u00e4ge sind in eigenem Layout definiert  getView()  in eigenem Adapter \u00fcberschreiben   public View getView(int position, View convertView, ViewGroup parent) {\n   final Module module = modulList.get(position);\n\n   if (convertView == null) {\n       LayoutInflater layoutInflater = (...) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n       convertView = layoutInflater.inflate(R.layout.rowlayout, null);\n   }\n   // Get views with findViewByID, display data and set listeners\n   return convertView;\n}   Demo:  https://github.com/HSR-MGE/W04-CustomArrayAdapterDemo  An einer View kann ein Tag angeh\u00e4ngt werden (beliebiges  Object )  F\u00fcr Performance-Optimierung:  findViewByID()  nur beim ersten Mal aufrufen und im Tag speichern   if (convertView == null) {\n   ...\n\n   TextView textView = (TextView) convertView.findViewById(R.id.textView);\n   CheckBox checkBox = (CheckBox) convertView.findViewById(R.id.checkBox);\n\n   Pair TextView, CheckBox  views = new Pair (textView, checkBox);\n   convertView.setTag(views);\n}\n\nPair TextView, CheckBox  views = (Pair TextView, CheckBox ) convertView.getTag();\nTextView textView = views.first;\nCheckBox checkBox = views.second;   In  RecyclerView  ist das bereits eingebaut  In  onBindViewHolder()  sind die UI-Elemente schon drin im ViewHolder und m\u00fcssen nur noch abgef\u00fcllt werden  Variante mit ListView quasi aufgeteilt in zwei Methoden", 
            "title": "Listen"
        }, 
        {
            "location": "/hs16/mge/#persistenz", 
            "text": "onSaveInstanceState()  speichert per default alle Views mit einer ID im Bundle gespeichert  Wird aber nicht immer ausgef\u00fchrt (z.B. \u00fcber Back-Button verlassen)    onCreate()  erh\u00e4lt das Bundle von  onSaveInstanceState()  Konsequenz: Daten immer in  onPause()  sichern  Shared Preferences (nur bool, float, int, long, String, Set )   SharedPreferences settings = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\nSharedPreferences.Editor editor = settings.edit();\neditor.putBoolean( disabled , false);\n\nboolean isDisabled = settings.getBoolean( disabled , false);\n\neditor.commit();   SQLite Helper trackt die Version. Wenn z.B. das Schema ge\u00e4ndert wird, kann bei einem Update der App eine neue Version angegeben werden, um die Daten zu migrieren (in  onUpgrade )", 
            "title": "Persistenz"
        }, 
        {
            "location": "/hs16/mge/#hintergrundaktionen", 
            "text": "Mit  Runnable  die Methode  run()  \u00fcberschreiben  Einen neuen Threat starten   public void onClick(View v) {\n\n   Runnable runnable = new Runnable() {\n       @Override\n       public void run() {\n           final Bitmap bitmap = download( http://slow.hsr.ch/hsr_cat.bmp );\n\n           Runnable command = new Runnable() {\n               @Override\n               public void run() {\n                   imageView.setImageBitmap(bitmap);\n               }\n           };\n           imageView.post(command);\n       }\n   };\n   Thread thread = new Thread(runnable);\n   thread.start();\n}   Views d\u00fcrfen nur aus dem Main-Thread ver\u00e4ndert werden, darum  imageView.post() . Dies setzt einen neuen Task in die Event-Queue  OK f\u00fcr einfache Tasks, besser mit AsyncTask  onPreExecute() : Vorbereitung im UI-Thread  doInBackground() : In eigemen Thread ausgef\u00fchrt  onPostExecute() : Resultat setzen, wieder im GUI-Thread     class DownloadBitmapTask extends AsyncTask String, Void, Bitmap  {\n\n   @Override\n   protected void onPreExecute() {\n       super.onPreExecute();\n   }\n\n   @Override\n   protected Bitmap doInBackground(String... params) {\n       return download(params[0]);\n   }\n\n   @Override\n   protected void onPostExecute(Bitmap bitmap) {\n       imageView.setImageBitmap(bitmap);\n   }\n}\n\nnew DownloadBitmapTask().execute( http://slow.hsr.ch/hsr_cat.bmp );", 
            "title": "Hintergrundaktionen"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-5-material-design", 
            "text": "Material Design styleguide:  https://material.google.com/  Alle Elemente sollten auf einem Grid von 8dp angeordnet werden  -  Abstand immer Vielfaches von 8    Farbkombinationen:  https://material.google.com/style/color.html#color-color-palette", 
            "title": "Vorlesung 5 - Material Design"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-6-patterns-serivces", 
            "text": "", 
            "title": "Vorlesung 6 - Patterns &amp; Serivces"
        }, 
        {
            "location": "/hs16/mge/#ui-patterns", 
            "text": "Multitier Architecture  Aufteilung in (typisch) 3 Layer: Presentation, Domain, Data  Presentation ist verantwortlich f\u00fcr die Darstellung, hat auf Domain Zugriff  Domain enth\u00e4lt Business Logik und Domain Klassen  Data implementiert die Speicherung der Daten und stellt sie der Domain zur Verf\u00fcgung    Keine Zyklen erlaubt  Observer-Pattern verwenden", 
            "title": "UI Patterns"
        }, 
        {
            "location": "/hs16/mge/#services", 
            "text": "Muss im Manifest deklariert werden  Einmaliger Task -  started Service  L\u00e4uft im Hintergrund und wird nicht gestoppt, auch wenn die App pausiert / gestoppt wird  L\u00e4uft im gleichen Thread wie das UI!  Starten \u00fcber einen Intent  startService(intent)  onStartCommand()  \u00fcberschreiben, um Task auszuf\u00fchren  mit  stopSelf()  im Service stoppen  IntentService kommuniziert \u00fcber Intents, wird dann im  onHandleIntent()  abgearbeitet  Stellt einen Worker Thread zur Verf\u00fcgung  Problem: Wie kann der Service die Activity benachrichtigen? -  Broadcasts oder \"pending Intent\"    Client-Server-Kommunikation -  bound service  Auch \u00fcber einen Intent gestartet  Gibt Interface, \u00fcber den kommuniziert werden kann    AsyncTask: Aufgabe von Main-Thread entkoppeln. Kombinieren mit Services, um GUI-Thread nicht zu blockieren  Beide M\u00f6glichkeiten brauchen dieselbe Service-Klasse", 
            "title": "Services"
        }, 
        {
            "location": "/hs16/mge/#broadcast-receiver", 
            "text": "Das System versendet Meldungen als Intents  z.B low battery, Power connected, boot completed, etc.  Registrierung  Statisch im Manifest mit einem intent-Filter  Dynamisch \u00fcber einen  LocalBroadcastManager    Eigene Broadcasts versenden mit  sendBroadcast(intent)  Es k\u00f6nnen auch Broadcasts innerhalb der App versendet werden", 
            "title": "Broadcast Receiver"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-7-weiterfuhrende-themen", 
            "text": "", 
            "title": "Vorlesung 7 - Weiterf\u00fchrende Themen"
        }, 
        {
            "location": "/hs16/mge/#sensoren", 
            "text": "Unterst\u00fctzung von Ger\u00e4t zu Ger\u00e4t verschieden  Qualit\u00e4t der Daten sehr unterschiedlich  Sensordaten unterschiedlich zu interpretieren:  https://developer.android.com/reference/android/hardware/SensorEvent.html#values  Delay gibt an, wie h\u00e4ufig Daten abgefragt werden (braucht entsprechend mehr oder weniger Strom)   sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\nlightSensor = sensorManager.getSensorList(Sensor.TYPE_LIGHT).get(0); // Pr\u00fcfen, ob Sensor existiert!\n...\n// onResume():\nsensorManager.registerListener(this, lightSensor, SensorManager.SENSOR_DELAY_NORMAL);\n// Im onPause listener wieder abmelden\n...\n@Override\npublic void onSensorChanged(SensorEvent event) {\n    textView.setText(String.format( Helligkeit: %.0f , event.values[0]));\n}", 
            "title": "Sensoren"
        }, 
        {
            "location": "/hs16/mge/#dependency-injection", 
            "text": "Problem: Klasse ist von einer anderen direkt abh\u00e4ngig und instanziert diese (z.B. wird eine Server-Adresse gesetzt)  Schlecht testbar mit einem Fake-Server  L\u00f6sungsansatz: Klasse braucht ein Interface, dass dann z.B. von einem richtigen Service und einem \"Fake\"-Service implementiert wird  Implementation  Instanzierung im Konstruktor  Builder-Pattern (z.B. wie AlertDialog)  Dagger 2 Framework    Bringt zentrale Konfiguration und einfachere Testbarkeit, aber ist mehr Schreibaufwand  View Injection  Mit 3rd-Party-Library \"Butterknife\"  Macht binds anhand von annotierten attributen und methoden", 
            "title": "Dependency Injection"
        }, 
        {
            "location": "/hs16/mge/#data-binding", 
            "text": "Idee: im XML direkt auf Objekte zugreifen, damit es sich von selbst aktualisiert (\"XML ist der Observer\")  layout -Tag als Root-Element, spezifisches Layout darin verschachtelt  Im layout gibt es einen  data  Block mit Variablen-Namen und Typen  Zugriff im Layout mit  @( expression )  Es wird eine Klasse generiert, z.B.  ActivityMainBinding , \u00fcber den das Data-Binding gemacht werden kann  Klasse bietet Setter-Methoden f\u00fcr die Variablen  Auch Listener k\u00f6nnen direkt im layout gebindet werden  Um Views automatisch zu aktualisieren,  ObservableField T  verwenden  Aufpassen, dass nicht zuviel Logik ins XML kommt", 
            "title": "Data Binding"
        }, 
        {
            "location": "/hs16/mge/#teil-wpf", 
            "text": "", 
            "title": "Teil WPF"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-8-einfuhrung-wpf", 
            "text": "XAML  Der \"x\"-Namespace wird sepparat importiert  Ist wie der \"android:\" Namespace in Android  Pixel sind immer device-independent! D.h. sie sehen auf jeder Aufl\u00f6sung gleich gross aus  1 Pixel ist immer 1/96 Inch  Problem: Aliasing, weil kanten nicht mehr direkt auf Pixel liegen m\u00fcssen. Kann mit Properties verhindert werden    Elemente werden zu Klassen \u00fcbersetzt, dessen Attribute zu Properties der Klasse  XAML ist also nur eine Hilfe, Objekte zu instanziieren. Das gleiche k\u00f6nnte man in Code machen  Es gibt auch eine Property Element Syntax, um komplexere Properties zu definieren, z.B. verschachtelte Elemente    Logical Tree: Baum, der man selbst per XAML / Code definiert hat  Visual Tree: Baum, der zur Laufzeit angezeigt wird (also z.B. auch Borders)  Events werden dem Logical Tree herunter gegeben (von Window aus) und vom Element hinauf (Bubbling)  Preview -Events sind Tunneling, also von \"oben\"", 
            "title": "Vorlesung 8 - Einf\u00fchrung WPF"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-9-ui-entwurf", 
            "text": "Zusatzinfos in Appendix-Folien (auch Pr\u00fcfungsstoff!)  Unter  Control  sind intereraktive Elemente,  FrameworkElement  beherbergt alle, aber auch nicht interaktive Elemente wie Bilder  Im Gegensatz zu Android keine  matchParent  o.\u00e4, sondern wird \u00fcber alignment gel\u00f6st, z.B.  stretch  Width / Height gilt immer mit dem Rahmen (wie bei CSS  box-sizing: border-box )  Farbangaben werden vom Compiler in einen Brush umgewandelt  Ein Grid ohne Zellen und Spalten (= 1 Zelle) kann verwendet werden, um darin Elemente anzuordnen. Nacheinander stehende Elemente werden gestacked  Im XAML mit  local:  auf den aktuellen Namespace zugreifen, z.B. auf eigenen Klassen  Dialogfenster werden geschlossen, wenn das Property  DialogResult  gesetzt wird (als Nebeneffekt!)", 
            "title": "Vorlesung 9 - UI Entwurf"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-10-gui-design", 
            "text": "", 
            "title": "Vorlesung 10 - GUI-Design"
        }, 
        {
            "location": "/hs16/mge/#resources", 
            "text": "XAML-Objekte, die in Layout verwendet werden k\u00f6nnen  z.B. Brush, Color, Style, String  Jede Ressource mit einem Key  Werden in dll rein kompiliert  In Application.xaml Datei unter  Application.Resources  Mit  x:Key  Attribut eine ID festlegen  Im layout mit  {StaticResource  resourceID }  ansprechen    Key wird zuerst in Element und Parent-Nodes gesucht, dann bei  Window.Resources , am Schluss bei  Application.Resources  Static Resource: Binding geschieht Compile-Time  Dynamische Resource: Mit  {DynamicResource  resourceID } , l\u00e4sst auch dynamisch geladene Resourcen zu, binding zur Laufzeit. Z.B. um Themes zur Laufzeit zu wechseln  Im Code zugreifen mit  object FindResource(key)  und auf entsprechenden Type casten  Eigenes Resource Dictionary in eigenem File erstellen  Root-Tag  ResourceDictionary  Externe Res-Dicts einbinden in Tag  ResourceDictionary.MergedDictionaries  Resource ist verf\u00fcgbar, sobald sie im XAML definiert wurde (oder aus externem File verlinkt)", 
            "title": "Resources"
        }, 
        {
            "location": "/hs16/mge/#styles", 
            "text": "F\u00fcr ein Steuerelement einen Style festlegen mit mehreren Eigenschaften  Style mit  Style x:Key=\"id\"  in Resource-Dictionary definieren  als statiche Resource beim Steuerelement dem  Style -Property zuweisen  Button.Property  ist nur eine Hilfe f\u00fcr den Compiler. Der Style k\u00f6nnte auch auf ein anderen Control-Typ angewendet werden  Mit  TargetType  kann im Style das Steuerelement angegeben werden. Wenn der Key weggelassen wird, ist er standardm\u00e4ssig auf alle Controls dieses Typs angewendet  Styles k\u00f6nnen vererbt werden  Mit  BasedOn  Property im Style-Tag \"Parent\" definieren    Mit Templates kann das komplette Aussehen eines Controls ver\u00e4ndert werden  Im  Template -Property des Styles festgelegt  Mit  TemplateBinding  die Default-Werte abrufen    Mit  Style.Triggers  z.B. MouseOver-Verhalten festlegen  Visual State Manager \u00fcbersteuert z.T. Style-Triggers  L\u00f6sung: Eigenes Control Template schreiben", 
            "title": "Styles"
        }, 
        {
            "location": "/hs16/mste/", 
            "text": ".NET Technologien\n\n\nPr\u00fcfung\n\n\n\n\nVoraussetzung: Miniprojekt abschliessen\n\n\n120 Min, alle Unterlagen (ausser Musterpr\u00fcfungen)\n\n\n\n\nVorlesung 1 - .NET Grundlagen\n\n\n\n\n.NET-Framework\n\n\nTypen sind im Laufzeitsystem (CLR) nicht wie im Java\n\n\nEine Class Library f\u00fcr alle .NET-Sprachen\n\n\nCompiler erstellen Assemly IL (Intermediate Language) Code, auf der CLR wird er mit einem JIT-Compiler in nativen Code generiert\n\n\nIL l\u00e4uft auf virtueller Stack-Maschine (ohne Register)\n\n\nJIT-Compiler kompiliert erst auf Zielsystem (Platform-Abh\u00e4ngig)\n\n\nJIT\n\n\nEs wird nur der Code \u00fcbersetzt, der ben\u00f6tigt wird, also z.B. beim erstem Methodenaufruf\n\n\nAssembly\n\n\nBlack Box mit definierten Schnittstellen\n\n\nIm Manifest ist metadata\n\n\nEs gibt darin Resourcen und Module\n\n\nPrivate Assembly: Wird direkt \u00fcber Pfad referenziert\n\n\nShared Assembly: Sind im Global Assembly Cache, stehen allen Applikationen zur Verf\u00fcgung\n\n\n\n\nVorlesung 2 - C# Grundlagen (Selbststudium)\n\n\n\n\nMethoden, Klassen, Interfaces, Properties, etc: PascalCase\n\n\nFelder: camelCase\n\n\nunsigned Datentypen: \nuint\n, \nulong\n, \nushort\n\n\n///\n f\u00fcr Dokumentation\n\n\n\"Raw-Strings\": \n@\"string\"\n\n\ndecimal\n Typ f\u00fcr pr\u00e4zise Gleitkommazahlen\n\n\ninternal\n: In diesem Assembly sichtbar. Standard f\u00fcr alle Klassen, interfaces, enums etc.\n\n\nprotected\n: Wie \nprivate\n, aber auch in abgeleiteter Klasse sichtbar\n\n\nAbgeleitete Klassen d\u00fcrfen nicht \"sichtbarer\" sein als der Basistyp\n\n\nNamespaces\n\n\nWie Packages in java\n\n\nEin Namespace ist ein Code block mit \nnamespace {}\n eingeschr\u00e4nkt\n\n\nUnabh\u00e4ngig von Files und Assemblies\n\n\nAlias: \nusing \nalias\n = System.\n...\n\n\nEin File kann mehrere Namespaces beinhalten, ein Namespace kann \u00fcber mehrere Files definiert sein\n\n\n\n\n\n\nEnums\n\n\nenum Days {Monday, Tuesday, ...}\n\n\nImplizit erh\u00e4lt jeder Wert einen Int (von 0 beginnend)\n\n\nExplizit: \nenum Days {Sunday = 10, Monday = 11}\n\n\nWenn bei einem Element Wert nicht explizit angegeben, ist es \nletztes Element + 1\n\n\nMuss nicht zwingend int sein: \nenum Days : byte {Sunday, ...}\n\n\n\n\n\n\nArrays\n\n\nRechteckig Multidimensional: \nnew int[3, 2]\n\n\nJagged (Array in Array): \nnew int[2][]\n\n\n\n\n\n\nStrings\n\n\nist ein Referenztyp \nSystem.String\n\n\nimmutable\n\n\nVerketten mit \n+\n\n\nVergleiche mit \n==\n m\u00f6glich\n\n\nFormatierung: \nstring.format(\"{0}, {1}\", var1, var2)\n\n\nInterpolation: string s = \n$\"var1: {var1}, var2: {var2}\"\n\n\nIntern gibt es String \"Interning\" (=String Pooling in Java)\n\n\n\n\n\n\n\n\nVorlesung 3 - Klassen und Structs\n\n\nStructs\n\n\n\n\nEin Value Type auf dem Stack abgelegt\n\n\nStructs k\u00f6nnen nicht voneinander abgeleitet werden\n\n\nStructs k\u00f6nnen aber Interfaces implementieren\n\n\nInitialisierung von Feldern nicht erlaubt (Bei Klassen schon)\n\n\nKonstruktur \nmuss\n Parameter haben\n\n\nStruct benutzen f\u00fcr einzelnen Wert (z.B. Point), max. 16B, immutable types, sollte nicht h\u00e4ufig geboxed werden\n\n\nStruct sollte entweder kurzlebig sein oder in andere Objekte eingebettet (damit Stack nicht zu gross wird)\n\n\n\n\nKlassen\n\n\n\n\nConst-Wert muss initialisiert werden (und zur Compilezeit berechenbar)\n\n\nRead-only Feld \nreadonly\n muss nicht zur Compilezeit berechenbar sein aber auch nicht initialisiert. Darf sp\u00e4ter nicht mehr ver\u00e4ndert werden\n\n\nNested Types als innere Klassen\n\n\n\u00c4ussere Klasse hat nur Zugriff auf public Member der inneren Klasse\n\n\ninnere Klasse kann auch auf private Members der \u00e4usseren Klasse zugreifen\n\n\nFremde Klassen haben auch Zugriff auf public Member der inneren Klasse\n\n\nMit \nstatic using \nstatic Class\n k\u00f6nnen Funktionen von static Classes direkt verwendet werden\n\n\n\n\n\n\nMethoden-Parameter\n\n\nValue-Types werden normalerweise by-value \u00fcbergeben\n\n\nMit \nref\n keyword den parameter by-reference \u00fcbergeben. Beim Aufruf muss auch \nref\n angegeben werden, sonst wird eine Referenz auf eine Kopie \u00fcbergeben\n\n\nout\n: Wie \nref\n, aber f\u00fcr R\u00fcckgabe von Werten. Das Argument darf beim Aufruf aber noch nicht initialisiert sein.\n\n\nmit \nparams\n in der Funktionsdefinition k\u00f6nnen n weitere Argumente verwendet werden beim Aufruf, die dann in einem Array landen, das mit \nparams\n gekennzeichnet wurde\n\n\noptionale Parameter: \nvoid fn(int arg1 int arg2 = 0)\n. Optionale Parameter m\u00fcssen am Ende der Liste stehen!\n\n\nNamed Parameter bei \u00dcbergabe von optionalen Parameter: \nfn(2, arg2: 3)\n\n\n\n\n\n\nProperties\n\n\nWrapper f\u00fcr Getter / Setter\n\n\nSieht aus wie public field auf Klasse\n\n\nIm Setter enth\u00e4lt \nvalue\n den zuzuweisenden Wert\n\n\nProperty-namen in PascalCase\n\n\nDer Compiler wandelt Getter und Setter in normale Methoden um, sie werden als Property markiert\n\n\nGetter oder Setter k\u00f6nnen weggelassen werden, um read-only bzw. write-only Properties zu erstellen\n\n\nSichtbarkeiten von Getter und Setter k\u00f6nnen ver\u00e4ndert werden\n\n\nAuto-Properties\n\n\nProperties mit einfachem getter und Setter, das Backing field wird auch automatisch generiert\n\n\npublic int Length {get; set;}\n\n\nSeit C# 6.0 kann der Setter weggelassen werden, der Wert muss aber danach mit \n=\n zugewiesen werden (oder im Konstruktor)\n\n\n\n\n\n\nObjekt Instanzierung\n\n\nProperties k\u00f6nnen direkt initialisiert werden: \nMyClass mc = new MyClass() { Length = 1, Width: 2 };\n\n\n\n\n\n\n\n\n\n\nIndexer\n\n\n\u00c4hnlich wie Properties kann eine Klassen-Instanz indexiert werden: \nMyClass mc = new MyClass(); mc[0]; mc[1]...\n\n\nDefinition in Klasse: \npublic string this[int index] { get {...} set {...}};\n\n\nAuch mehrdimensionale Indices m\u00f6glich\n\n\n\n\n\n\nKonstruktoren\n\n\nLeerer Default-Konstruktor wird automatisch generiert (aber nur, falls keiner definiert wurde!)\n\n\nStatische Konstruktoren werden nur 1x aufgerufen\n\n\nZwingend ohne Parameter\n\n\nWird bei erster Instanzierung des Typs aufgerufen, danach nicht mehr\n\n\n\n\n\n\nAufruf anderer Konstruktoren mit \nthis\n, von Basis-Klassen mit \nbase\n: \npublic myClass() : this(0, 0) {...}\n\n\n\n\n\n\nDestruktoren\n\n\n~MyClass() {...}\n\n\nWird vom GC aufgerufen\n\n\n\n\n\n\nEvtl. Pr\u00fcfungsaufgabe zu Initialisierungs-Reihenfolge\n\n\n\n\nVorlesung 4 - Vererbung (Selbststudium)\n\n\n\n\nStructs sind nicht vererbbar, k\u00f6nnen aber interfaces implementieren\n\n\nPr\u00fcfen (\"instanceof\"): \nobj is T\n\n\nExplizit casten\n\n\n(T) obj\n, bei Fehler zur RuntimeInvalidCastException\n\n\nobj as T\n, bei Fehler zur Runtime \nnull\n\n\n\n\n\n\nMethode muss \nvirtual\n markiert werden, damit sie \u00fcberschrieben werden kann\n\n\n\u00fcberschreiben mit \npublic virtual void method1()...\n\n\nPer default sind Methoden nicht \u00fcberschreibbar und \u00fcberschreiben nicht implizit eine virtual Methode\n\n\noverride\n Methoden sind aus Subklassen weiter \u00fcberschreibbar\n\n\nabstract\n-Methoden sind implizit \nvirtual\n\n\nWenn eine Methode aus der Basisklass neu definiert wird (nicht mit \noverride\n), \u00fcberdeckt sie die Methode der Basisklasse\n\n\nMit \npublic new void ...\n markieren, sonst gibt es eine Compilerwarnung\n\n\nDies unterbricht Dynamic binding. Von der Base-Klasse her wird die letzte \u00fcberschriebene genommen\n\n\n\n\n\n\n\n\nBase b1 = new SubSub();\nb1.J();\n// Base.J()\n((Sub)b1).J();\n// Sub.J()\n((SubSub)b1).J();\n// SubSub.J()\n\n\n\n\n\n\nsealed\n Classes verhindern, abgeleitet zu werden\n\n\n\u00fcberschriebene Methoden, die \nseal\n verwenden, k\u00f6nnen von einer weiteren Subklasse nicht mehr \u00fcberschrieben werden \n\n\nMit \nnew\n k\u00f6nnen sie aber weiterhin \u00fcberdeckt werden\n\n\nInterface Name-Clash\n\n\nWenn Signatur und R\u00fcckgabetyp identisch: Eine Implementierung f\u00fcr beide Interfaces\n\n\nSonst Methode f\u00fcr jedes Interface explizit implementieren mit \niface\n.\nmethod\n\n\nEs kann auch eine Default-Implementation verwendet werden und f\u00fcr bestimmte Interfaces eine explizite\n\n\n\n\n\n\nGarbage Collection\n\n\n~MyClass() {}\n ist Destruktor\n\n\nSyntactic Sugar f\u00fcr \nFinalize()\n\n\n\n\n\n\nFinalize wird vom GC aufgerufen, sollte m\u00f6glichst schnell sein\n\n\nIDisposable\n implementieren, um Freigabe selbst zu implementieren\n\n\nMit \nusing () {...}\n wird am Ende \nDispose()\n aufgerufen\n\n\nDispose pattern\n\n\n\n\n\n\n\n\n~DataAccess()\n{ Dispose(false); }\npublic void Dispose()\n{\n    Dispose(true);\n    System.GC.SuppressFinalize(this);\n}\nprotected virtual void Dispose(bool disposing)\n{\n    if (disposing)\n    {\n        // Dispose managed ressources\n        if (connection != null)\n        { connection.Dispose(); }\n    }\n    // Dispose unmanaged resources\n    }\n\n\n\n\n\n\nSo werden managed ressourcen von Dispose() aufgerufen, und unmanaged vom Finalize / Destruktor\n\n\n\n\n\n\nVorlesung 5 - Delegates \n Events\n\n\nDelegates\n\n\n\n\nTypsichere function-Pointer\n\n\nRerence-Type, um Methoden als Parameter zu \u00fcbergeben\n\n\nDelegate kann 0 bis n Methoden beinhalten\n\n\nDefinition eines Delegates ist die Deklaration eines neuen Reference-Types (normalerweise ausserhalb von Klassen definieren!)\n\n\nInitialisieren mit \nnew \ndelegate-name\n(\nmethod-name\n)\n\n\nKurzform: Direkt Methode zuweisen: \nvar\n = \nmethod-name\n\n\n\n\n\n\nDelegate-Instanz kann ausgef\u00fchrt werden mit \n()\n\n\nSignatur von Methoden wird in Delegate-Definition festgelegt\n\n\nJede Methode mit richtiger Signatur kann zu Delegate zugewiesen werden\n\n\nMethode kann instanzbezogen sein: \nobj.Method\n, \nobj\n ist eine Instanz\n\n\nEs sollte vor dem Aufruf gepr\u00fcft werden, ob das Delegate != null ist\n\n\nAb C# 6.0 \ndelegateVar?.Invoke(params)\n\n\n\n\n\n\n\n\nMulticast-Delegates\n\n\n\n\nJedem Delegate k\u00f6nnen mehrere Methoden hinterlegt werden\n\n\nZuweisung mit \n+=\n und \n-=\n\n\nBeim Ausf\u00fchren werden die Methoden sequentiell ausgef\u00fchrt\n\n\nIm Hintergrund baut der compiler eine Klasse, die von \nMulticastDelegate\n erbt\n\n\nWenn mehrere Delegate-Methoden einen R\u00fcckgabewert geben, wird der letzte genommen\n\n\nAnwendung z.B. bei \nList.Sort(Comparison\nT\n)\n\n\n\n\nEvents\n\n\n\n\nCompiler-Feature f\u00fcr Delegates\n\n\nBei Instanzierung von Delegate \npublic event \nDelegate\n \nvar\n verwenden\n\n\nDelegate wird intern private deklariert\n\n\ngeneriert Methoden f\u00fcr Subscribe und Unsubscribe\n\n\nObservers anmelden mit += und -=\n\n\nVerh\u00e4lt sich gleich, als ob man einfach das Delegate-Feld in der Klasse public macht, aber von aussen kann das Delegate nicht ausgef\u00fchrt werden (w\u00e4re sehr schlecht)\n\n\nBest Practice:\n\n\npublic delegate void AnyHandler(object sender, AnyEventArgs e);\n\n\nAnyEventArgs\n ist eine Subklasse von \nEventArgs\n\n\nGrund: Wenn z.B. Library erweitert wird, \u00e4ndert sich Delegate-Signatur nicht, es wird nur die EventArgs-Klasse erweitert. Der Client-Code funktioniert weiterhin\n\n\n\n\n\n\n\n\nAnonyme Methoden\n\n\nlist.ForEach(delegate(int i)\n    { Console.WriteLine(i); }\n);\n\n\n\n\n\n\nVorlesung 6 - Generics (Selbststudium)\n\n\n\n\nGenerische Parameter: \nT\n, bei mehreren: \nT1\n, \nT2\n, etc.\n\n\nType Constraints\n\n\nclass MyClass\nT\n where T : \nconstraint\n\n\n\n\n\n\n\n\n\n\nVorlesung 7 - Iteratoren \n Exceptions\n\n\nIteratoren\n\n\n\n\nFor-Each-Loop\n\n\nType muss \nIEnumerable\n oder \nIEnumerable\nT\n implementieren\n\n\nOder\n einer Implementation von IEnumberable \u00e4hneln, d.h. muss GeEnumerator() haben, das ein Enumerator zur\u00fcckgibt, Enumerator muss MoveNext() haben und das Property Current\n\n\nCompiler baut den Loop um in While-Loop mit dem Enumerator\n\n\n\n\n\n\nWenn man mit eigener Klasse IEnumberable\n implementiert, muss auch die nicht-generische Variante implementiert werden\n\n\nCollection darf nicht ver\u00e4nder werden w\u00e4hrend der Iteration (wie Java)\n\n\n\n\nVereinfachung mit \nyield\n\n\n\n\nIn der \nGetEnumerator()\n Methode mindestens ein \nyield return\n statement verwenden\n\n\nBei jeder Iteration (\nMoveNext()\n) wird das n\u00e4chste \nyield\n Statement ausgef\u00fchrt (genauer das Statement \nnach\n dem letzten \nyield\n)\n\n\nImplementation des Interfaces optional (siehe oben)\n\n\nCompiler erstellt eine innere Klasse mit komplizierter State-Machine (langsamer als eigene Implementierung)\n\n\nEs kann auch ein spezifischer Iterator mit R\u00fcckgabetyp \nIEnumberable\nT\n definiert werden, der \nyield\n verwendet\n\n\n\n\ncs\nMyIntList list = new MyIntList();\nforeach (int elem in list.Range(2, 7))\n{\n    /* ... */\n}\npublic IEnumerable\nint\n Range(int from, int to) {\nfor (int i = from; i \n to; i++)\n    yield return data[i];\n}\n\n\n\n\n\n\n\n\nVorlesung 8 - LINQ (Selbststudium)\n\n\n\n\nLINQ ist reine Compiler-Technologie\n\n\nAuf Objektstruktur\n\n\nQuery Syntax wird vom Compiler in Lambdas umgewandelt\n\n\nDie Parameter der Lambdas m\u00fcssen implizit in den Delegate-Parameter konvertierbar sein, sonst m\u00fcssen sie explizit angegeben werden\n\n\nLINQ f\u00fcgt IENumerable extension Methods hinzu\n\n\nNormalerweise deffered evaluation. Wenn aber r\u00fcckgabewert kein IEnumerable ist, wird die \"query\" direkt ausgef\u00fchrt (z.B. \nToList()\n, \nCount()\n, \nSum()\n, etc)\n\n\nIm Lambdas kann man auf Variablen ausserhalb des Scopes zugreifen und diese ver\u00e4ndern (m\u00fcssen nicht final sein wie in Java)\n\n\nC# 6.0 Feature: Expressoin-Bodied Methods\n\n\nMethode mit einem Statement: \npublic void Print() =\n Console.WriteLine(\"Hello\");\n\n\nRead-Only Properties: \npublic int MyProperty =\n 0;\n\n\n\n\n\n\nCollectoin Initializer: \nvar l1 = new List\nint\n {1, 2};\n\n\nGeht seit C# 6.0 auch mit Dictionaries\n\n\n\n\n\n\nAnonyme Types werden vorallem mit LINQ verwendet\n\n\nZuweisung nur zu Variable mit \nvar\n deklariert\n\n\n\n\n\n\n\n\n\n\nVorlesung 9 - Entity Framework (1) (Selbststudium)\n\n\n\n\nAnsatz Code First: Code schreiben, der dann zur Laufzeit zu Datenbank umgewandelt wird (falls nicht existierend)\n\n\nAnsatz Model First: Modell designen, wird in Code umgesetzt\n\n\nDSL: Domain specific language, eine Sprache, Objekte und ihre Assoziationen zu beschreiben\n\n\nCSDL (Conceptual Schema Definition Language) \nist eine DSL\n f\u00fcr .NET\n\n\nConceptual Model wird vom Framework in Logical Model gemapped\n\n\nEntity Types k\u00f6nnen voneinander erben (wird vom OR-Mapper entsprechend in relatione Objekte abgebildet)\n\n\nComplex Types: Mehrere Properties auf relationaler Ebene k\u00f6nnen auf dem Schema in ein Complex-Type zusammengefasst werden. Auf CLR-Ebene sind diese dann eigene Types, auf der Datenbank nur Spalten der entsprechenden Tabelle\n\n\nBei Code first kann man die Mappings auf 3 verschiedene Arten definieren\n\n\nBy Convention\n: Es gibt conventions, wie die Namen von Properties gemapped werden, z.B. das \"Id\" Property als Primary Key\n\n\nBy Attributes\n: Den Properties und Klassen Attributes geben, z.B. \n[Column(\"name\")]\n um Namen zu \u00fcberschreiben, \n[Required]\n f\u00fcr not-null\n\n\nMit \nDbModelBuilder\n: F\u00fcr jede Klasse ein \nDbModelBuilder\n erstellen und mit Methoden darauf (\nHasKey()\n f\u00fcr Primary key) die Mappings definiert. Statt Annotationen\n\n\n\n\n\n\nSeed Database: Von einer der Klassen \nDropCreateDataBaseAlways\nmyDb\n etc. erben und \nSeed()\n \u00fcberschreiben. Im eigenen Context dann \nDatabase.SetInitializer(new MyDbSeed())\n setzen", 
            "title": "MsTe"
        }, 
        {
            "location": "/hs16/mste/#net-technologien", 
            "text": "", 
            "title": ".NET Technologien"
        }, 
        {
            "location": "/hs16/mste/#prufung", 
            "text": "Voraussetzung: Miniprojekt abschliessen  120 Min, alle Unterlagen (ausser Musterpr\u00fcfungen)", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-1-net-grundlagen", 
            "text": ".NET-Framework  Typen sind im Laufzeitsystem (CLR) nicht wie im Java  Eine Class Library f\u00fcr alle .NET-Sprachen  Compiler erstellen Assemly IL (Intermediate Language) Code, auf der CLR wird er mit einem JIT-Compiler in nativen Code generiert  IL l\u00e4uft auf virtueller Stack-Maschine (ohne Register)  JIT-Compiler kompiliert erst auf Zielsystem (Platform-Abh\u00e4ngig)  JIT  Es wird nur der Code \u00fcbersetzt, der ben\u00f6tigt wird, also z.B. beim erstem Methodenaufruf  Assembly  Black Box mit definierten Schnittstellen  Im Manifest ist metadata  Es gibt darin Resourcen und Module  Private Assembly: Wird direkt \u00fcber Pfad referenziert  Shared Assembly: Sind im Global Assembly Cache, stehen allen Applikationen zur Verf\u00fcgung", 
            "title": "Vorlesung 1 - .NET Grundlagen"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-2-c-grundlagen-selbststudium", 
            "text": "Methoden, Klassen, Interfaces, Properties, etc: PascalCase  Felder: camelCase  unsigned Datentypen:  uint ,  ulong ,  ushort  ///  f\u00fcr Dokumentation  \"Raw-Strings\":  @\"string\"  decimal  Typ f\u00fcr pr\u00e4zise Gleitkommazahlen  internal : In diesem Assembly sichtbar. Standard f\u00fcr alle Klassen, interfaces, enums etc.  protected : Wie  private , aber auch in abgeleiteter Klasse sichtbar  Abgeleitete Klassen d\u00fcrfen nicht \"sichtbarer\" sein als der Basistyp  Namespaces  Wie Packages in java  Ein Namespace ist ein Code block mit  namespace {}  eingeschr\u00e4nkt  Unabh\u00e4ngig von Files und Assemblies  Alias:  using  alias  = System. ...  Ein File kann mehrere Namespaces beinhalten, ein Namespace kann \u00fcber mehrere Files definiert sein    Enums  enum Days {Monday, Tuesday, ...}  Implizit erh\u00e4lt jeder Wert einen Int (von 0 beginnend)  Explizit:  enum Days {Sunday = 10, Monday = 11}  Wenn bei einem Element Wert nicht explizit angegeben, ist es  letztes Element + 1  Muss nicht zwingend int sein:  enum Days : byte {Sunday, ...}    Arrays  Rechteckig Multidimensional:  new int[3, 2]  Jagged (Array in Array):  new int[2][]    Strings  ist ein Referenztyp  System.String  immutable  Verketten mit  +  Vergleiche mit  ==  m\u00f6glich  Formatierung:  string.format(\"{0}, {1}\", var1, var2)  Interpolation: string s =  $\"var1: {var1}, var2: {var2}\"  Intern gibt es String \"Interning\" (=String Pooling in Java)", 
            "title": "Vorlesung 2 - C# Grundlagen (Selbststudium)"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-3-klassen-und-structs", 
            "text": "", 
            "title": "Vorlesung 3 - Klassen und Structs"
        }, 
        {
            "location": "/hs16/mste/#structs", 
            "text": "Ein Value Type auf dem Stack abgelegt  Structs k\u00f6nnen nicht voneinander abgeleitet werden  Structs k\u00f6nnen aber Interfaces implementieren  Initialisierung von Feldern nicht erlaubt (Bei Klassen schon)  Konstruktur  muss  Parameter haben  Struct benutzen f\u00fcr einzelnen Wert (z.B. Point), max. 16B, immutable types, sollte nicht h\u00e4ufig geboxed werden  Struct sollte entweder kurzlebig sein oder in andere Objekte eingebettet (damit Stack nicht zu gross wird)", 
            "title": "Structs"
        }, 
        {
            "location": "/hs16/mste/#klassen", 
            "text": "Const-Wert muss initialisiert werden (und zur Compilezeit berechenbar)  Read-only Feld  readonly  muss nicht zur Compilezeit berechenbar sein aber auch nicht initialisiert. Darf sp\u00e4ter nicht mehr ver\u00e4ndert werden  Nested Types als innere Klassen  \u00c4ussere Klasse hat nur Zugriff auf public Member der inneren Klasse  innere Klasse kann auch auf private Members der \u00e4usseren Klasse zugreifen  Fremde Klassen haben auch Zugriff auf public Member der inneren Klasse  Mit  static using  static Class  k\u00f6nnen Funktionen von static Classes direkt verwendet werden    Methoden-Parameter  Value-Types werden normalerweise by-value \u00fcbergeben  Mit  ref  keyword den parameter by-reference \u00fcbergeben. Beim Aufruf muss auch  ref  angegeben werden, sonst wird eine Referenz auf eine Kopie \u00fcbergeben  out : Wie  ref , aber f\u00fcr R\u00fcckgabe von Werten. Das Argument darf beim Aufruf aber noch nicht initialisiert sein.  mit  params  in der Funktionsdefinition k\u00f6nnen n weitere Argumente verwendet werden beim Aufruf, die dann in einem Array landen, das mit  params  gekennzeichnet wurde  optionale Parameter:  void fn(int arg1 int arg2 = 0) . Optionale Parameter m\u00fcssen am Ende der Liste stehen!  Named Parameter bei \u00dcbergabe von optionalen Parameter:  fn(2, arg2: 3)    Properties  Wrapper f\u00fcr Getter / Setter  Sieht aus wie public field auf Klasse  Im Setter enth\u00e4lt  value  den zuzuweisenden Wert  Property-namen in PascalCase  Der Compiler wandelt Getter und Setter in normale Methoden um, sie werden als Property markiert  Getter oder Setter k\u00f6nnen weggelassen werden, um read-only bzw. write-only Properties zu erstellen  Sichtbarkeiten von Getter und Setter k\u00f6nnen ver\u00e4ndert werden  Auto-Properties  Properties mit einfachem getter und Setter, das Backing field wird auch automatisch generiert  public int Length {get; set;}  Seit C# 6.0 kann der Setter weggelassen werden, der Wert muss aber danach mit  =  zugewiesen werden (oder im Konstruktor)    Objekt Instanzierung  Properties k\u00f6nnen direkt initialisiert werden:  MyClass mc = new MyClass() { Length = 1, Width: 2 };      Indexer  \u00c4hnlich wie Properties kann eine Klassen-Instanz indexiert werden:  MyClass mc = new MyClass(); mc[0]; mc[1]...  Definition in Klasse:  public string this[int index] { get {...} set {...}};  Auch mehrdimensionale Indices m\u00f6glich    Konstruktoren  Leerer Default-Konstruktor wird automatisch generiert (aber nur, falls keiner definiert wurde!)  Statische Konstruktoren werden nur 1x aufgerufen  Zwingend ohne Parameter  Wird bei erster Instanzierung des Typs aufgerufen, danach nicht mehr    Aufruf anderer Konstruktoren mit  this , von Basis-Klassen mit  base :  public myClass() : this(0, 0) {...}    Destruktoren  ~MyClass() {...}  Wird vom GC aufgerufen    Evtl. Pr\u00fcfungsaufgabe zu Initialisierungs-Reihenfolge", 
            "title": "Klassen"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-4-vererbung-selbststudium", 
            "text": "Structs sind nicht vererbbar, k\u00f6nnen aber interfaces implementieren  Pr\u00fcfen (\"instanceof\"):  obj is T  Explizit casten  (T) obj , bei Fehler zur RuntimeInvalidCastException  obj as T , bei Fehler zur Runtime  null    Methode muss  virtual  markiert werden, damit sie \u00fcberschrieben werden kann  \u00fcberschreiben mit  public virtual void method1()...  Per default sind Methoden nicht \u00fcberschreibbar und \u00fcberschreiben nicht implizit eine virtual Methode  override  Methoden sind aus Subklassen weiter \u00fcberschreibbar  abstract -Methoden sind implizit  virtual  Wenn eine Methode aus der Basisklass neu definiert wird (nicht mit  override ), \u00fcberdeckt sie die Methode der Basisklasse  Mit  public new void ...  markieren, sonst gibt es eine Compilerwarnung  Dies unterbricht Dynamic binding. Von der Base-Klasse her wird die letzte \u00fcberschriebene genommen     Base b1 = new SubSub();\nb1.J();\n// Base.J()\n((Sub)b1).J();\n// Sub.J()\n((SubSub)b1).J();\n// SubSub.J()   sealed  Classes verhindern, abgeleitet zu werden  \u00fcberschriebene Methoden, die  seal  verwenden, k\u00f6nnen von einer weiteren Subklasse nicht mehr \u00fcberschrieben werden   Mit  new  k\u00f6nnen sie aber weiterhin \u00fcberdeckt werden  Interface Name-Clash  Wenn Signatur und R\u00fcckgabetyp identisch: Eine Implementierung f\u00fcr beide Interfaces  Sonst Methode f\u00fcr jedes Interface explizit implementieren mit  iface . method  Es kann auch eine Default-Implementation verwendet werden und f\u00fcr bestimmte Interfaces eine explizite    Garbage Collection  ~MyClass() {}  ist Destruktor  Syntactic Sugar f\u00fcr  Finalize()    Finalize wird vom GC aufgerufen, sollte m\u00f6glichst schnell sein  IDisposable  implementieren, um Freigabe selbst zu implementieren  Mit  using () {...}  wird am Ende  Dispose()  aufgerufen  Dispose pattern     ~DataAccess()\n{ Dispose(false); }\npublic void Dispose()\n{\n    Dispose(true);\n    System.GC.SuppressFinalize(this);\n}\nprotected virtual void Dispose(bool disposing)\n{\n    if (disposing)\n    {\n        // Dispose managed ressources\n        if (connection != null)\n        { connection.Dispose(); }\n    }\n    // Dispose unmanaged resources\n    }   So werden managed ressourcen von Dispose() aufgerufen, und unmanaged vom Finalize / Destruktor", 
            "title": "Vorlesung 4 - Vererbung (Selbststudium)"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-5-delegates-events", 
            "text": "", 
            "title": "Vorlesung 5 - Delegates &amp; Events"
        }, 
        {
            "location": "/hs16/mste/#delegates", 
            "text": "Typsichere function-Pointer  Rerence-Type, um Methoden als Parameter zu \u00fcbergeben  Delegate kann 0 bis n Methoden beinhalten  Definition eines Delegates ist die Deklaration eines neuen Reference-Types (normalerweise ausserhalb von Klassen definieren!)  Initialisieren mit  new  delegate-name ( method-name )  Kurzform: Direkt Methode zuweisen:  var  =  method-name    Delegate-Instanz kann ausgef\u00fchrt werden mit  ()  Signatur von Methoden wird in Delegate-Definition festgelegt  Jede Methode mit richtiger Signatur kann zu Delegate zugewiesen werden  Methode kann instanzbezogen sein:  obj.Method ,  obj  ist eine Instanz  Es sollte vor dem Aufruf gepr\u00fcft werden, ob das Delegate != null ist  Ab C# 6.0  delegateVar?.Invoke(params)", 
            "title": "Delegates"
        }, 
        {
            "location": "/hs16/mste/#multicast-delegates", 
            "text": "Jedem Delegate k\u00f6nnen mehrere Methoden hinterlegt werden  Zuweisung mit  +=  und  -=  Beim Ausf\u00fchren werden die Methoden sequentiell ausgef\u00fchrt  Im Hintergrund baut der compiler eine Klasse, die von  MulticastDelegate  erbt  Wenn mehrere Delegate-Methoden einen R\u00fcckgabewert geben, wird der letzte genommen  Anwendung z.B. bei  List.Sort(Comparison T )", 
            "title": "Multicast-Delegates"
        }, 
        {
            "location": "/hs16/mste/#events", 
            "text": "Compiler-Feature f\u00fcr Delegates  Bei Instanzierung von Delegate  public event  Delegate   var  verwenden  Delegate wird intern private deklariert  generiert Methoden f\u00fcr Subscribe und Unsubscribe  Observers anmelden mit += und -=  Verh\u00e4lt sich gleich, als ob man einfach das Delegate-Feld in der Klasse public macht, aber von aussen kann das Delegate nicht ausgef\u00fchrt werden (w\u00e4re sehr schlecht)  Best Practice:  public delegate void AnyHandler(object sender, AnyEventArgs e);  AnyEventArgs  ist eine Subklasse von  EventArgs  Grund: Wenn z.B. Library erweitert wird, \u00e4ndert sich Delegate-Signatur nicht, es wird nur die EventArgs-Klasse erweitert. Der Client-Code funktioniert weiterhin", 
            "title": "Events"
        }, 
        {
            "location": "/hs16/mste/#anonyme-methoden", 
            "text": "list.ForEach(delegate(int i)\n    { Console.WriteLine(i); }\n);", 
            "title": "Anonyme Methoden"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-6-generics-selbststudium", 
            "text": "Generische Parameter:  T , bei mehreren:  T1 ,  T2 , etc.  Type Constraints  class MyClass T  where T :  constraint", 
            "title": "Vorlesung 6 - Generics (Selbststudium)"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-7-iteratoren-exceptions", 
            "text": "", 
            "title": "Vorlesung 7 - Iteratoren &amp; Exceptions"
        }, 
        {
            "location": "/hs16/mste/#iteratoren", 
            "text": "For-Each-Loop  Type muss  IEnumerable  oder  IEnumerable T  implementieren  Oder  einer Implementation von IEnumberable \u00e4hneln, d.h. muss GeEnumerator() haben, das ein Enumerator zur\u00fcckgibt, Enumerator muss MoveNext() haben und das Property Current  Compiler baut den Loop um in While-Loop mit dem Enumerator    Wenn man mit eigener Klasse IEnumberable  implementiert, muss auch die nicht-generische Variante implementiert werden  Collection darf nicht ver\u00e4nder werden w\u00e4hrend der Iteration (wie Java)   Vereinfachung mit  yield   In der  GetEnumerator()  Methode mindestens ein  yield return  statement verwenden  Bei jeder Iteration ( MoveNext() ) wird das n\u00e4chste  yield  Statement ausgef\u00fchrt (genauer das Statement  nach  dem letzten  yield )  Implementation des Interfaces optional (siehe oben)  Compiler erstellt eine innere Klasse mit komplizierter State-Machine (langsamer als eigene Implementierung)  Es kann auch ein spezifischer Iterator mit R\u00fcckgabetyp  IEnumberable T  definiert werden, der  yield  verwendet   cs\nMyIntList list = new MyIntList();\nforeach (int elem in list.Range(2, 7))\n{\n    /* ... */\n}\npublic IEnumerable int  Range(int from, int to) {\nfor (int i = from; i   to; i++)\n    yield return data[i];\n}", 
            "title": "Iteratoren"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-8-linq-selbststudium", 
            "text": "LINQ ist reine Compiler-Technologie  Auf Objektstruktur  Query Syntax wird vom Compiler in Lambdas umgewandelt  Die Parameter der Lambdas m\u00fcssen implizit in den Delegate-Parameter konvertierbar sein, sonst m\u00fcssen sie explizit angegeben werden  LINQ f\u00fcgt IENumerable extension Methods hinzu  Normalerweise deffered evaluation. Wenn aber r\u00fcckgabewert kein IEnumerable ist, wird die \"query\" direkt ausgef\u00fchrt (z.B.  ToList() ,  Count() ,  Sum() , etc)  Im Lambdas kann man auf Variablen ausserhalb des Scopes zugreifen und diese ver\u00e4ndern (m\u00fcssen nicht final sein wie in Java)  C# 6.0 Feature: Expressoin-Bodied Methods  Methode mit einem Statement:  public void Print() =  Console.WriteLine(\"Hello\");  Read-Only Properties:  public int MyProperty =  0;    Collectoin Initializer:  var l1 = new List int  {1, 2};  Geht seit C# 6.0 auch mit Dictionaries    Anonyme Types werden vorallem mit LINQ verwendet  Zuweisung nur zu Variable mit  var  deklariert", 
            "title": "Vorlesung 8 - LINQ (Selbststudium)"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-9-entity-framework-1-selbststudium", 
            "text": "Ansatz Code First: Code schreiben, der dann zur Laufzeit zu Datenbank umgewandelt wird (falls nicht existierend)  Ansatz Model First: Modell designen, wird in Code umgesetzt  DSL: Domain specific language, eine Sprache, Objekte und ihre Assoziationen zu beschreiben  CSDL (Conceptual Schema Definition Language)  ist eine DSL  f\u00fcr .NET  Conceptual Model wird vom Framework in Logical Model gemapped  Entity Types k\u00f6nnen voneinander erben (wird vom OR-Mapper entsprechend in relatione Objekte abgebildet)  Complex Types: Mehrere Properties auf relationaler Ebene k\u00f6nnen auf dem Schema in ein Complex-Type zusammengefasst werden. Auf CLR-Ebene sind diese dann eigene Types, auf der Datenbank nur Spalten der entsprechenden Tabelle  Bei Code first kann man die Mappings auf 3 verschiedene Arten definieren  By Convention : Es gibt conventions, wie die Namen von Properties gemapped werden, z.B. das \"Id\" Property als Primary Key  By Attributes : Den Properties und Klassen Attributes geben, z.B.  [Column(\"name\")]  um Namen zu \u00fcberschreiben,  [Required]  f\u00fcr not-null  Mit  DbModelBuilder : F\u00fcr jede Klasse ein  DbModelBuilder  erstellen und mit Methoden darauf ( HasKey()  f\u00fcr Primary key) die Mappings definiert. Statt Annotationen    Seed Database: Von einer der Klassen  DropCreateDataBaseAlways myDb  etc. erben und  Seed()  \u00fcberschreiben. Im eigenen Context dann  Database.SetInitializer(new MyDbSeed())  setzen", 
            "title": "Vorlesung 9 - Entity Framework (1) (Selbststudium)"
        }, 
        {
            "location": "/hs16/se1/", 
            "text": "Software Engineering 1\n\n\nAllgemein\n\n\n\n\nPr\u00fcfung closed book\n\n\nAbgabe von 3 von 4 Testat-\u00dcbungen\n\n\nSelbststudium: Jede Woche in Buch lesen, nach Lektionsplan sheet\n\n\n\n\nVorlesung 1\n\n\n\n\nCa. 70% aller IT-Projekte laufen schief\n\n\nErwartungskonflikt Kunde - Programmierer, ...\n\n\nOOA nach Larman: Statisches Domain Model ohne Funktionen, Black-Box Sequenzdiagramm\n\n\n\"Klassisch\": Statisches Model mit Funktionen, White-Box Sequzendiagramms\n\n\n\n\n\n\nVorlesung 2 - Domain-Modellierung\n\n\n\n\nDesign-Modell zeigt eine Realisation, ein Domain-Modell auch Dinge, die nicht realisiert werden (Domain-Modell ist Inspiration f\u00fcr Design-Modell)\n\n\nEntit\u00e4ten (Konzepte) finden: \n\n\nKeine Implementations-Konzepte verwenen (z.B. \"Datenbank\", \"Webserver\", etc.)\n\n\nKeine abgeleiteten Konzepte (Dinge, die durch andere Dinge berechnet werden kann, z.B. ein Logfile)\n\n\n\n\n\n\nSemantic Gap: Unterschied zwischen realer Welt bzw. Domain Model und Design Model bzw. Code. Diese Gap ist bei OO-Design sehr klein, z.B. bei Assembler sehr gross\n\n\nn-m-Assoziationen sind im Domain Modell erlaubt, aber oft nich richtig, da die Assoziation eigene Attribute hat\n\n\nSobald ein Attribut eine gewisse Komplexit\u00e4t hat, in eigenes Konzept auslagern (im Zweifelsfall Konzept!)\n\n\nAbstrakte Superclasses werden \nkursiv\n geschrieben (= Es gibt keine Instanzen der abstrakten Klasse)\n\n\n\n\n\n\nVorlesung 4 - Requirements\n\n\nEinf\u00fchrung\n\n\n\n\nRequirements Modulanmeldung HSR\n\n\nFunktional\n\n\nTemporale und personelle Zugangsbeschr\u00e4nkungen\n\n\nAlle Module m\u00fcssen abgebildet sein\n\n\nBenutzer muss sich f\u00fcr Module an- und abmelden k\u00f6nnen\n\n\n\u00dcbersichtliche Strukturierung\n\n\nEigene Daten und Daten anderer Studenten k\u00f6nnen eingesehen werden\n\n\nVoraussetzungen f\u00fcr Module pr\u00fcfen\n\n\n\n\n\n\nNicht-Funktional (Qualit\u00e4t / Wie gut?)\n\n\nSystem muss sicher sein\n\n\nAntwortzeit 500ms\n\n\nUmgebung / Programmiersprache\n\n\n\n\n\n\nProzess-Anforderungen\n\n\nKostensch\u00e4tzung\n\n\n\n\n\n\n\n\n\n\nProbleme: Ablauf? Machbarkeit? Priorit\u00e4ten?\n\n\nAnforderungen aus \nSicht der Benutzer\n erstellen\n\n\n30% aller Probleme in SE sind wegen Requirement Specification\n\n\nUmfassendes SRS am Anfang ist problematisch!\n\n\nAnforderungen \u00e4ndern sich, daher iterativ vorgehen -\n Requirements Management\n\n\n\n\nUse-Cases\n\n\n\n\nUse-Case ist \ntextuelle\n Beschreibung \"Actor tut das, dann macht das System ...\"\n\n\nGeschichte aus Benutzersicht\n\n\nAktor kann auch externes System sein (als Box dargestellt)\n\n\n\n\n\n\nVorlesung 5 - NF, SRS, Modelling Behaviour\n\n\n\n\nNichtfunktionale Anforderungen sind Qualit\u00e4tmerkmale, Randbedingungen, Leistung, Mengen, ...\n\n\nGeht oft vergessen, weil die Anforderung aus Kundensicht angesehen werden muss\n\n\nSind oft auch implizit / unbewusst\n\n\n\"Other Requirements\" k\u00f6nnen solche sein, die in vielen UCs vorkommen bzw. sehr allgemein sind\n\n\n\n\nModelling Behaviour\n\n\n\n\nSind formale Beschreibungen (k\u00f6nnen auch maschineninterpretiert werden)\n\n\n\n\nZustandsdiagramme\n\n\n\n\nKreis zeigt Initial State\n\n\nBoxen sind Zust\u00e4nde\n\n\nName ist Adjektiv\n\n\nKann entry und exit-Acitivites haben\n\n\ndo-Acitivty l\u00e4uft, solange System im Zustand ist\n\n\nKann auch interne Events / \u00dcberg\u00e4nge haben (wiee ein Loop zu sich selbst)\n\n\n\n\n\n\n\u00dcberg\u00e4nge mit angeschriebenen Pfeilen (\"Events\")\n\n\nevent [guard] / activity\n\n\nguard\n ist Bedingung (precondition)\n\n\nactivity\n wird ausgef\u00fchrt\n\n\nWerden \"augenblicklich\" ausgef\u00fchrt\n\n\n\n\n\n\nEndzustand eingerahmter Kreis (\u00e0 la DEA)\n\n\nZust\u00e4nde k\u00f6nnen verschachtelt werden, dass ein einzelner Zustand wieder ein kompletter Ablauf darstellt\n\n\nIn einem nested State kann von jedem Zustand aus der nested State verlassen werden (in Folie 15 kann aus jedem Zustand \"on hook\" ausgel\u00f6st werden)\n\n\n\n\n\n\nVorlesung 6\n\n\n\n\nErweitertes Zustandsdiagramm: Man kann Variablen verwenden und als Aktivit\u00e4t diese ver\u00e4ndern, z.B. erh\u00f6hen\n\n\nMit Guards k\u00f6nnen Variablenwerte geforder werden, z.B. \n[count == 10]\n\n\n\n\nAktivit\u00e4tsdiagramme\n\n\n\n\nJoin wartet auf beide Inputs (synchronisiert), Merge hingegen nicht, es werden nur zwei Pfade zusammen ge\"merged\"\n\n\n\"Partitions\" unterteilen Teile des Prozesses in verschiedene Abteilungen\n\n\n\n\nSoftware Testing\n\n\n\n\nTestspezifikation bei Unit-Tests: Der Code. Testprotokoll: Ergebnis der Tests\n\n\nGesamtsystemtest\n\n\nSpezifikation: Anforderungen des Systems mit einem konkreten Szenario (meist aus Sicht der Benutzer)\n\n\nProtokoll: Sind Anforderungen erf\u00fcllt? z.B. Checkliste\n\n\n\n\n\n\nUnittests sollte immer reproduzierbar und nachvollziehbar sein\n\n\nGesamtsystemtests: Nicht immer reproduzierbar, da von einer Person durchgef\u00fchrt\n\n\nAnforderungskategorien auf Testkategorien abbilden. Deshalb: Anforderungen m\u00fcssen testbar sein!\n\n\nVerifikation: Erf\u00fcllen die Work Products die Vorgaben? (untere Ebenen)\n\n\nValidierung: Entwickle ich das richtige Produkt? (Nach Kundenbed\u00fcrfnissen) (obere Ebenen)\n\n\nAuf niedrigsten Ebenen (Implementation) werden tendenziell White-Box-Tests gemacht. Auf h\u00f6heren Ebenen eher Black-Box-Tests (vor allem f\u00fcr den Abnahmetest)\n\n\n\n\n\n\nWoche 7 - eLearning Microtests\n\n\n\n\nError vs. Failure\n\n\nError: The code \nterminates prematurely\n (unhandled exception)\n\n\nFailure: Some actual value doesn't match the expected value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"Micro Tests\" are unit tests, but short, cheap and plentiful\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrucute AAA (+ Teardown)\n\n\nArrange: Instantiate, get to the execution path\n\n\nAct: Invoke Methods unter test\n\n\nAssert: Assert Test conditions\n\n\n(Teardown)\n\n\n\n\n\n\nTest organization\n\n\nTests in the \nsame namespace\n, but different folder on the disk, than the tested class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVorlesung 9 - Design Patterns\n\n\n\n\nFolie 12: Dies ist das \nStrategy Pattern\n\n\nJede Duck muss eine Strategie implementieren (Flug und Quacken)\n\n\nVorteil: Man kann z.B. \u00fcber eine Liste von Ducks iterieren und auf allen \nfly()\n aufrufen. Geht z.B. nicht, wenn man Interface \nflyable\n machen w\u00fcrde\n\n\n\n\n\n\nDecorator-Pattern\n\n\nKlassen ineinander verpacken\n\n\nKosten werden von Aussen nach Innen addiert\n\n\nDecorator erbt von Component, aber hat selbst eine Referenz auf eine Component\n\n\n\n\n\n\nComposite\n\n\nJede Composite hat eine oder mehrere Components als Childdren, diese kann jeweils ein Leaf, oder wieder ein Composite sein\n\n\nProblem: Ein Composite hat keine eigene Operation, es werden nur Operationen auf Leafs ausgef\u00fchrt\n\n\n\n\n\n\nFactory\n\n\nInstanziierung mit komplexer Logik in sepparate Klasse auslagern\n\n\n\n\n\n\n\n\n\u00dcbung 09\n\n\n\n\nTODO\n BILDER EINF\u00dcGEN\n\n\nStrategy Pattern: In Wikipedia ist die Strategie-Klasse ein Interface, im Quiz eine konkrete Klasse\n\n\nKonkrete Klasse f\u00fcr default implementation. Bei Interface nicht m\u00f6glich\n\n\n\n\n\n\nObserver Pattern: Im GOF gibt es ein konkretes Subject, bei Wikipedia nicht. Das concrete Subject ist n\u00f6tig, da es das effektive Objekt ist, das \"observed\" wird\n\n\nMVC geht auch ohne Observer-Pattern: Der Controller kennt das Model und die View. Wenn das Model sich \u00e4ndert, weiss das der Controller und meldet dies der View. Mit dem Observer Pattern werden die Views \u00fcber den Observer vom Model benachrichtigt, der Controller muss die View nicht mehr kennen\n\n\nMVC ohne Observer nur mit 1 View oder wenn die Daten \"unter\" dem Modell nicht ver\u00e4ndert werden\n\n\n\n\n\n\n\n\n\n\nVorlesung 10 - SW-Architektur (1)\n\n\n\n\nDiagramm mit Packages so detailiert, damit man es noch gut kommunizieren kann\n\n\nGute Koh\u00e4sion von Klassen entsteht oft durch Single Responsibility\n\n\nTiefe Kopplung: M\u00f6glichst wenig Abh\u00e4ngigkeiten von anderen Klassen\n\n\nIn den Schichten geht Abh\u00e4ngigkeit immer von oben nach unten\n\n\nJe weiter hoch in den Schichten, desto schwieriger werden Unit-Tests\n\n\nVererbung kann hohe Kopplung ergeben\n\n\nPartitionen: Vertikale Unterteilungen in der gleichen Schicht\n\n\nWieder m\u00f6glichst wenige Abh\u00e4ngigkeiten zwischen den Partitionen\n\n\n\n\n\n\nLayers vs. Tiers\n\n\nLayers sind Schichten, wie der Code hierarchisch getrennt ist\n\n\nTiers sind die Abgrenzungen von Laufzeitumgebungen (z.B. unterschiedliche Server)\n\n\ni.d.R. sind Aufrufe sind Aufrufe zwischen Layer synchron, zwischen Tiers immer asynchron", 
            "title": "SE1"
        }, 
        {
            "location": "/hs16/se1/#software-engineering-1", 
            "text": "", 
            "title": "Software Engineering 1"
        }, 
        {
            "location": "/hs16/se1/#allgemein", 
            "text": "Pr\u00fcfung closed book  Abgabe von 3 von 4 Testat-\u00dcbungen  Selbststudium: Jede Woche in Buch lesen, nach Lektionsplan sheet", 
            "title": "Allgemein"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-1", 
            "text": "Ca. 70% aller IT-Projekte laufen schief  Erwartungskonflikt Kunde - Programmierer, ...  OOA nach Larman: Statisches Domain Model ohne Funktionen, Black-Box Sequenzdiagramm  \"Klassisch\": Statisches Model mit Funktionen, White-Box Sequzendiagramms", 
            "title": "Vorlesung 1"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-2-domain-modellierung", 
            "text": "Design-Modell zeigt eine Realisation, ein Domain-Modell auch Dinge, die nicht realisiert werden (Domain-Modell ist Inspiration f\u00fcr Design-Modell)  Entit\u00e4ten (Konzepte) finden:   Keine Implementations-Konzepte verwenen (z.B. \"Datenbank\", \"Webserver\", etc.)  Keine abgeleiteten Konzepte (Dinge, die durch andere Dinge berechnet werden kann, z.B. ein Logfile)    Semantic Gap: Unterschied zwischen realer Welt bzw. Domain Model und Design Model bzw. Code. Diese Gap ist bei OO-Design sehr klein, z.B. bei Assembler sehr gross  n-m-Assoziationen sind im Domain Modell erlaubt, aber oft nich richtig, da die Assoziation eigene Attribute hat  Sobald ein Attribut eine gewisse Komplexit\u00e4t hat, in eigenes Konzept auslagern (im Zweifelsfall Konzept!)  Abstrakte Superclasses werden  kursiv  geschrieben (= Es gibt keine Instanzen der abstrakten Klasse)", 
            "title": "Vorlesung 2 - Domain-Modellierung"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-4-requirements", 
            "text": "", 
            "title": "Vorlesung 4 - Requirements"
        }, 
        {
            "location": "/hs16/se1/#einfuhrung", 
            "text": "Requirements Modulanmeldung HSR  Funktional  Temporale und personelle Zugangsbeschr\u00e4nkungen  Alle Module m\u00fcssen abgebildet sein  Benutzer muss sich f\u00fcr Module an- und abmelden k\u00f6nnen  \u00dcbersichtliche Strukturierung  Eigene Daten und Daten anderer Studenten k\u00f6nnen eingesehen werden  Voraussetzungen f\u00fcr Module pr\u00fcfen    Nicht-Funktional (Qualit\u00e4t / Wie gut?)  System muss sicher sein  Antwortzeit 500ms  Umgebung / Programmiersprache    Prozess-Anforderungen  Kostensch\u00e4tzung      Probleme: Ablauf? Machbarkeit? Priorit\u00e4ten?  Anforderungen aus  Sicht der Benutzer  erstellen  30% aller Probleme in SE sind wegen Requirement Specification  Umfassendes SRS am Anfang ist problematisch!  Anforderungen \u00e4ndern sich, daher iterativ vorgehen -  Requirements Management", 
            "title": "Einf\u00fchrung"
        }, 
        {
            "location": "/hs16/se1/#use-cases", 
            "text": "Use-Case ist  textuelle  Beschreibung \"Actor tut das, dann macht das System ...\"  Geschichte aus Benutzersicht  Aktor kann auch externes System sein (als Box dargestellt)", 
            "title": "Use-Cases"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-5-nf-srs-modelling-behaviour", 
            "text": "Nichtfunktionale Anforderungen sind Qualit\u00e4tmerkmale, Randbedingungen, Leistung, Mengen, ...  Geht oft vergessen, weil die Anforderung aus Kundensicht angesehen werden muss  Sind oft auch implizit / unbewusst  \"Other Requirements\" k\u00f6nnen solche sein, die in vielen UCs vorkommen bzw. sehr allgemein sind", 
            "title": "Vorlesung 5 - NF, SRS, Modelling Behaviour"
        }, 
        {
            "location": "/hs16/se1/#modelling-behaviour", 
            "text": "Sind formale Beschreibungen (k\u00f6nnen auch maschineninterpretiert werden)", 
            "title": "Modelling Behaviour"
        }, 
        {
            "location": "/hs16/se1/#zustandsdiagramme", 
            "text": "Kreis zeigt Initial State  Boxen sind Zust\u00e4nde  Name ist Adjektiv  Kann entry und exit-Acitivites haben  do-Acitivty l\u00e4uft, solange System im Zustand ist  Kann auch interne Events / \u00dcberg\u00e4nge haben (wiee ein Loop zu sich selbst)    \u00dcberg\u00e4nge mit angeschriebenen Pfeilen (\"Events\")  event [guard] / activity  guard  ist Bedingung (precondition)  activity  wird ausgef\u00fchrt  Werden \"augenblicklich\" ausgef\u00fchrt    Endzustand eingerahmter Kreis (\u00e0 la DEA)  Zust\u00e4nde k\u00f6nnen verschachtelt werden, dass ein einzelner Zustand wieder ein kompletter Ablauf darstellt  In einem nested State kann von jedem Zustand aus der nested State verlassen werden (in Folie 15 kann aus jedem Zustand \"on hook\" ausgel\u00f6st werden)", 
            "title": "Zustandsdiagramme"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-6", 
            "text": "Erweitertes Zustandsdiagramm: Man kann Variablen verwenden und als Aktivit\u00e4t diese ver\u00e4ndern, z.B. erh\u00f6hen  Mit Guards k\u00f6nnen Variablenwerte geforder werden, z.B.  [count == 10]", 
            "title": "Vorlesung 6"
        }, 
        {
            "location": "/hs16/se1/#aktivitatsdiagramme", 
            "text": "Join wartet auf beide Inputs (synchronisiert), Merge hingegen nicht, es werden nur zwei Pfade zusammen ge\"merged\"  \"Partitions\" unterteilen Teile des Prozesses in verschiedene Abteilungen", 
            "title": "Aktivit\u00e4tsdiagramme"
        }, 
        {
            "location": "/hs16/se1/#software-testing", 
            "text": "Testspezifikation bei Unit-Tests: Der Code. Testprotokoll: Ergebnis der Tests  Gesamtsystemtest  Spezifikation: Anforderungen des Systems mit einem konkreten Szenario (meist aus Sicht der Benutzer)  Protokoll: Sind Anforderungen erf\u00fcllt? z.B. Checkliste    Unittests sollte immer reproduzierbar und nachvollziehbar sein  Gesamtsystemtests: Nicht immer reproduzierbar, da von einer Person durchgef\u00fchrt  Anforderungskategorien auf Testkategorien abbilden. Deshalb: Anforderungen m\u00fcssen testbar sein!  Verifikation: Erf\u00fcllen die Work Products die Vorgaben? (untere Ebenen)  Validierung: Entwickle ich das richtige Produkt? (Nach Kundenbed\u00fcrfnissen) (obere Ebenen)  Auf niedrigsten Ebenen (Implementation) werden tendenziell White-Box-Tests gemacht. Auf h\u00f6heren Ebenen eher Black-Box-Tests (vor allem f\u00fcr den Abnahmetest)", 
            "title": "Software Testing"
        }, 
        {
            "location": "/hs16/se1/#woche-7-elearning-microtests", 
            "text": "Error vs. Failure  Error: The code  terminates prematurely  (unhandled exception)  Failure: Some actual value doesn't match the expected value           \"Micro Tests\" are unit tests, but short, cheap and plentiful           Strucute AAA (+ Teardown)  Arrange: Instantiate, get to the execution path  Act: Invoke Methods unter test  Assert: Assert Test conditions  (Teardown)    Test organization  Tests in the  same namespace , but different folder on the disk, than the tested class", 
            "title": "Woche 7 - eLearning Microtests"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-9-design-patterns", 
            "text": "Folie 12: Dies ist das  Strategy Pattern  Jede Duck muss eine Strategie implementieren (Flug und Quacken)  Vorteil: Man kann z.B. \u00fcber eine Liste von Ducks iterieren und auf allen  fly()  aufrufen. Geht z.B. nicht, wenn man Interface  flyable  machen w\u00fcrde    Decorator-Pattern  Klassen ineinander verpacken  Kosten werden von Aussen nach Innen addiert  Decorator erbt von Component, aber hat selbst eine Referenz auf eine Component    Composite  Jede Composite hat eine oder mehrere Components als Childdren, diese kann jeweils ein Leaf, oder wieder ein Composite sein  Problem: Ein Composite hat keine eigene Operation, es werden nur Operationen auf Leafs ausgef\u00fchrt    Factory  Instanziierung mit komplexer Logik in sepparate Klasse auslagern", 
            "title": "Vorlesung 9 - Design Patterns"
        }, 
        {
            "location": "/hs16/se1/#ubung-09", 
            "text": "TODO  BILDER EINF\u00dcGEN  Strategy Pattern: In Wikipedia ist die Strategie-Klasse ein Interface, im Quiz eine konkrete Klasse  Konkrete Klasse f\u00fcr default implementation. Bei Interface nicht m\u00f6glich    Observer Pattern: Im GOF gibt es ein konkretes Subject, bei Wikipedia nicht. Das concrete Subject ist n\u00f6tig, da es das effektive Objekt ist, das \"observed\" wird  MVC geht auch ohne Observer-Pattern: Der Controller kennt das Model und die View. Wenn das Model sich \u00e4ndert, weiss das der Controller und meldet dies der View. Mit dem Observer Pattern werden die Views \u00fcber den Observer vom Model benachrichtigt, der Controller muss die View nicht mehr kennen  MVC ohne Observer nur mit 1 View oder wenn die Daten \"unter\" dem Modell nicht ver\u00e4ndert werden", 
            "title": "\u00dcbung 09"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-10-sw-architektur-1", 
            "text": "Diagramm mit Packages so detailiert, damit man es noch gut kommunizieren kann  Gute Koh\u00e4sion von Klassen entsteht oft durch Single Responsibility  Tiefe Kopplung: M\u00f6glichst wenig Abh\u00e4ngigkeiten von anderen Klassen  In den Schichten geht Abh\u00e4ngigkeit immer von oben nach unten  Je weiter hoch in den Schichten, desto schwieriger werden Unit-Tests  Vererbung kann hohe Kopplung ergeben  Partitionen: Vertikale Unterteilungen in der gleichen Schicht  Wieder m\u00f6glichst wenige Abh\u00e4ngigkeiten zwischen den Partitionen    Layers vs. Tiers  Layers sind Schichten, wie der Code hierarchisch getrennt ist  Tiers sind die Abgrenzungen von Laufzeitumgebungen (z.B. unterschiedliche Server)  i.d.R. sind Aufrufe sind Aufrufe zwischen Layer synchron, zwischen Tiers immer asynchron", 
            "title": "Vorlesung 10 - SW-Architektur (1)"
        }, 
        {
            "location": "/hs16/wed2/", 
            "text": "Web Engineering + Design 2\n\n\nLinks\n\n\n\n\nCSS-Elemente zentrieren: \nhttps://wiki.selfhtml.org/wiki/CSS/Anwendung_und_Praxis/Inhalte_zentrieren\n\n\n\n\nPr\u00fcfung\n\n\n\n\n2h, closed book\n\n\nZusammenfassung 1 A4 Seite (muss abgegeben werden)\n\n\n\n\n\n\nVorlesung 2 - NodeJS\n\n\n\n\n\"Klassischer\" Webserver\n\n\nBei jeder Anfrage wird die Seite auf dem Server neu aufgebaut\n\n\nz.B. PHP, ASP...\n\n\n\n\n\n\nEvent-driven, non-blocking\n\n\nBei einem Prozess (Thread) kann nur eine Anfrage gleichzeitig bearbeitet werden (blocking)\n\n\nMehrere Threads (ASP, ...): Mehrere Anfragen gleichzeitig bearbeiten (feste Anzahl m\u00f6gliche Threads)\n\n\nEvent-driven (node): Es gibt einen Thread, der den Task \"abliefert\" und benachrichtigt wird, sobald er bearbeitet wurde (callback, asynchron). Die Antwort wird dann wieder \u00fcber den einen Thread ausgeliefert\n\n\n\n\n\n\nFolie 17: Die Funktion wird 1 Sec verz\u00f6gert aufgerufen (asynchron), d.h. sie blockiert den Ablauf nicht\n\n\nCallback: 1:1-Verbindung\n\n\nEvent: 1 : * Verbindungen (Es k\u00f6nnen z.B. mehrere sich auf einem Event \"anmelden\", -\n \"Newsfeed\")\n\n\nTipp\n: Bei \nserver.listen(port, hostname, fn)\n den Hostnamen weglassen, dann wird auf jede NIC geh\u00f6rt\n\n\nQuery parsen mit \nurl.parse(request.url, true).query\n (\ntrue\n gibt gerade JSON-object zur\u00fcck)\n\n\nDie \nhandler\n Funktion von Node ist blockierend, sollte also m\u00f6glichst schnell sein\n\n\nEin Modul wird nur einmal durchlaufen. D.h. wenn man zwei mal \nrequire()\n auf das selbe Modul aufruft, ist das Objekt dasselbe\n\n\nModul als requirement hinzuf\u00fcgen: \nnpm install \nname\n --save\n\n\nFolie 28: Bei Zyklen macht Node eine Kopie eines Moduls, sollte aber vermieden werden\n\n\nFolie 33: Variante mit Streams zu bevorzugen, weil sonst das ganze File ins Memory geladen werden muss. Beim Stream werden vorzu die Daten zum Client geschickt\n\n\n\n\n\n\nVorlesung 4 - REST\n\n\n\n\nREST ist eine Guideline / Best Practices, wie Daten von Client zu Server gesendet werden\n\n\nJe mehr Richardson's Maturity Model Level umgesetzt werden, desto besser\n\n\nVor REST gab es viele unterschiedliche Standards\n\n\nRESTful Services sollten \nstatuslos\n sein. D.h. bei jeder Anfrage teilt der Client mit, wer er ist und was er will. Dadurch kann man die Server beliebig skalieren\n\n\nEine REST-Schnittstelle sollte selbstbeschreibend sein. z.B. Ressource \u00fcber ID abrufbar\n\n\nROA\n: Ressource oriented Architecture:\n\n\nz.B. GET auf /orders zeigt alle orders, /orders/1 zeigt order mit ID 1\n\n\nJede Ressource hat eine URL\n\n\nQuery-Parameter nur f\u00fcr Suchen oder Filter verwenden\n\n\nReferenzen auf andere Ressourcen werden \u00fcber hyperlinks (HTTP-Pfad) angegeben\n\n\nPOST\n erstellt eine neue Ressource (ID automatisch vergeben)\n\n\nPUT\n geht direkt auf eine ID und aktualisiert eine Ressource, oder erstellt sie, falls noch nicht vorhanden\n\n\nHEAD\n liefert nur der Header eines \nGET\n. Wird verwendet, um z.B. zu pr\u00fcfen, ob es \u00c4nderungen gab (caching)\n\n\n\n\n\n\nIm Request Header wird mit \nAccept\n angegeben, in welchem Format (JSON, XML, ...) die Antwort sein sollte\n\n\nhttps://www.getpostman.com/\n zum Testen von APIs\n\n\nHATEOAS\n\n\n\"Oberste Stufe\" einer REST API\n\n\n\u00dcberg\u00e4nge zu anderen States werden in Antwort mitgeschickt (in Form von URIs)\n\n\nAufgrund der Antwort kann der Client dann schliessen, wie er weiter machen muss (z.B. continue, cancel) und den entsprechenden Links folgen\n\n\nURI kann serverseitig ge\u00e4ndert werden\n\n\n\n\n\n\n\n\n\n\nVorlesung 5 - Flexibles Layout\n\n\n\n\nFlexibles Layout: Seite passt sich Ger\u00e4te-Gr\u00f6sse an, z.B. fliesst der Text automatisch\n\n\nResponsive Design: Auf unterschiedlichen Gr\u00f6ssen werden verschiedene layouts eingesetzt (mit bestimmten Break-Points)\n\n\ncontent-box\n: H\u00f6he und Breite bezieht sich nur auf den content\n\n\nborder-box\n: H\u00f6he und Breite bezieht sich auf content + padding + border\n\n\noverflow\n: Verhalten, wenn der Text zu viel Platz f\u00fcr die Box beansprucht (\"overflowed\")\n\n\nDefault \nvisible\n: Text fliesst \u00fcber Box hinaus\n\n\nhidden\n: \u00fcberfliessender Text wird abgeschnitten\n\n\nscroll\n: Scroll-Balken anzeigen\n\n\n\n\n\n\nposition \nabsolute\n: Position ist relativ zum ersten Parent (das \nrelative\n oder \nabsolute\n ist, sp\u00e4testens body)\n\n\nposition \nfixed\n: Feste Position auf dem Screen\n\n\nBei beiden \ntop\n, \nleft\n, \nbottom\n, \nright\n f\u00fcr die Abst\u00e4nde\n\n\ndefault ist \nposition: static\n\n\nKombination: Einige Elemente absolute positionieren, und dann z.B. Elemente im Flow lassen, aber die margin entsprechend vergr\u00f6ssern\n\n\ninline-block\n: Ein Block mit margin / padding, width / height, der Inline dargestellt wird\n\n\nAnordnung zu anderen Blocks in gleicher Zeile mit \nvertical-align\n\n\n\n\n\n\n\n\nFlexbox\n\n\nhttps://css-tricks.com/snippets/css/a-guide-to-flexbox/\n\n\n\n\nDefiniert mit \ndisplay: flex\n bzw. \ninline-flex\n\n\nAlle Blocks innerhalb einer Flexbox sind \"inline blocks\"\n\n\nflex-direction\n: \ncolumn\n f\u00fcr Elemente untereinander, \nrow\n f\u00fcr Elemente in einer Zeile\n\n\nflex: \nflex-grow\n \nflex-shrink\n \nflex-basis\n\n\ngrow, shrink: Faktor, wie die Box verkleinert / vergr\u00f6ssert werden kann\n\n\n\n\n\n\nflex: 0 0 50px\n heisst eine fixe Gr\u00f6sse von 50px\n\n\njustify-content\n\n\nflex-start\n: An start positionieren (links bzw. oben)\n\n\nspace-between\n: Gleicher Abstand zwischen Elementen\n\n\nspace-around\n: Gleicher Abstand um Elemente herum\n\n\n\n\n\n\n\n\nAnalyse realistischer layouts\n\n\n\n\nMobile Layout mit \ndisplay:block\n\n\nElemente werden in Reihenfolge des HTML angezeigt\n\n\n\n\n\n\nMobile layout mit \nflex\n\n\nReihenfolge kann ver\u00e4ndert werden\n\n\nBraucht media queries f\u00fcr flexible layouts\n\n\n\n\n\n\n\n\nBrowser support\n\n\n\n\nGraceful Degredation: Alle modernen Features nutzen, wenn nicht vorhanden, alternativen anbieten oder Hinweise einblenden\n\n\nProgressive Enhancement: Starten mit Grundfunktionalit\u00e4t f\u00fcr alle Browser, dann darauf aufbauen mit CSS und JS\n\n\n\"Graceful Degradation\" ist g\u00fcnstiger f\u00fcr die Entwicklung aber\nnormalerweise teurer als \"Progressive Enhancement\" in der Wartung.\n\n\n\n\n\n\nVorlesung 6 - Responsive Layout\n\n\nMedia Queries\n\n\n\n\nF\u00fcr unterschiedliche Medien\n\n\n@media screen {}\n\n\n@media print {}\n\n\n\n\n\n\nF\u00fcr Dimensionen\n\n\n\n\n\n\n- \n@media ([width|min-width|max-width]: 375px) {}\n\n\n\n\n\n\n\n\n\n\n- \n@media ([device-width|min-device-width|max-device-width]: 375px) {}\n\n\n\n\n\n\n- \n@media ([device-height|min-device-height|max-device-height]: 667px) {}\n\n\n\n\n\n\n\n\n\n\nSpec: \nhttps://www.w3.org/TR/css3-mediaqueries/\n\n\nKann auch direkt als sepparates Stylesheet geladen werden (HTML5): \nlink rel=\"stylesheet\u201c href=\u201cLargeScreenLayout.css\" media=\"(min-width: 30em)\"\n\n\nMobile First Approach: HTML f\u00fcr Mobile Layout schreiben, dann f\u00fcr gr\u00f6ssere Displays mit Media Queries anpassen\n\n\n\n\nViewport\n\n\nmeta name=\nviewport\n content=\nwidth=device-width,initial-scale=1\n\n\n\n\n\n\n\nDeaktiviert die \"Intelligenz\" von mobilen Browsern\n\n\nSonst funktionieren Media Queries nicht richtig, da der Viewport skaliert wird vom Browser\n\n\nDetails: \nhttps://vimeo.com/100523275\n\n\n\n\n\n\nVorlesung 7 - Responsive Webdesign\n\n\n\n\nResizer zum Testen: http://material.io/resizer/\n\n\nRechte Spalte wird oft ignoriert, da dort oft Werbung ist\n\n\nHSR-Site: \n\n\nIn mobiler Version sind viel weniger Informationen vorhanden\n\n\nKleine \"Touch-Targets\" wenn nicht Mobil-Seite verwendet\n\n\n\n\n\n\nWWF-Seite: \n\n\nHamburger Men\u00fc ist schlechter als \"Men\u00fc\"-Bezeichnung\n\n\nNur noch wichtigste Elemente werden auf mobiler Sicht direkt angezeigt, Rest kommt in ein Drop-Down-Men\u00fc\n\n\n\n\n\n\n\n\nPatterns\n\n\n\n\n\u00dcbersicht: \nhttps://bradfrost.github.io/this-is-responsive/patterns.html\n\n\nMostly Fluid\n\n\nElemente untereinander platzieren, wenn sie kein Platz mehr haben\n\n\n\"Reflow\"\n\n\n\n\n\n\nColumn Drop\n\n\nSpalten, die in der Desktop-Version links und rechts sind, werden nacheinander \"gedroppt\" und untereinander angeordnet\n\n\n\n\n\n\nLayout Shifter\n\n\nNavigation auf Desktop ist links, INhalte untereinander\n\n\nNavigation wird auf Mobile nach oben geschoben\n\n\nSiehe auch \"Smashing Magazine\"\n\n\n\n\n\n\nReflow\n\n\nViele Spalten auf Desktop\n\n\nEine Spalte auf Mobile\n\n\n\"Cards\", siehe \"Material Design\"\n\n\n\n\n\n\nExpand\n\n\nMaximale Breite der Seite auf Desktop, links und rechts einen Rand\n\n\n\n\n\n\nOff Canvas\n\n\nMen\u00fc in Mobile nicht sichtbar, kann \"reingeschoben\" werden\n\n\n\n\n\n\nFolie 33\n\n\nWenn f\u00fcr einen \"Review\"-Mode keine Inputfelder gerendet werden m\u00fcssen, spart dies Platz\n\n\n\n\n\n\n\"Repeat E-Mail\"-Felder sind unn\u00f6tig. Besser nach dem Submit einen Review-Schritt einbauen, damit der User seine Eingaben \u00fcberpr\u00fcfen kann\n\n\n\n\n\n\nVorlesung 8 - UCD Vertiefung\n\n\n\n\nhttp://www.vischeck.com/\n zum \u00dcberpr\u00fcfen, wie die Seite f\u00fcr Farbenblinde aussieht\n\n\n\n\nVorlesung 9 - Web Security Grundlagen\n\n\n\n\nXSS: Cross Site Scripting\n\n\nCode des Angreifers wird im Browser des Opfers ausgef\u00fchrt\n\n\nInteressant z.B. um Cookies von Benutzer per AJAX-Request an Angreifer zu setzen\n\n\nEncoding ist bei Handlebars per default aktiviert\n\n\nContent Security Policy als Header setzen\n\n\nBei Cookies \nHttpOnly\n Flag setzen, damit es nicht mit \ndocument.cookie\n ausgelesen werden kann\n\n\n\n\n\n\nJS Code Injection\n\n\nAngreifer kann Server dazu bringen, seinen Code auszuf\u00fchren", 
            "title": "WED2"
        }, 
        {
            "location": "/hs16/wed2/#web-engineering-design-2", 
            "text": "", 
            "title": "Web Engineering + Design 2"
        }, 
        {
            "location": "/hs16/wed2/#links", 
            "text": "CSS-Elemente zentrieren:  https://wiki.selfhtml.org/wiki/CSS/Anwendung_und_Praxis/Inhalte_zentrieren", 
            "title": "Links"
        }, 
        {
            "location": "/hs16/wed2/#prufung", 
            "text": "2h, closed book  Zusammenfassung 1 A4 Seite (muss abgegeben werden)", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-2-nodejs", 
            "text": "\"Klassischer\" Webserver  Bei jeder Anfrage wird die Seite auf dem Server neu aufgebaut  z.B. PHP, ASP...    Event-driven, non-blocking  Bei einem Prozess (Thread) kann nur eine Anfrage gleichzeitig bearbeitet werden (blocking)  Mehrere Threads (ASP, ...): Mehrere Anfragen gleichzeitig bearbeiten (feste Anzahl m\u00f6gliche Threads)  Event-driven (node): Es gibt einen Thread, der den Task \"abliefert\" und benachrichtigt wird, sobald er bearbeitet wurde (callback, asynchron). Die Antwort wird dann wieder \u00fcber den einen Thread ausgeliefert    Folie 17: Die Funktion wird 1 Sec verz\u00f6gert aufgerufen (asynchron), d.h. sie blockiert den Ablauf nicht  Callback: 1:1-Verbindung  Event: 1 : * Verbindungen (Es k\u00f6nnen z.B. mehrere sich auf einem Event \"anmelden\", -  \"Newsfeed\")  Tipp : Bei  server.listen(port, hostname, fn)  den Hostnamen weglassen, dann wird auf jede NIC geh\u00f6rt  Query parsen mit  url.parse(request.url, true).query  ( true  gibt gerade JSON-object zur\u00fcck)  Die  handler  Funktion von Node ist blockierend, sollte also m\u00f6glichst schnell sein  Ein Modul wird nur einmal durchlaufen. D.h. wenn man zwei mal  require()  auf das selbe Modul aufruft, ist das Objekt dasselbe  Modul als requirement hinzuf\u00fcgen:  npm install  name  --save  Folie 28: Bei Zyklen macht Node eine Kopie eines Moduls, sollte aber vermieden werden  Folie 33: Variante mit Streams zu bevorzugen, weil sonst das ganze File ins Memory geladen werden muss. Beim Stream werden vorzu die Daten zum Client geschickt", 
            "title": "Vorlesung 2 - NodeJS"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-4-rest", 
            "text": "REST ist eine Guideline / Best Practices, wie Daten von Client zu Server gesendet werden  Je mehr Richardson's Maturity Model Level umgesetzt werden, desto besser  Vor REST gab es viele unterschiedliche Standards  RESTful Services sollten  statuslos  sein. D.h. bei jeder Anfrage teilt der Client mit, wer er ist und was er will. Dadurch kann man die Server beliebig skalieren  Eine REST-Schnittstelle sollte selbstbeschreibend sein. z.B. Ressource \u00fcber ID abrufbar  ROA : Ressource oriented Architecture:  z.B. GET auf /orders zeigt alle orders, /orders/1 zeigt order mit ID 1  Jede Ressource hat eine URL  Query-Parameter nur f\u00fcr Suchen oder Filter verwenden  Referenzen auf andere Ressourcen werden \u00fcber hyperlinks (HTTP-Pfad) angegeben  POST  erstellt eine neue Ressource (ID automatisch vergeben)  PUT  geht direkt auf eine ID und aktualisiert eine Ressource, oder erstellt sie, falls noch nicht vorhanden  HEAD  liefert nur der Header eines  GET . Wird verwendet, um z.B. zu pr\u00fcfen, ob es \u00c4nderungen gab (caching)    Im Request Header wird mit  Accept  angegeben, in welchem Format (JSON, XML, ...) die Antwort sein sollte  https://www.getpostman.com/  zum Testen von APIs  HATEOAS  \"Oberste Stufe\" einer REST API  \u00dcberg\u00e4nge zu anderen States werden in Antwort mitgeschickt (in Form von URIs)  Aufgrund der Antwort kann der Client dann schliessen, wie er weiter machen muss (z.B. continue, cancel) und den entsprechenden Links folgen  URI kann serverseitig ge\u00e4ndert werden", 
            "title": "Vorlesung 4 - REST"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-5-flexibles-layout", 
            "text": "Flexibles Layout: Seite passt sich Ger\u00e4te-Gr\u00f6sse an, z.B. fliesst der Text automatisch  Responsive Design: Auf unterschiedlichen Gr\u00f6ssen werden verschiedene layouts eingesetzt (mit bestimmten Break-Points)  content-box : H\u00f6he und Breite bezieht sich nur auf den content  border-box : H\u00f6he und Breite bezieht sich auf content + padding + border  overflow : Verhalten, wenn der Text zu viel Platz f\u00fcr die Box beansprucht (\"overflowed\")  Default  visible : Text fliesst \u00fcber Box hinaus  hidden : \u00fcberfliessender Text wird abgeschnitten  scroll : Scroll-Balken anzeigen    position  absolute : Position ist relativ zum ersten Parent (das  relative  oder  absolute  ist, sp\u00e4testens body)  position  fixed : Feste Position auf dem Screen  Bei beiden  top ,  left ,  bottom ,  right  f\u00fcr die Abst\u00e4nde  default ist  position: static  Kombination: Einige Elemente absolute positionieren, und dann z.B. Elemente im Flow lassen, aber die margin entsprechend vergr\u00f6ssern  inline-block : Ein Block mit margin / padding, width / height, der Inline dargestellt wird  Anordnung zu anderen Blocks in gleicher Zeile mit  vertical-align", 
            "title": "Vorlesung 5 - Flexibles Layout"
        }, 
        {
            "location": "/hs16/wed2/#flexbox", 
            "text": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/   Definiert mit  display: flex  bzw.  inline-flex  Alle Blocks innerhalb einer Flexbox sind \"inline blocks\"  flex-direction :  column  f\u00fcr Elemente untereinander,  row  f\u00fcr Elemente in einer Zeile  flex:  flex-grow   flex-shrink   flex-basis  grow, shrink: Faktor, wie die Box verkleinert / vergr\u00f6ssert werden kann    flex: 0 0 50px  heisst eine fixe Gr\u00f6sse von 50px  justify-content  flex-start : An start positionieren (links bzw. oben)  space-between : Gleicher Abstand zwischen Elementen  space-around : Gleicher Abstand um Elemente herum", 
            "title": "Flexbox"
        }, 
        {
            "location": "/hs16/wed2/#analyse-realistischer-layouts", 
            "text": "Mobile Layout mit  display:block  Elemente werden in Reihenfolge des HTML angezeigt    Mobile layout mit  flex  Reihenfolge kann ver\u00e4ndert werden  Braucht media queries f\u00fcr flexible layouts", 
            "title": "Analyse realistischer layouts"
        }, 
        {
            "location": "/hs16/wed2/#browser-support", 
            "text": "Graceful Degredation: Alle modernen Features nutzen, wenn nicht vorhanden, alternativen anbieten oder Hinweise einblenden  Progressive Enhancement: Starten mit Grundfunktionalit\u00e4t f\u00fcr alle Browser, dann darauf aufbauen mit CSS und JS  \"Graceful Degradation\" ist g\u00fcnstiger f\u00fcr die Entwicklung aber\nnormalerweise teurer als \"Progressive Enhancement\" in der Wartung.", 
            "title": "Browser support"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-6-responsive-layout", 
            "text": "", 
            "title": "Vorlesung 6 - Responsive Layout"
        }, 
        {
            "location": "/hs16/wed2/#media-queries", 
            "text": "F\u00fcr unterschiedliche Medien  @media screen {}  @media print {}    F\u00fcr Dimensionen    -  @media ([width|min-width|max-width]: 375px) {}      -  @media ([device-width|min-device-width|max-device-width]: 375px) {}    -  @media ([device-height|min-device-height|max-device-height]: 667px) {}      Spec:  https://www.w3.org/TR/css3-mediaqueries/  Kann auch direkt als sepparates Stylesheet geladen werden (HTML5):  link rel=\"stylesheet\u201c href=\u201cLargeScreenLayout.css\" media=\"(min-width: 30em)\"  Mobile First Approach: HTML f\u00fcr Mobile Layout schreiben, dann f\u00fcr gr\u00f6ssere Displays mit Media Queries anpassen", 
            "title": "Media Queries"
        }, 
        {
            "location": "/hs16/wed2/#viewport", 
            "text": "meta name= viewport  content= width=device-width,initial-scale=1    Deaktiviert die \"Intelligenz\" von mobilen Browsern  Sonst funktionieren Media Queries nicht richtig, da der Viewport skaliert wird vom Browser  Details:  https://vimeo.com/100523275", 
            "title": "Viewport"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-7-responsive-webdesign", 
            "text": "Resizer zum Testen: http://material.io/resizer/  Rechte Spalte wird oft ignoriert, da dort oft Werbung ist  HSR-Site:   In mobiler Version sind viel weniger Informationen vorhanden  Kleine \"Touch-Targets\" wenn nicht Mobil-Seite verwendet    WWF-Seite:   Hamburger Men\u00fc ist schlechter als \"Men\u00fc\"-Bezeichnung  Nur noch wichtigste Elemente werden auf mobiler Sicht direkt angezeigt, Rest kommt in ein Drop-Down-Men\u00fc", 
            "title": "Vorlesung 7 - Responsive Webdesign"
        }, 
        {
            "location": "/hs16/wed2/#patterns", 
            "text": "\u00dcbersicht:  https://bradfrost.github.io/this-is-responsive/patterns.html  Mostly Fluid  Elemente untereinander platzieren, wenn sie kein Platz mehr haben  \"Reflow\"    Column Drop  Spalten, die in der Desktop-Version links und rechts sind, werden nacheinander \"gedroppt\" und untereinander angeordnet    Layout Shifter  Navigation auf Desktop ist links, INhalte untereinander  Navigation wird auf Mobile nach oben geschoben  Siehe auch \"Smashing Magazine\"    Reflow  Viele Spalten auf Desktop  Eine Spalte auf Mobile  \"Cards\", siehe \"Material Design\"    Expand  Maximale Breite der Seite auf Desktop, links und rechts einen Rand    Off Canvas  Men\u00fc in Mobile nicht sichtbar, kann \"reingeschoben\" werden    Folie 33  Wenn f\u00fcr einen \"Review\"-Mode keine Inputfelder gerendet werden m\u00fcssen, spart dies Platz    \"Repeat E-Mail\"-Felder sind unn\u00f6tig. Besser nach dem Submit einen Review-Schritt einbauen, damit der User seine Eingaben \u00fcberpr\u00fcfen kann", 
            "title": "Patterns"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-8-ucd-vertiefung", 
            "text": "http://www.vischeck.com/  zum \u00dcberpr\u00fcfen, wie die Seite f\u00fcr Farbenblinde aussieht", 
            "title": "Vorlesung 8 - UCD Vertiefung"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-9-web-security-grundlagen", 
            "text": "XSS: Cross Site Scripting  Code des Angreifers wird im Browser des Opfers ausgef\u00fchrt  Interessant z.B. um Cookies von Benutzer per AJAX-Request an Angreifer zu setzen  Encoding ist bei Handlebars per default aktiviert  Content Security Policy als Header setzen  Bei Cookies  HttpOnly  Flag setzen, damit es nicht mit  document.cookie  ausgelesen werden kann    JS Code Injection  Angreifer kann Server dazu bringen, seinen Code auszuf\u00fchren", 
            "title": "Vorlesung 9 - Web Security Grundlagen"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\n\n\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n  public class TestClass() {\n    int var = 1;\n    public method() {\n      return var;\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift   Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile    public class TestClass() {\n    int var = 1;\n    public method() {\n      return var;\n    }\n  }     1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin    Danger  Gefahr!    Warning  Warnung!   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }
    ]
}