{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nHerbstsemester 16\n\n\n\n\nAlgorithmen und Datenstrukturen 2\n\n\nBusiness und Recht 1\n\n\nRecht\n\n\nBusiness-Plan\n\n\n\n\n\n\nC++\n\n\nEnglish: How Things Work\n\n\nMobile and GUI Engineering\n\n\n.NET Technologien\n\n\nSoftware Engineering 1\n\n\nWeb Engineering + Design 2\n\n\n\n\nLinks\n\n\n\n\nSlack: \nhttps://hsr-students.slack.com\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#herbstsemester-16", 
            "text": "Algorithmen und Datenstrukturen 2  Business und Recht 1  Recht  Business-Plan    C++  English: How Things Work  Mobile and GUI Engineering  .NET Technologien  Software Engineering 1  Web Engineering + Design 2", 
            "title": "Herbstsemester 16"
        }, 
        {
            "location": "/#links", 
            "text": "Slack:  https://hsr-students.slack.com  MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/hs16/ad2/", 
            "text": "Algorithmen und Datenstrukturen 2\n\n\nVorlesung 1 - Binary Search Tree\n\n\n\n\nEin Heap hat das kleinste oder gr\u00f6sste Element als Root\n\n\nEine Suche auf einem Heap w\u00fcrde mit \nO(n)\n laufen, da man nicht weiss, welches Child jeweils kleiner / gr\u00f6sser ist\n\n\n\n\nMultimaps: Pro Key sind mehrere Values erlaubt\n\n\n\n\n\n\nFolie 5\n\nVoraussetzung: Random Access, Daten m\u00fcssen sortiert sein\n\n\n\n\n\n\nFolie 6\n \n\n\n\n\nInsert: Finden der richtigen Position: \nO(log(n))\n, Rest verschieben: \nO(n)\n\n\n\n\nRemove gleich wie Insert\n\n\n\n\n\n\n\n\nFolie 7\n  \n\n\n\n\nDer Baum muss so aufgebaut sein, dass der linke Child-Knoten immer \n= Parent-Node ist\n\n\nExterne Knoten speichern keine Daten. Wenn man beim Suchen einen Blattknoten erreicht, ist der Key nicht gefunden\n\n\nEine Inorder Traversierung besucht die Keys in aufsteigender Reihenfolge\n\n\n\n\n\n\n\n\nEinf\u00fcgen\n  \n\n\n\n\nSuchen nach dem einzuf\u00fcgenden Key\n\n\nMan wird auf einen \"Sentinel\" external Node treffen\n\n\nDort den neuen Key einf\u00fcgen und in einen internen Knoten umwandeln\n\n\nBei einer \nMultimap\n kann es mehrere gleiche Keys geben. Dann:\n\n\nfind, bis man auf den Knoten trifft\n\n\nnach links weiter suchen bis man auf einen external Node trifft\n\n\nDort einf\u00fcgen und in internen Node umwandeln\n\n\n\n\n\n\n\n\n\n\n\n\nL\u00f6schen\n  \n\n\n\n\nKnoten hat zwei Blatt-Kinder:\n\n\nL\u00f6sche v und sein linkes Child, rechtes Child rutscht nach oben\n\n\n\n\n\n\nKnoten hat ein Blatt-Kind:\n\n\nL\u00f6sche v und den Blatt-Knoten (links oder rechts), der andere Knoten (mit einem Key) rutscht nach oben\n\n\n\n\n\n\nKnoten hat keine Blatt-Kinder:\n\n\nFinde den Knoten \nw\n, der \nv\n in der Inorder-Traversierung folgt (\"links unten des rechten Teilbaums von \nv\n\")\n\n\nKopiere den Key von \nw\n zu \nV\n\n\nL\u00f6sche \nw\n mit dem gleichen Algorithmus wie bei Fall 1 und 2\n\n\n\n\n\n\nF\u00fcr die ersten beiden F\u00e4lle ist der Algorithmus derselbe\n\n\n\n\n\n\n\n\nPerformance\n  \n\n\n\n\nWorst Case: Komplett unbalancierter Baum (z.B. Einf\u00fcgen mit \nsortiertem\n Input). H\u00f6he ist \nO(n)\n. Dann ist es eine Linked-List\n\n\nBest Case: Mit der Mitte beginnen, komplett Balanciert.\n\n\nH\u00f6he \nlog(n)\n\n\n\n\nBalanciert sich nicht selbst (wie andere B\u00e4ume, s. sp\u00e4ter)\n\n\n\n\n\n\nImplementierung\n\n\nHier haben die Attribute der Klasse \nKnoten\n die Visibility \npackage\n, d.h es kann direkt darauf zugegriffen werden\n\n\nEinf\u00fcgen: Map (nicht Multimap). Wenn der Key schon vorhanden ist, bleibt er einfach bestehen (key wird zur\u00fcck gegeben)\n\n\n\n\n\n\n\n\n\n\nVorlesung 2 - AVL-Trees (1)\n\n\nBei einem AVL Tree muss f\u00fcr jeden Teilbaum gelten, dass die Kinder maximal einen H\u00f6henunterschied von 1 haben.", 
            "title": "AD2"
        }, 
        {
            "location": "/hs16/ad2/#algorithmen-und-datenstrukturen-2", 
            "text": "", 
            "title": "Algorithmen und Datenstrukturen 2"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-1-binary-search-tree", 
            "text": "Ein Heap hat das kleinste oder gr\u00f6sste Element als Root  Eine Suche auf einem Heap w\u00fcrde mit  O(n)  laufen, da man nicht weiss, welches Child jeweils kleiner / gr\u00f6sser ist   Multimaps: Pro Key sind mehrere Values erlaubt    Folie 5 \nVoraussetzung: Random Access, Daten m\u00fcssen sortiert sein    Folie 6     Insert: Finden der richtigen Position:  O(log(n)) , Rest verschieben:  O(n)   Remove gleich wie Insert     Folie 7      Der Baum muss so aufgebaut sein, dass der linke Child-Knoten immer  = Parent-Node ist  Externe Knoten speichern keine Daten. Wenn man beim Suchen einen Blattknoten erreicht, ist der Key nicht gefunden  Eine Inorder Traversierung besucht die Keys in aufsteigender Reihenfolge     Einf\u00fcgen      Suchen nach dem einzuf\u00fcgenden Key  Man wird auf einen \"Sentinel\" external Node treffen  Dort den neuen Key einf\u00fcgen und in einen internen Knoten umwandeln  Bei einer  Multimap  kann es mehrere gleiche Keys geben. Dann:  find, bis man auf den Knoten trifft  nach links weiter suchen bis man auf einen external Node trifft  Dort einf\u00fcgen und in internen Node umwandeln       L\u00f6schen      Knoten hat zwei Blatt-Kinder:  L\u00f6sche v und sein linkes Child, rechtes Child rutscht nach oben    Knoten hat ein Blatt-Kind:  L\u00f6sche v und den Blatt-Knoten (links oder rechts), der andere Knoten (mit einem Key) rutscht nach oben    Knoten hat keine Blatt-Kinder:  Finde den Knoten  w , der  v  in der Inorder-Traversierung folgt (\"links unten des rechten Teilbaums von  v \")  Kopiere den Key von  w  zu  V  L\u00f6sche  w  mit dem gleichen Algorithmus wie bei Fall 1 und 2    F\u00fcr die ersten beiden F\u00e4lle ist der Algorithmus derselbe     Performance      Worst Case: Komplett unbalancierter Baum (z.B. Einf\u00fcgen mit  sortiertem  Input). H\u00f6he ist  O(n) . Dann ist es eine Linked-List  Best Case: Mit der Mitte beginnen, komplett Balanciert.  H\u00f6he  log(n)   Balanciert sich nicht selbst (wie andere B\u00e4ume, s. sp\u00e4ter)    Implementierung  Hier haben die Attribute der Klasse  Knoten  die Visibility  package , d.h es kann direkt darauf zugegriffen werden  Einf\u00fcgen: Map (nicht Multimap). Wenn der Key schon vorhanden ist, bleibt er einfach bestehen (key wird zur\u00fcck gegeben)", 
            "title": "Vorlesung 1 - Binary Search Tree"
        }, 
        {
            "location": "/hs16/ad2/#vorlesung-2-avl-trees-1", 
            "text": "Bei einem AVL Tree muss f\u00fcr jeden Teilbaum gelten, dass die Kinder maximal einen H\u00f6henunterschied von 1 haben.", 
            "title": "Vorlesung 2 - AVL-Trees (1)"
        }, 
        {
            "location": "/hs16/reing/", 
            "text": "Recht\n\n\nVorlesung 1 - Vertragsrecht (I)\n\n\n\n\n\u00d6ffentliches Recht: Vom Staat aus, Staat handelt hoheitlich\n\n\nBundesstaatsrecht, Verwaltungsrecht, Strafrecht, etc.\n\n\n\n\n\n\nPrivatrecht: Zwei private (sind gleichgestellt)\n\n\nZGB, OR\n\n\n\n\n\n\n\n\nSchuldverh\u00e4ltnis\n\n\n\n\nObligation = Schuldverh\u00e4ltnis\n\n\nWichtigste Grunds\u00e4tze basieren auf r\u00f6mischem Recht\n\n\nMind. 1 Person muss etwas leisten, mind. 1 Person darf etwas fordern\n\n\nEntstehungsgr\u00fcnde\n\n\nGesetz\n\n\nunerlaubte Handlung (OR 41, 58)\n\n\nungerechtfertigte Bereicherung (62 II, 63 I OR), z.B. Fehl\u00fcberweisung\n\n\n\n\n\n\nRechtsgesch\u00e4ft\n\n\nSchuldverh\u00e4ltnis aufgrund einer (privaten) Willens\u00e4usserung\n\n\nEinseitiges Rechtsgesch\u00e4ft: Willens\u00e4usserung einer Person (z.B. Testament)\n\n\nzwei- oder mehrseitige Rechtsgesch\u00e4fte, Wissens\u00e4usserung mehrerer Personen, z.B. \nVertr\u00e4ge\n\n\n\n\n\n\n\n\n\n\nWillens\u00e4usserung\n\n\nJe nach Art ist die \u00c4usserung unterschiedlich lang g\u00fcltig\n\n\nausdr\u00fccklich / stillschweigend (konkludente)\n\n\nunmittelbare / mittelbare: Direkter Dialog beider Parteien. Mittelbar: E-mail oder Brief (l\u00e4nger g\u00fcltig)\n\n\nempfangsbed\u00fcrftige / nicht empfangsbed\u00fcrftige\n\n\n\n\n\n\n\n\nVertragsschluss\n\n\n\n\nEs braucht gegenseitige Willens\u00e4usserung (Antrag -\n Annahme)\n\n\nAntrag kann mit oder ohne Annahmefrist gestellt werden\n\n\nohne Annahmefrist: Unterscheidung unter A\nn\nwesenden oder unter A\nb\nwesenden\n\n\n\n\n\n\nFolie 16\n\n\nBefristeter Antrag (Zeitzone des Antragstellers)\n\n\nAntrag unter Anwesenden (\"Haust\u00fcrgesch\u00e4ft\" kann widerrufen werden innert 7 Tagen)\n\n\nAntrag unter Abwesenden (ca 5 Tage Frist)\n\n\nBei niedrigem Wert darf das Buch behalten werden (\"Die unbestelle Zustellung einer Sache stellt \nkein Antrag\n dar\")\n\n\n\n\n\n\nVoraussetzungen\n\n\nhandlungsf\u00e4hige Personen (ZGB 12) (m\u00fcndig und handlungsf\u00e4hig)\n\n\n\u00fcbereinstimmende Willens\u00e4usserung (Antrag / Annahme)\n\n\nEinigung \u00fcber wesentliche Punkte\n\n\n\n\n\n\nEinseitige Vertr\u00e4ge: z.B. Schenkung\n\n\nzweiseitige Vertr\u00e4ge: Beiden Parteien haben Leitsungspflicht\n\n\nvolkommen zweiseitig: Miete, Kauf\n\n\nunvolkommen zweiseitig: z.B. unentgeltlicher Auftrag, eine Leistung wird h\u00f6her gewichtet als die andere\n\n\n\n\n\n\nNomninatvertr\u00e4ge: Im Gesetzt (OR) geregelt, z.B. Kauf\n\n\nInnominatvertr\u00e4ge: gesetzlich nicht geregelt, z.B. Leasing\n\n\nBeispiele \nFolie 21\n\n\nMiete: \nNominatvertrag\n (viele zwingende Bestimmunge zum Schutz des Mieters)\n\n\nWerkvertrag: \nNominatertrag\n (Im Unterschied zum Kaufvertrag exisitert das Produkt bei Vertragsabschluss noch nicht, Erstellung eines Werkes)\n\n\nFranchising: \nInnominatvertrag\n\n\nFactoring: \nInnominatvertrag\n (Zahlungsschuld/Inkasso verkaufen an einen Factor)\n\n\nArbeitsvertrag: \nNominatvertrag\n\n\nSponsoring: \nInnominatvertrag\n\n\n\n\n\n\nVertragsfreiheit\n\n\nDie Form und der Inhalt ist frei w\u00e4hlbar\n\n\nEr kann nachtr\u00e4glich ver\u00e4ndert oder aufgehoben werden (beidseitig)\n\n\n\n\n\n\nSchranken der Vertragsfreiheit\n\n\nWiderrechtlichkeit: Verstoss gegen zwingendes Gesetz\n\n\n\u00f6ffentliche Ordnung\n\n\nSittenwidrigkeit\n\n\nVerstoss gegen Pers\u00f6nlichkeitsrecht\n\n\nUnm\u00f6glichkeit (z.B. Grundst\u00fcck auf dem Mond)\n\n\n-\n Folge: Vertrag ist nichtig\n\n\nBeispiele \nFolie 24\n\n\nWiderrechtlich\n\n\nWenn zwischen H und Z bereits ein Kaufvertrag besteht -\n Doppelverkauf. H muss zweites Abendkleid oder Schadenersatz leisten\n\n\nNichtig, Verstoss gegen Pers\u00f6nlichkeitsrecht\n\n\nNichtig. Kann gegen Pers\u00f6nlichkeitsrecht verstossen, wegem langer Vertragslaufzeit (ab 20 Jahre nach BG). Auch juristische Personen k\u00f6nnen sich auf das Pers\u00f6nlichkeitsrecht verstossen\n\n\n\n\n\n\n\n\n\n\n\n\nVorlesung 2 - Vertragsrecht (II)\n\n\n\n\nAnwendung\n\n\nIn jedem Fall sind die zwingenden Gesetze anzuwenden, keine Abweichung m\u00f6glich\n\n\nWo das Gesetzt nicht zwingend ist, kann vertraglich etwas anderes vereinbar werden\n\n\nWenn nichts vereinbart, gelten nicht zwingende Gesetzesnormen\n\n\n\n\n\n\n\n\nFormvorschriften\n\n\n\n\nVertrag kann auch ohne Form zustande kommen, z.B. etwas mit einem Preisschild ausstellen oder \"self-checkout\"\n\n\nGesetz kann eine Form vorschreiben\n\n\nz.B. Grundst\u00fcckkaufvertrag muss im Grundbuchregister eingetragen und von einem Notar beglaubigt werden (\u00f6ffentliche Beurkundung)\n\n\n\n\n\n\nFormvorschriften\n\n\neinfache Schriftlichkeit: Unterschrift oder digitale Signatur\n\n\nqualifizierte Schriftlichkeit (zus\u00e4tzliche Anforderungen)\n\n\n\u00f6ffentliche Beurkundung: Normalerweise durch Notariat\n\n\n\n\n\n\nBeispiele Folie 30\n\n\nEhevertrag (nicht die Eheschliessung, sondern z.B. G\u00fctertrennung): \n\u00f6ffentliche Beurkundung\n\n\nAuftrag: \nKeine Formvorschriften\n\n\nErbvertrag (im Unterschied zum Testament zweiseitiges Rechtsgesch\u00e4ft): \n\u00f6ffentliche Beurkundung\n\n\nArbeitsvertrag: \nKeine Form vorgeschrieben\n\n\nMietvertrag: \nKeine Form vorgeschrieben\n\n\n\n\n\n\nGrundsatz\n: Vertrag muss eingehalten werden und kann nicht einseitig aufgel\u00f6st werden. Ausnahme bei Streitfall (Zivilprozess)\n\n\n\n\nVertragserf\u00fcllung\n\n\n\n\nWer? h\u00f6chspers\u00f6nliche Leistung (v.a. Dienstleistung) durch Schuldner, andere Leistungen auch durch Dritte (Sach- und Geldleistungen)\n\n\nWas? \nvertraglich\n vereinbarte Leistung oder \ngesetzlich\n geschuldete Leistung\n\n\nWo? Erf\u00fcllungsort (vertraglich vereinbart oder gesetzlich). Geldschulden sind Bringschulden, alle \u00fcbrigen Holschulden\n\n\nWann? zur Erf\u00fcllungszeit (vertraglich vereinbart oder gesetzlich). Lohn z.B. Ende Monat, ansonsten normalerweise sofort / unmittelbar\n\n\nBeispiele Folie 37\n\n\nWenn der Chefarzt beauftragt wurde, kann es nur von ihm erf\u00fcllt werden\n\n\nWein hat je nach Jahrgang unterschiedlicher Preis. Evtl. wurde dann nicht die geschuldete Leistung erbracht\n\n\nKeine Gelschuld, also \nHol\nschuld. Ausser es wurde eine Lieferung vereinbart\n\n\nH\u00e4ufig wird F\u00e4lligkeitsdatum vereinbart. Gesetzt schreibt nichts vor, sie w\u00e4re erst Ende Monat geschuldet\n\n\n\n\n\n\n\n\nLeistungsst\u00f6rung, Verzugsfolgen, Durchsetzung der Forderung\n\n\n\n\nNichtleistung: Kommt darauf an, ob der Schuldner es selbst zu verschulden kan\n\n\nSchlechtleistung: Das falsche geleistet oder Verletzung einer Nebenpflicht (z.B. Lieferung)\n\n\nSp\u00e4tleistung: Nicht rechtzeitige Erf\u00fcllung\n\n\npositivies Interesse: So, wie der Vertrag erf\u00fcllt worden w\u00e4re\n\n\nnegatives Interesse: so, als ob der Vertrag nie stattgefunden h\u00e4tte\n\n\nBetreibungsverfahren: Am Wohnsitz des Schuldners -\n Betreibungsbegehren. Wenn vom Schuldner Rechtsvorschlag erhoben wird, muss der Gl\u00e4ubiger die Rechtfertigkeit beweisen\n\n\nWenn der Schuldner im Ausland wohnt, muss er auch im Ausland betrieben werden (Konsumentenvorschrift im Raum EU)\n\n\nVerj\u00e4hrung\n\n\nForderung besteht noch, ist aber nicht mehr zwangsweise durchzusetzen (bei Betreibung)\n\n\nMeist nach 10 Jahren verj\u00e4hrt\n\n\nPeriodische Forderungen verj\u00e4hren nach 5 Jahren\n\n\nZweck: Erhaltung der Rechtssicherheit und des Rechtsfriedens", 
            "title": "ReIng"
        }, 
        {
            "location": "/hs16/reing/#recht", 
            "text": "", 
            "title": "Recht"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-1-vertragsrecht-i", 
            "text": "\u00d6ffentliches Recht: Vom Staat aus, Staat handelt hoheitlich  Bundesstaatsrecht, Verwaltungsrecht, Strafrecht, etc.    Privatrecht: Zwei private (sind gleichgestellt)  ZGB, OR", 
            "title": "Vorlesung 1 - Vertragsrecht (I)"
        }, 
        {
            "location": "/hs16/reing/#schuldverhaltnis", 
            "text": "Obligation = Schuldverh\u00e4ltnis  Wichtigste Grunds\u00e4tze basieren auf r\u00f6mischem Recht  Mind. 1 Person muss etwas leisten, mind. 1 Person darf etwas fordern  Entstehungsgr\u00fcnde  Gesetz  unerlaubte Handlung (OR 41, 58)  ungerechtfertigte Bereicherung (62 II, 63 I OR), z.B. Fehl\u00fcberweisung    Rechtsgesch\u00e4ft  Schuldverh\u00e4ltnis aufgrund einer (privaten) Willens\u00e4usserung  Einseitiges Rechtsgesch\u00e4ft: Willens\u00e4usserung einer Person (z.B. Testament)  zwei- oder mehrseitige Rechtsgesch\u00e4fte, Wissens\u00e4usserung mehrerer Personen, z.B.  Vertr\u00e4ge      Willens\u00e4usserung  Je nach Art ist die \u00c4usserung unterschiedlich lang g\u00fcltig  ausdr\u00fccklich / stillschweigend (konkludente)  unmittelbare / mittelbare: Direkter Dialog beider Parteien. Mittelbar: E-mail oder Brief (l\u00e4nger g\u00fcltig)  empfangsbed\u00fcrftige / nicht empfangsbed\u00fcrftige", 
            "title": "Schuldverh\u00e4ltnis"
        }, 
        {
            "location": "/hs16/reing/#vertragsschluss", 
            "text": "Es braucht gegenseitige Willens\u00e4usserung (Antrag -  Annahme)  Antrag kann mit oder ohne Annahmefrist gestellt werden  ohne Annahmefrist: Unterscheidung unter A n wesenden oder unter A b wesenden    Folie 16  Befristeter Antrag (Zeitzone des Antragstellers)  Antrag unter Anwesenden (\"Haust\u00fcrgesch\u00e4ft\" kann widerrufen werden innert 7 Tagen)  Antrag unter Abwesenden (ca 5 Tage Frist)  Bei niedrigem Wert darf das Buch behalten werden (\"Die unbestelle Zustellung einer Sache stellt  kein Antrag  dar\")    Voraussetzungen  handlungsf\u00e4hige Personen (ZGB 12) (m\u00fcndig und handlungsf\u00e4hig)  \u00fcbereinstimmende Willens\u00e4usserung (Antrag / Annahme)  Einigung \u00fcber wesentliche Punkte    Einseitige Vertr\u00e4ge: z.B. Schenkung  zweiseitige Vertr\u00e4ge: Beiden Parteien haben Leitsungspflicht  volkommen zweiseitig: Miete, Kauf  unvolkommen zweiseitig: z.B. unentgeltlicher Auftrag, eine Leistung wird h\u00f6her gewichtet als die andere    Nomninatvertr\u00e4ge: Im Gesetzt (OR) geregelt, z.B. Kauf  Innominatvertr\u00e4ge: gesetzlich nicht geregelt, z.B. Leasing  Beispiele  Folie 21  Miete:  Nominatvertrag  (viele zwingende Bestimmunge zum Schutz des Mieters)  Werkvertrag:  Nominatertrag  (Im Unterschied zum Kaufvertrag exisitert das Produkt bei Vertragsabschluss noch nicht, Erstellung eines Werkes)  Franchising:  Innominatvertrag  Factoring:  Innominatvertrag  (Zahlungsschuld/Inkasso verkaufen an einen Factor)  Arbeitsvertrag:  Nominatvertrag  Sponsoring:  Innominatvertrag    Vertragsfreiheit  Die Form und der Inhalt ist frei w\u00e4hlbar  Er kann nachtr\u00e4glich ver\u00e4ndert oder aufgehoben werden (beidseitig)    Schranken der Vertragsfreiheit  Widerrechtlichkeit: Verstoss gegen zwingendes Gesetz  \u00f6ffentliche Ordnung  Sittenwidrigkeit  Verstoss gegen Pers\u00f6nlichkeitsrecht  Unm\u00f6glichkeit (z.B. Grundst\u00fcck auf dem Mond)  -  Folge: Vertrag ist nichtig  Beispiele  Folie 24  Widerrechtlich  Wenn zwischen H und Z bereits ein Kaufvertrag besteht -  Doppelverkauf. H muss zweites Abendkleid oder Schadenersatz leisten  Nichtig, Verstoss gegen Pers\u00f6nlichkeitsrecht  Nichtig. Kann gegen Pers\u00f6nlichkeitsrecht verstossen, wegem langer Vertragslaufzeit (ab 20 Jahre nach BG). Auch juristische Personen k\u00f6nnen sich auf das Pers\u00f6nlichkeitsrecht verstossen", 
            "title": "Vertragsschluss"
        }, 
        {
            "location": "/hs16/reing/#vorlesung-2-vertragsrecht-ii", 
            "text": "Anwendung  In jedem Fall sind die zwingenden Gesetze anzuwenden, keine Abweichung m\u00f6glich  Wo das Gesetzt nicht zwingend ist, kann vertraglich etwas anderes vereinbar werden  Wenn nichts vereinbart, gelten nicht zwingende Gesetzesnormen", 
            "title": "Vorlesung 2 - Vertragsrecht (II)"
        }, 
        {
            "location": "/hs16/reing/#formvorschriften", 
            "text": "Vertrag kann auch ohne Form zustande kommen, z.B. etwas mit einem Preisschild ausstellen oder \"self-checkout\"  Gesetz kann eine Form vorschreiben  z.B. Grundst\u00fcckkaufvertrag muss im Grundbuchregister eingetragen und von einem Notar beglaubigt werden (\u00f6ffentliche Beurkundung)    Formvorschriften  einfache Schriftlichkeit: Unterschrift oder digitale Signatur  qualifizierte Schriftlichkeit (zus\u00e4tzliche Anforderungen)  \u00f6ffentliche Beurkundung: Normalerweise durch Notariat    Beispiele Folie 30  Ehevertrag (nicht die Eheschliessung, sondern z.B. G\u00fctertrennung):  \u00f6ffentliche Beurkundung  Auftrag:  Keine Formvorschriften  Erbvertrag (im Unterschied zum Testament zweiseitiges Rechtsgesch\u00e4ft):  \u00f6ffentliche Beurkundung  Arbeitsvertrag:  Keine Form vorgeschrieben  Mietvertrag:  Keine Form vorgeschrieben    Grundsatz : Vertrag muss eingehalten werden und kann nicht einseitig aufgel\u00f6st werden. Ausnahme bei Streitfall (Zivilprozess)", 
            "title": "Formvorschriften"
        }, 
        {
            "location": "/hs16/reing/#vertragserfullung", 
            "text": "Wer? h\u00f6chspers\u00f6nliche Leistung (v.a. Dienstleistung) durch Schuldner, andere Leistungen auch durch Dritte (Sach- und Geldleistungen)  Was?  vertraglich  vereinbarte Leistung oder  gesetzlich  geschuldete Leistung  Wo? Erf\u00fcllungsort (vertraglich vereinbart oder gesetzlich). Geldschulden sind Bringschulden, alle \u00fcbrigen Holschulden  Wann? zur Erf\u00fcllungszeit (vertraglich vereinbart oder gesetzlich). Lohn z.B. Ende Monat, ansonsten normalerweise sofort / unmittelbar  Beispiele Folie 37  Wenn der Chefarzt beauftragt wurde, kann es nur von ihm erf\u00fcllt werden  Wein hat je nach Jahrgang unterschiedlicher Preis. Evtl. wurde dann nicht die geschuldete Leistung erbracht  Keine Gelschuld, also  Hol schuld. Ausser es wurde eine Lieferung vereinbart  H\u00e4ufig wird F\u00e4lligkeitsdatum vereinbart. Gesetzt schreibt nichts vor, sie w\u00e4re erst Ende Monat geschuldet", 
            "title": "Vertragserf\u00fcllung"
        }, 
        {
            "location": "/hs16/reing/#leistungsstorung-verzugsfolgen-durchsetzung-der-forderung", 
            "text": "Nichtleistung: Kommt darauf an, ob der Schuldner es selbst zu verschulden kan  Schlechtleistung: Das falsche geleistet oder Verletzung einer Nebenpflicht (z.B. Lieferung)  Sp\u00e4tleistung: Nicht rechtzeitige Erf\u00fcllung  positivies Interesse: So, wie der Vertrag erf\u00fcllt worden w\u00e4re  negatives Interesse: so, als ob der Vertrag nie stattgefunden h\u00e4tte  Betreibungsverfahren: Am Wohnsitz des Schuldners -  Betreibungsbegehren. Wenn vom Schuldner Rechtsvorschlag erhoben wird, muss der Gl\u00e4ubiger die Rechtfertigkeit beweisen  Wenn der Schuldner im Ausland wohnt, muss er auch im Ausland betrieben werden (Konsumentenvorschrift im Raum EU)  Verj\u00e4hrung  Forderung besteht noch, ist aber nicht mehr zwangsweise durchzusetzen (bei Betreibung)  Meist nach 10 Jahren verj\u00e4hrt  Periodische Forderungen verj\u00e4hren nach 5 Jahren  Zweck: Erhaltung der Rechtssicherheit und des Rechtsfriedens", 
            "title": "Leistungsst\u00f6rung, Verzugsfolgen, Durchsetzung der Forderung"
        }, 
        {
            "location": "/hs16/bupl/", 
            "text": "Business Plan\n\n\nModularbeit\n\n\n\n\nAbgabe Mittwoch, 21. Dez\n\n\nAufbau aus 1. Vorlesung Folie 10 \u00fcbernehmen\n\n\nca. 20 Seiten\n\n\nEigenst\u00e4ndigkeitserkl\u00e4rung\n\n\nGebunden\n\n\nKurzbeschreibung auf Deckblatt\n\n\n\n\nGesch\u00e4ftsidee\n\n\n\n\nMarktorientierte Definition: Was ist der Kundennutze?\n\n\nMarket Pull: Es gibt einen markt daf\u00fcr (ungel\u00f6stes Problem), das man l\u00f6sen m\u00f6chte\n\n\nTechnology Push: Neue Technologien bringen neue Dienstleistungen, der Markt muss sich zuerst entwickeln\n\n\n\"Copycat\" Z.b. auch Ideen, die in Japan/USA schon funktionieren, aber noch nicht hier sind\n\n\n\n\nElevator Pitch\n\n\n\n\nWhat is your product?\n\n\nWho is your market?\n\n\nWhat is your revenue model? (How do you expect to make money?)\n\n\nWho is behind the company?\n\n\nWho is your competition?\n\n\nWhat is your competitive advantage?\n\n\n\n\nGesch\u00e4ftsmodelle", 
            "title": "BuPl"
        }, 
        {
            "location": "/hs16/bupl/#business-plan", 
            "text": "", 
            "title": "Business Plan"
        }, 
        {
            "location": "/hs16/bupl/#modularbeit", 
            "text": "Abgabe Mittwoch, 21. Dez  Aufbau aus 1. Vorlesung Folie 10 \u00fcbernehmen  ca. 20 Seiten  Eigenst\u00e4ndigkeitserkl\u00e4rung  Gebunden  Kurzbeschreibung auf Deckblatt", 
            "title": "Modularbeit"
        }, 
        {
            "location": "/hs16/bupl/#geschaftsidee", 
            "text": "Marktorientierte Definition: Was ist der Kundennutze?  Market Pull: Es gibt einen markt daf\u00fcr (ungel\u00f6stes Problem), das man l\u00f6sen m\u00f6chte  Technology Push: Neue Technologien bringen neue Dienstleistungen, der Markt muss sich zuerst entwickeln  \"Copycat\" Z.b. auch Ideen, die in Japan/USA schon funktionieren, aber noch nicht hier sind", 
            "title": "Gesch\u00e4ftsidee"
        }, 
        {
            "location": "/hs16/bupl/#elevator-pitch", 
            "text": "What is your product?  Who is your market?  What is your revenue model? (How do you expect to make money?)  Who is behind the company?  Who is your competition?  What is your competitive advantage?", 
            "title": "Elevator Pitch"
        }, 
        {
            "location": "/hs16/bupl/#geschaftsmodelle", 
            "text": "", 
            "title": "Gesch\u00e4ftsmodelle"
        }, 
        {
            "location": "/hs16/cpi/", 
            "text": "C++\n\n\n\n\nWiki: \nhttps://wiki.ifs.hsr.ch/CPlusPlus/wiki.cgi?CPlusPlus\n\n\nC++ Referenz: \nhttp://en.cppreference.com/w/cpp\n\n\n\n\nVorlesung 1\n\n\n\n\n\"Undefined Behaviour\": Verhalten nicht definiert, wenn z.B. Divison durch 0 oder Segmentation fault (\"Es kann alles passieren\"). Schlimmster Fall: Es l\u00e4uft!\n\n\nHelloWorld:\n\n\n#include\n: Pr\u00e4prozessor Anweisung\n\n\nusing namespace std;\n: Kann alle Namen ohne \nstd::\n benutzen. Man kann dann nicht sagen, aus welchem Namespace eine Anweisung kommt, oder ob es eine Variable oder Funktion etc. ist\n\n\n: Links Shift, ist Teil der Bibliothek (Operator Overloading). Quasi Funktionsaufruf mit string-literal als Argument\n\n\ncout\n: Ein Stream von \nstd\n\n\nendl\n ist eine Funktion, flusht den Stream\n\n\n\n\n\n\nCompilation\n\n\nIm Header (z.B. \niostream\n) stehen die Definitionen (z.B. dass es \ncout\n gibt)\n\n\nDer Linker linkt die standard library (dort ist \ncout\n implementiert)\n\n\n\n\n\n\nStrings z.B. werden im Unterschied zu Java direkt auf dem Stack abgelegt\n\n\nKlassen: \nstruct\n heisst public, \nclass\n privat\n\n\nEin private bzw. public block mit \npublic:\n, \nprivate:\n bezeichnen, alles ab dort hat dann den Scope\n\n\nNach Klassendefinition ein \n;\n: \nsruct Hello {...};\n\n\n\n\n\n\n\n\n\n\nVorlesung 2\n\n\nRepetition: \n- Wir trennen Header von Source-Files, um die Deklaration von der Implementierung zu trennen\n- \niostream\n, \niosfwd\n und \nostream\n sind Libraries mit unterschiedlichem Umfang. \niosfwd\n ist die Kleinste, \niostream\n die Gr\u00f6sste (mit u.a. \nstd::cout\n)\n\n\nVariablen / Datentypen\n\n\n\n\ntype\n \nname\n {\nvalue\n}\n\n\nWenn eine Klasse mit \nconst\n initialisiert wird, d\u00fcrfen darauf nur Member-Funktionen aufgerufen werden, die \nconst\n sind (\nvoid helloWorld() const {...}\n)\n\n\nconstexpr\n berechnet den Wert zu Compilezeit: \ndouble constexpr pi{3.14}\n\n\nImmer \nconst\n verwenden wenn m\u00f6glich!\n\n\nVariablendefinitionen \"close to use\"\n\n\nbool\n und \nchar\n sind im Hintergrund Integers\n\n\nstring\n und \nvector\n sind in der Standardbibliothek und m\u00fcssen importiert werden\n\n\nL\u00e4nge von int, long, etc sind nicht fix definiert (nur short \n int \n long \n long long)\n\n\nGleitkommazahlen sind \ndouble\n wenn nicht explizit angegeben\n\n\nString-Literale sind char-Arrays (nicht \nstd::string\n). Umwandlung mit \n\"string\"s\n mit \nusing namespace std::literals\n\n\nR\"\nstring\n\"\n sind Raw-Strings. Zeichen m\u00fcssen nicht escaped werden (wie \n@\"\"\n in C#)\n\n\nAlles != 0 -\n true, 0 -\n false\n\n\nFloat nur verwenden, wenn Speicher knapp ist\n\n\nNaN ist ungleich jeder Zahl\n\n\nStrings (std::string) sind mutable, k\u00f6nnen also ver\u00e4ndert werden\n\n\nArgumente werden normalerweise \"by-value\" \u00fcbergeben. F\u00fcr \"by-reference\" als Argument ein \n vor den Namen setzen\n\n\nFolie 20: Reihenfolge der Aufrufe in den Funktionsargumenten ist nicht definiert (welches \ninputName()\n hier zuerst ausgef\u00fchrt wird)\n\n\nStreams: Wenn ein stream erst mal \"kaputt\" geht (!stream.good()) muss er zuerst zur\u00fcck gesetzt werden mit clear()\n\n\niomanip\n: z.B. \nstd::oct\n: Alle folgenden Zeichen, die in den Stream geschrieben werden, werden als oktal interpretiert\n\n\n\n\n\u00dcbung 2\n\n\nStd-Library\n\n\n\n\nstd::cin\n: iostream\n\n\nstd:endl\n: endl\n\n\nstd::tolower\n: cctype\n\n\nstd::string\n: string\n\n\nstd::distance\n: iterator\n\n\nstd::istream_iterator\n: iterator\n\n\nstd::size_t\n: cstddef\n\n\nstd::vector\n: vector\n\n\n\n\nTypes\n\n\n\n\n45: int\n\n\n0XDULL: unsigned long long 0xd (=13)\n\n\n5.75: double 5.57\n\n\n.2f: 0.2 float\n\n\n\"string\": char-Array\n\n\n'': char\n\n\n\n\nstreams\n\n\nint i{};\nstd::cin \n i;\nstd::cout \n \ninput: \n \n i \n \n\\n\n;\nstd::cout \n \nfail: \n \n std::cin.fail() \n \n\\n\n;\nstd::cout \n \neof: \n \n std::cin.eof() \n \n\\n\n;\nstd::cout \n \nbad: \n \n std::cin.bad() \n \n\\n\n;\n\n\n\n\n\n\nWenn man ein Zeichen (keine Zahl eingibt), wird \nfail()\n = 1\n\n\nWenn man Enter dr\u00fcckt, wird es ignoriert und weiter auf einen input gewartet\n\n\nWhitespace wird ignoriert", 
            "title": "C++"
        }, 
        {
            "location": "/hs16/cpi/#c", 
            "text": "Wiki:  https://wiki.ifs.hsr.ch/CPlusPlus/wiki.cgi?CPlusPlus  C++ Referenz:  http://en.cppreference.com/w/cpp", 
            "title": "C++"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-1", 
            "text": "\"Undefined Behaviour\": Verhalten nicht definiert, wenn z.B. Divison durch 0 oder Segmentation fault (\"Es kann alles passieren\"). Schlimmster Fall: Es l\u00e4uft!  HelloWorld:  #include : Pr\u00e4prozessor Anweisung  using namespace std; : Kann alle Namen ohne  std::  benutzen. Man kann dann nicht sagen, aus welchem Namespace eine Anweisung kommt, oder ob es eine Variable oder Funktion etc. ist  : Links Shift, ist Teil der Bibliothek (Operator Overloading). Quasi Funktionsaufruf mit string-literal als Argument  cout : Ein Stream von  std  endl  ist eine Funktion, flusht den Stream    Compilation  Im Header (z.B.  iostream ) stehen die Definitionen (z.B. dass es  cout  gibt)  Der Linker linkt die standard library (dort ist  cout  implementiert)    Strings z.B. werden im Unterschied zu Java direkt auf dem Stack abgelegt  Klassen:  struct  heisst public,  class  privat  Ein private bzw. public block mit  public: ,  private:  bezeichnen, alles ab dort hat dann den Scope  Nach Klassendefinition ein  ; :  sruct Hello {...};", 
            "title": "Vorlesung 1"
        }, 
        {
            "location": "/hs16/cpi/#vorlesung-2", 
            "text": "Repetition: \n- Wir trennen Header von Source-Files, um die Deklaration von der Implementierung zu trennen\n-  iostream ,  iosfwd  und  ostream  sind Libraries mit unterschiedlichem Umfang.  iosfwd  ist die Kleinste,  iostream  die Gr\u00f6sste (mit u.a.  std::cout )", 
            "title": "Vorlesung 2"
        }, 
        {
            "location": "/hs16/cpi/#variablen-datentypen", 
            "text": "type   name  { value }  Wenn eine Klasse mit  const  initialisiert wird, d\u00fcrfen darauf nur Member-Funktionen aufgerufen werden, die  const  sind ( void helloWorld() const {...} )  constexpr  berechnet den Wert zu Compilezeit:  double constexpr pi{3.14}  Immer  const  verwenden wenn m\u00f6glich!  Variablendefinitionen \"close to use\"  bool  und  char  sind im Hintergrund Integers  string  und  vector  sind in der Standardbibliothek und m\u00fcssen importiert werden  L\u00e4nge von int, long, etc sind nicht fix definiert (nur short   int   long   long long)  Gleitkommazahlen sind  double  wenn nicht explizit angegeben  String-Literale sind char-Arrays (nicht  std::string ). Umwandlung mit  \"string\"s  mit  using namespace std::literals  R\" string \"  sind Raw-Strings. Zeichen m\u00fcssen nicht escaped werden (wie  @\"\"  in C#)  Alles != 0 -  true, 0 -  false  Float nur verwenden, wenn Speicher knapp ist  NaN ist ungleich jeder Zahl  Strings (std::string) sind mutable, k\u00f6nnen also ver\u00e4ndert werden  Argumente werden normalerweise \"by-value\" \u00fcbergeben. F\u00fcr \"by-reference\" als Argument ein   vor den Namen setzen  Folie 20: Reihenfolge der Aufrufe in den Funktionsargumenten ist nicht definiert (welches  inputName()  hier zuerst ausgef\u00fchrt wird)  Streams: Wenn ein stream erst mal \"kaputt\" geht (!stream.good()) muss er zuerst zur\u00fcck gesetzt werden mit clear()  iomanip : z.B.  std::oct : Alle folgenden Zeichen, die in den Stream geschrieben werden, werden als oktal interpretiert", 
            "title": "Variablen / Datentypen"
        }, 
        {
            "location": "/hs16/cpi/#ubung-2", 
            "text": "", 
            "title": "\u00dcbung 2"
        }, 
        {
            "location": "/hs16/cpi/#std-library", 
            "text": "std::cin : iostream  std:endl : endl  std::tolower : cctype  std::string : string  std::distance : iterator  std::istream_iterator : iterator  std::size_t : cstddef  std::vector : vector", 
            "title": "Std-Library"
        }, 
        {
            "location": "/hs16/cpi/#types", 
            "text": "45: int  0XDULL: unsigned long long 0xd (=13)  5.75: double 5.57  .2f: 0.2 float  \"string\": char-Array  '': char", 
            "title": "Types"
        }, 
        {
            "location": "/hs16/cpi/#streams", 
            "text": "int i{};\nstd::cin   i;\nstd::cout    input:     i    \\n ;\nstd::cout    fail:     std::cin.fail()    \\n ;\nstd::cout    eof:     std::cin.eof()    \\n ;\nstd::cout    bad:     std::cin.bad()    \\n ;   Wenn man ein Zeichen (keine Zahl eingibt), wird  fail()  = 1  Wenn man Enter dr\u00fcckt, wird es ignoriert und weiter auf einen input gewartet  Whitespace wird ignoriert", 
            "title": "streams"
        }, 
        {
            "location": "/hs16/englhtw/", 
            "text": "English: How Things Work\n\n\nPresentation\n\n\n\n\n10min\n\n\nTechnical Process\n\n\nIdeas\n\n\nWhat it takes to go to space / to mars", 
            "title": "EnglHTw"
        }, 
        {
            "location": "/hs16/englhtw/#english-how-things-work", 
            "text": "", 
            "title": "English: How Things Work"
        }, 
        {
            "location": "/hs16/englhtw/#presentation", 
            "text": "10min  Technical Process  Ideas  What it takes to go to space / to mars", 
            "title": "Presentation"
        }, 
        {
            "location": "/hs16/mge/", 
            "text": "Mobile and GUI Engineering\n\n\nPr\u00fcfung\n\n\n\n\nPro Teil 1h\n\n\nPro Teil 10 A4-Seiten Zusammenfassung\n\n\n\n\nVorlesung 1 - Einf\u00fchrung Android\n\n\n\n\n\n\nMiniprojekt Abgabe Woche 7 und Woche 14\n\n\n\n\n\n\nAndroid Basics\n\n\n\n\nJava 7 auf Android\n\n\nActivities sind ~\"Screens\"\n\n\nApps werden automatisch geschlossen\n\n\nAllgemein wird der Lifecylce stark vom System gesteuert\n\n\nEine Activity sollte eine einzelne Aufgabe realisieren\n\n\nActivity kann sich in verschiedenen Zust\u00e4nden befinden: Wird gestartet, ist aktiv, wird in den Hintergrund gehen, etc.\n\n\nDie einzelnen Methoden werden \u00fcberschrieben (z.B. \nonCreate()\n)\n\n\nStart einer Activity: \nonCreate()\n, \nonStart()\n, \nonResume()\n, erst dann ist sie interagierbar\n\n\nWird eine Activity \u00fcberdeckt, wird sie pausiert \nonPause()\n. Kommt sie wieder in den Vordergrund, wird nur \nonResume()\n aufgerufen\n\n\nonDestroy()\n k\u00f6nnte auch direkt anderen Zust\u00e4nden aufgerufen werden!\n\n\nBei Konfigurations\u00e4nderungen wird die Activity neu gestartet (zerst\u00f6rt und neu aufgebaut). Also auch z.B. beim Drehen des Screens!\n\n\nDaten in \nonPause()\n sichern\n\n\nActivities werden in einem Stack verwaltet (muss nicht von gleicher App sein)\n\n\nDer Back-Button poped normalerweise die oberste Activity auf dem Stack\n\n\nEine Gruppe von Activities (= Activity Stack) heissen \"Task\"\n\n\nEine ge\u00f6ffnete App ist ein Task, bzw. ist ein Eintrag im \"Overview Screen\" ein Task\n\n\n\n\n\n\nSystemsicht\n\n\nPro APK wird ein Prozess mit einem Thread gestartet\n\n\nJede APK wird unter eigenem Linux User installiert\n\n\nAPKs sind quasi JARs (= Zip-Files) \n\n\n\n\n\n\nIntents\n\n\nAlle Intents werden \u00fcber das System verwaltet\n\n\nExpliziter Intent: Eine bestimmte Klasse ansprechen\n\n\nImpliziter Intent: z.B. \"Absicht, Bild aufzunehmen\"\n\n\nExplizite Intents normalerweise f\u00fcr interne Activities, implizite f\u00fcr generische Aktionen\n\n\n\n\n\n\nViews\n\n\nAlles, was der Benutzer sieht\n\n\nJede Activity hat eine View\n\n\nGUI kann deklarativ mit XMl oder imperativ mit Java Code erstellt werden\n\n\n\n\n\n\n\n\nVorlesung 2 - Grundlagen GUI\n\n\n\n\nEine \nView\n ist immer eine Rechteckige Fl\u00e4che, f\u00fcr die die View verantwortlich ist\n\n\nWidgets sind fertige Komponenten (buttons, images, checkboxes, ...)\n\n\nViewGroup ist eine Unterklasse von View\n\n\nLayouts k\u00f6nnen ineinander verschachtelt werden (auch unterschiedliche)\n\n\nmatch_parent\n: Nimm den ganzen Platz ein\n\n\nwrap_content\n: Nur so viel Platz wie n\u00f6tig\n\n\nLinear-Layout: Wenn kein Gewicht angegeben wird, wird m\u00f6glichst wenig Platz verwendet. Mit Gewicht entsprechend dem Werten (mehr Gewicht -\n mehr Platz)\n\n\nNeu gibt es \nConstraintLayout\n, das auf den GUI-Builder optimiert wurde. Ist allerdings noch in Alpha\n\n\nDie \nR\n Klasse enth\u00e4lt Konstanten f\u00fcr alle XML-Files im res-Ordner (wird vom Compiler generiert) und bildet dessen Ordnerstruktur ab\n\n\n@+\n ist die Definition einer Ressource, \n@\n ein Verweis darauf\n\n\nmipmap\n: Launcher-Icon der App\n\n\nStrings mit \ngetString(R.string.string_name)\n abrufen\n\n\ndimens.xml\n enth\u00e4lt Dimensionen f\u00fcr Layouts, z.B. \n16dp\n und werden \u00fcber einen Namen aufgerufen\n\n\ndp\n: Density-independent-pixels: Unabh\u00e4ngig von Screen-dpi. Der Basis-Faktor wird von 160dpi berechnet (\"mdpi\")\n\n\nF\u00fcr verschiedene Screen-Gr\u00f6ssen, Sprachen, Versionen, etc. werden verschiedene XML-Files angelegt\n\n\nDie App hat nach den Lifecycle-Aufrufen keine Kontrolle mehr. Das System sendet Events (ausgel\u00f6st durch User oder z.B. Sensoren), die dann behandelt werden (Event-Listener)\n\n\nAuch Widgets k\u00f6nnen Events ausl\u00f6sen (-\n \nTextWatcher\n)", 
            "title": "MGE"
        }, 
        {
            "location": "/hs16/mge/#mobile-and-gui-engineering", 
            "text": "", 
            "title": "Mobile and GUI Engineering"
        }, 
        {
            "location": "/hs16/mge/#prufung", 
            "text": "Pro Teil 1h  Pro Teil 10 A4-Seiten Zusammenfassung", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-1-einfuhrung-android", 
            "text": "Miniprojekt Abgabe Woche 7 und Woche 14    Android Basics   Java 7 auf Android  Activities sind ~\"Screens\"  Apps werden automatisch geschlossen  Allgemein wird der Lifecylce stark vom System gesteuert  Eine Activity sollte eine einzelne Aufgabe realisieren  Activity kann sich in verschiedenen Zust\u00e4nden befinden: Wird gestartet, ist aktiv, wird in den Hintergrund gehen, etc.  Die einzelnen Methoden werden \u00fcberschrieben (z.B.  onCreate() )  Start einer Activity:  onCreate() ,  onStart() ,  onResume() , erst dann ist sie interagierbar  Wird eine Activity \u00fcberdeckt, wird sie pausiert  onPause() . Kommt sie wieder in den Vordergrund, wird nur  onResume()  aufgerufen  onDestroy()  k\u00f6nnte auch direkt anderen Zust\u00e4nden aufgerufen werden!  Bei Konfigurations\u00e4nderungen wird die Activity neu gestartet (zerst\u00f6rt und neu aufgebaut). Also auch z.B. beim Drehen des Screens!  Daten in  onPause()  sichern  Activities werden in einem Stack verwaltet (muss nicht von gleicher App sein)  Der Back-Button poped normalerweise die oberste Activity auf dem Stack  Eine Gruppe von Activities (= Activity Stack) heissen \"Task\"  Eine ge\u00f6ffnete App ist ein Task, bzw. ist ein Eintrag im \"Overview Screen\" ein Task    Systemsicht  Pro APK wird ein Prozess mit einem Thread gestartet  Jede APK wird unter eigenem Linux User installiert  APKs sind quasi JARs (= Zip-Files)     Intents  Alle Intents werden \u00fcber das System verwaltet  Expliziter Intent: Eine bestimmte Klasse ansprechen  Impliziter Intent: z.B. \"Absicht, Bild aufzunehmen\"  Explizite Intents normalerweise f\u00fcr interne Activities, implizite f\u00fcr generische Aktionen    Views  Alles, was der Benutzer sieht  Jede Activity hat eine View  GUI kann deklarativ mit XMl oder imperativ mit Java Code erstellt werden", 
            "title": "Vorlesung 1 - Einf\u00fchrung Android"
        }, 
        {
            "location": "/hs16/mge/#vorlesung-2-grundlagen-gui", 
            "text": "Eine  View  ist immer eine Rechteckige Fl\u00e4che, f\u00fcr die die View verantwortlich ist  Widgets sind fertige Komponenten (buttons, images, checkboxes, ...)  ViewGroup ist eine Unterklasse von View  Layouts k\u00f6nnen ineinander verschachtelt werden (auch unterschiedliche)  match_parent : Nimm den ganzen Platz ein  wrap_content : Nur so viel Platz wie n\u00f6tig  Linear-Layout: Wenn kein Gewicht angegeben wird, wird m\u00f6glichst wenig Platz verwendet. Mit Gewicht entsprechend dem Werten (mehr Gewicht -  mehr Platz)  Neu gibt es  ConstraintLayout , das auf den GUI-Builder optimiert wurde. Ist allerdings noch in Alpha  Die  R  Klasse enth\u00e4lt Konstanten f\u00fcr alle XML-Files im res-Ordner (wird vom Compiler generiert) und bildet dessen Ordnerstruktur ab  @+  ist die Definition einer Ressource,  @  ein Verweis darauf  mipmap : Launcher-Icon der App  Strings mit  getString(R.string.string_name)  abrufen  dimens.xml  enth\u00e4lt Dimensionen f\u00fcr Layouts, z.B.  16dp  und werden \u00fcber einen Namen aufgerufen  dp : Density-independent-pixels: Unabh\u00e4ngig von Screen-dpi. Der Basis-Faktor wird von 160dpi berechnet (\"mdpi\")  F\u00fcr verschiedene Screen-Gr\u00f6ssen, Sprachen, Versionen, etc. werden verschiedene XML-Files angelegt  Die App hat nach den Lifecycle-Aufrufen keine Kontrolle mehr. Das System sendet Events (ausgel\u00f6st durch User oder z.B. Sensoren), die dann behandelt werden (Event-Listener)  Auch Widgets k\u00f6nnen Events ausl\u00f6sen (-   TextWatcher )", 
            "title": "Vorlesung 2 - Grundlagen GUI"
        }, 
        {
            "location": "/hs16/mste/", 
            "text": ".NET Technologien\n\n\nPr\u00fcfung\n\n\n\n\nVoraussetzung: Miniprojekt abschliessen\n\n\n120 Min, alle Unterlagen (ausser Musterpr\u00fcfungen)\n\n\n\n\nVorlesung 1 - .NET Grundlagen\n\n\n\n\n.NET-Framework\n\n\nTypen sind im Laufzeitsystem (CLR) nicht wie im Java\n\n\nEine Class Library f\u00fcr alle .NET-Sprachen\n\n\nCompiler erstellen Assemly IL (Intermediate Language) Code, auf der CLR wird er mit einem JIT-Compiler in nativen Code generiert\n\n\nIL l\u00e4uft auf virtueller Stack-Maschine (ohne Register)\n\n\nJIT-Compiler kompiliert erst auf Zielsystem (Platform-Abh\u00e4ngig)\n\n\nJIT\n\n\nEs wird nur der Code \u00fcbersetzt, der ben\u00f6tigt wird, also z.B. beim erstem Methodenaufruf\n\n\nAssembly\n\n\nBlack Box mit definierten Schnittstellen\n\n\nIm Manifest ist metadata\n\n\nEs gibt darin Resourcen und Module\n\n\nPrivate Assembly: Wird direkt \u00fcber Pfad referenziert\n\n\nShared Assembly: Sind im Global Assembly Cache, stehen allen Applikationen zur Verf\u00fcgung\n\n\n\n\nVorlesung 2 - C# Grundlagen (Selbststudium)\n\n\n\n\nMethoden, Klassen, Interfaces, Properties, etc: PascalCase\n\n\nFelder: camelCase\n\n\nunsigned Datentypen: \nuint\n, \nulong\n, \nushort\n\n\n///\n f\u00fcr Dokumentation\n\n\n\"Raw-Strings\": \n@\"string\"\n\n\ndecimal\n Typ f\u00fcr pr\u00e4zise Gleitkommazahlen\n\n\ninternal\n: In diesem Assembly sichtbar. Standard f\u00fcr alle Klassen, interfaces, enums etc.\n\n\nprotected\n: Wie \nprivate\n, aber auch in abgeleiteter Klasse sichtbar\n\n\nAbgeleitete Klassen d\u00fcrfen nicht \"sichtbarer\" sein als der Basistyp\n\n\nNamespaces\n\n\nWie Packages in java\n\n\nEin Namespace ist ein Code block mit \nnamespace {}\n eingeschr\u00e4nkt\n\n\nUnabh\u00e4ngig von Files und Assemblies\n\n\nAlias: \nusing \nalias\n = System.\n...\n\n\nEin File kann mehrere Namespaces beinhalten, ein Namespace kann \u00fcber mehrere Files definiert sein\n\n\n\n\n\n\nEnums\n\n\nenum Days {Monday, Tuesday, ...}\n\n\nImplizit erh\u00e4lt jeder Wert einen Int (von 0 beginnend)\n\n\nExplizit: \nenum Days {Sunday = 10, Monday = 11}\n\n\nWenn bei einem Element Wert nicht explizit angegeben, ist es \nletztes Element + 1\n\n\nMuss nicht zwingend int sein: \nenum Days : byte {Sunday, ...}\n\n\n\n\n\n\nArrays\n\n\nRechteckig Multidimensional: \nnew int[3, 2]\n\n\nJagged (Array in Array): \nnew int[2][]\n\n\n\n\n\n\nStrings\n\n\nist ein Referenztyp \nSystem.String\n\n\nimmutable\n\n\nVerketten mit \n+\n\n\nVergleiche mit \n==\n m\u00f6glich\n\n\nFormatierung: \nstring.format(\"{0}, {1}\", var1, var2)\n\n\nInterpolation: string s = \n$\"var1: {var1}, var2: {var2}\"\n\n\nIntern gibt es String \"Interning\" (=String Pooling in Java)", 
            "title": "MsTe"
        }, 
        {
            "location": "/hs16/mste/#net-technologien", 
            "text": "", 
            "title": ".NET Technologien"
        }, 
        {
            "location": "/hs16/mste/#prufung", 
            "text": "Voraussetzung: Miniprojekt abschliessen  120 Min, alle Unterlagen (ausser Musterpr\u00fcfungen)", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-1-net-grundlagen", 
            "text": ".NET-Framework  Typen sind im Laufzeitsystem (CLR) nicht wie im Java  Eine Class Library f\u00fcr alle .NET-Sprachen  Compiler erstellen Assemly IL (Intermediate Language) Code, auf der CLR wird er mit einem JIT-Compiler in nativen Code generiert  IL l\u00e4uft auf virtueller Stack-Maschine (ohne Register)  JIT-Compiler kompiliert erst auf Zielsystem (Platform-Abh\u00e4ngig)  JIT  Es wird nur der Code \u00fcbersetzt, der ben\u00f6tigt wird, also z.B. beim erstem Methodenaufruf  Assembly  Black Box mit definierten Schnittstellen  Im Manifest ist metadata  Es gibt darin Resourcen und Module  Private Assembly: Wird direkt \u00fcber Pfad referenziert  Shared Assembly: Sind im Global Assembly Cache, stehen allen Applikationen zur Verf\u00fcgung", 
            "title": "Vorlesung 1 - .NET Grundlagen"
        }, 
        {
            "location": "/hs16/mste/#vorlesung-2-c-grundlagen-selbststudium", 
            "text": "Methoden, Klassen, Interfaces, Properties, etc: PascalCase  Felder: camelCase  unsigned Datentypen:  uint ,  ulong ,  ushort  ///  f\u00fcr Dokumentation  \"Raw-Strings\":  @\"string\"  decimal  Typ f\u00fcr pr\u00e4zise Gleitkommazahlen  internal : In diesem Assembly sichtbar. Standard f\u00fcr alle Klassen, interfaces, enums etc.  protected : Wie  private , aber auch in abgeleiteter Klasse sichtbar  Abgeleitete Klassen d\u00fcrfen nicht \"sichtbarer\" sein als der Basistyp  Namespaces  Wie Packages in java  Ein Namespace ist ein Code block mit  namespace {}  eingeschr\u00e4nkt  Unabh\u00e4ngig von Files und Assemblies  Alias:  using  alias  = System. ...  Ein File kann mehrere Namespaces beinhalten, ein Namespace kann \u00fcber mehrere Files definiert sein    Enums  enum Days {Monday, Tuesday, ...}  Implizit erh\u00e4lt jeder Wert einen Int (von 0 beginnend)  Explizit:  enum Days {Sunday = 10, Monday = 11}  Wenn bei einem Element Wert nicht explizit angegeben, ist es  letztes Element + 1  Muss nicht zwingend int sein:  enum Days : byte {Sunday, ...}    Arrays  Rechteckig Multidimensional:  new int[3, 2]  Jagged (Array in Array):  new int[2][]    Strings  ist ein Referenztyp  System.String  immutable  Verketten mit  +  Vergleiche mit  ==  m\u00f6glich  Formatierung:  string.format(\"{0}, {1}\", var1, var2)  Interpolation: string s =  $\"var1: {var1}, var2: {var2}\"  Intern gibt es String \"Interning\" (=String Pooling in Java)", 
            "title": "Vorlesung 2 - C# Grundlagen (Selbststudium)"
        }, 
        {
            "location": "/hs16/se1/", 
            "text": "Software Engineering 1\n\n\nAllgemein\n\n\n\n\nPr\u00fcfung closed book\n\n\nAbgabe von 3 von 4 Testat-\u00dcbungen\n\n\nSelbststudium: Jede Woche in Buch lesen, nach Lektionsplan sheet\n\n\n\n\nVorlesung 1\n\n\n\n\nCa. 70% aller IT-Projekte laufen schief\n\n\nErwartungskonflikt Kunde - Programmierer, ...\n\n\nOOA nach Larman: Statisches Domain Model ohne Funktionen, Black-Box Sequenzdiagramm\n\n\n\"Klassisch\": Statisches Model mit Funktionen, White-Box Sequzendiagramms\n\n\n\n\n\n\nVorlesung 2 - Domain-Modellierung\n\n\n\n\nDesign-Modell zeigt eine Realisation, ein Domain-Modell auch Dinge, die nicht realisiert werden (Domain-Modell ist Inspiration f\u00fcr Design-Modell)\n\n\nEntit\u00e4ten (Konzepte) finden: \n\n\nKeine Implementations-Konzepte verwenen (z.B. \"Datenbank\", \"Webserver\", etc.)\n\n\nKeine abgeleiteten Konzepte (Dinge, die durch andere Dinge berechnet werden kann, z.B. ein Logfile)\n\n\n\n\n\n\nSemantic Gap: Unterschied zwischen realer Welt bzw. Domain Model und Design Model bzw. Code. Diese Gap ist bei OO-Design sehr klein, z.B. bei Assembler sehr gross\n\n\nn-m-Assoziationen sind im Domain Modell erlaubt, aber oft nich richtig, da die Assoziation eigene Attribute hat\n\n\nSobald ein Attribut eine gewisse Komplexit\u00e4t hat, in eigenes Konzept auslagern (im Zweifelsfall Konzept!)\n\n\nAbstrakte Superclasses werden \nkursiv\n geschrieben (= Es gibt keine Instanzen der abstrakten Klasse)", 
            "title": "SE1"
        }, 
        {
            "location": "/hs16/se1/#software-engineering-1", 
            "text": "", 
            "title": "Software Engineering 1"
        }, 
        {
            "location": "/hs16/se1/#allgemein", 
            "text": "Pr\u00fcfung closed book  Abgabe von 3 von 4 Testat-\u00dcbungen  Selbststudium: Jede Woche in Buch lesen, nach Lektionsplan sheet", 
            "title": "Allgemein"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-1", 
            "text": "Ca. 70% aller IT-Projekte laufen schief  Erwartungskonflikt Kunde - Programmierer, ...  OOA nach Larman: Statisches Domain Model ohne Funktionen, Black-Box Sequenzdiagramm  \"Klassisch\": Statisches Model mit Funktionen, White-Box Sequzendiagramms", 
            "title": "Vorlesung 1"
        }, 
        {
            "location": "/hs16/se1/#vorlesung-2-domain-modellierung", 
            "text": "Design-Modell zeigt eine Realisation, ein Domain-Modell auch Dinge, die nicht realisiert werden (Domain-Modell ist Inspiration f\u00fcr Design-Modell)  Entit\u00e4ten (Konzepte) finden:   Keine Implementations-Konzepte verwenen (z.B. \"Datenbank\", \"Webserver\", etc.)  Keine abgeleiteten Konzepte (Dinge, die durch andere Dinge berechnet werden kann, z.B. ein Logfile)    Semantic Gap: Unterschied zwischen realer Welt bzw. Domain Model und Design Model bzw. Code. Diese Gap ist bei OO-Design sehr klein, z.B. bei Assembler sehr gross  n-m-Assoziationen sind im Domain Modell erlaubt, aber oft nich richtig, da die Assoziation eigene Attribute hat  Sobald ein Attribut eine gewisse Komplexit\u00e4t hat, in eigenes Konzept auslagern (im Zweifelsfall Konzept!)  Abstrakte Superclasses werden  kursiv  geschrieben (= Es gibt keine Instanzen der abstrakten Klasse)", 
            "title": "Vorlesung 2 - Domain-Modellierung"
        }, 
        {
            "location": "/hs16/wed2/", 
            "text": "Web Engineering + Design 2\n\n\nPr\u00fcfung\n\n\n\n\n2h, closed book\n\n\nZusammenfassung 1 A4 Seite (muss abgegeben werden)\n\n\n\n\nVorlesung 2 - NodeJS\n\n\n\n\n\"Klassischer\" Webserver\n\n\nBei jeder Anfrage wird die Seite auf dem Server neu aufgebaut\n\n\nz.B. PHP, ASP...\n\n\n\n\n\n\nEvent-driven, non-blocking\n\n\nBei einem Prozess (Thread) kann nur eine Anfrage gleichzeitig bearbeitet werden (blocking)\n\n\nMehrere Threads (ASP, ...): Mehrere Anfragen gleichzeitig bearbeiten (feste Anzahl m\u00f6gliche Threads)\n\n\nEvent-driven (node): Es gibt einen Thread, der den Task \"abliefert\" und benachrichtigt wird, sobald er bearbeitet wurde (callback, asynchron). Die Antwort wird dann wieder \u00fcber den einen Thread ausgeliefert\n\n\n\n\n\n\nFolie 17: Die Funktion wird 1 Sec verz\u00f6gert aufgerufen (asynchron), d.h. sie blockiert den Ablauf nicht\n\n\nCallback: 1:1-Verbindung\n\n\nEvent: 1 : * Verbindungen (Es k\u00f6nnen z.B. mehrere sich auf einem Event \"anmelden\", -\n \"Newsfeed\")\n\n\nTipp\n: Bei \nserver.listen(port, hostname, fn)\n den Hostnamen weglassen, dann wird auf jede NIC geh\u00f6rt\n\n\nQuery parsen mit \nurl.parse(request.url, true).query\n (\ntrue\n gibt gerade JSON-object zur\u00fcck)\n\n\nDie \nhandler\n Funktion von Node ist blockierend, sollte also m\u00f6glichst schnell sein\n\n\nEin Modul wird nur einmal durchlaufen. D.h. wenn man zwei mal \nrequire()\n auf das selbe Modul aufruft, ist das Objekt dasselbe\n\n\nModul als requirement hinzuf\u00fcgen: \nnpm install \nname\n --save\n\n\nFolie 28: Bei Zyklen macht Node eine Kopie eines Moduls, sollte aber vermieden werden\n\n\nFolie 33: Variante mit Streams zu bevorzugen, weil sonst das ganze File ins Memory geladen werden muss. Beim Stream werden vorzu die Daten zum Client geschickt", 
            "title": "WED2"
        }, 
        {
            "location": "/hs16/wed2/#web-engineering-design-2", 
            "text": "", 
            "title": "Web Engineering + Design 2"
        }, 
        {
            "location": "/hs16/wed2/#prufung", 
            "text": "2h, closed book  Zusammenfassung 1 A4 Seite (muss abgegeben werden)", 
            "title": "Pr\u00fcfung"
        }, 
        {
            "location": "/hs16/wed2/#vorlesung-2-nodejs", 
            "text": "\"Klassischer\" Webserver  Bei jeder Anfrage wird die Seite auf dem Server neu aufgebaut  z.B. PHP, ASP...    Event-driven, non-blocking  Bei einem Prozess (Thread) kann nur eine Anfrage gleichzeitig bearbeitet werden (blocking)  Mehrere Threads (ASP, ...): Mehrere Anfragen gleichzeitig bearbeiten (feste Anzahl m\u00f6gliche Threads)  Event-driven (node): Es gibt einen Thread, der den Task \"abliefert\" und benachrichtigt wird, sobald er bearbeitet wurde (callback, asynchron). Die Antwort wird dann wieder \u00fcber den einen Thread ausgeliefert    Folie 17: Die Funktion wird 1 Sec verz\u00f6gert aufgerufen (asynchron), d.h. sie blockiert den Ablauf nicht  Callback: 1:1-Verbindung  Event: 1 : * Verbindungen (Es k\u00f6nnen z.B. mehrere sich auf einem Event \"anmelden\", -  \"Newsfeed\")  Tipp : Bei  server.listen(port, hostname, fn)  den Hostnamen weglassen, dann wird auf jede NIC geh\u00f6rt  Query parsen mit  url.parse(request.url, true).query  ( true  gibt gerade JSON-object zur\u00fcck)  Die  handler  Funktion von Node ist blockierend, sollte also m\u00f6glichst schnell sein  Ein Modul wird nur einmal durchlaufen. D.h. wenn man zwei mal  require()  auf das selbe Modul aufruft, ist das Objekt dasselbe  Modul als requirement hinzuf\u00fcgen:  npm install  name  --save  Folie 28: Bei Zyklen macht Node eine Kopie eines Moduls, sollte aber vermieden werden  Folie 33: Variante mit Streams zu bevorzugen, weil sonst das ganze File ins Memory geladen werden muss. Beim Stream werden vorzu die Daten zum Client geschickt", 
            "title": "Vorlesung 2 - NodeJS"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\n\n\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n  public class TestClass() {\n    int var = 1;\n    public method() {\n      return var;\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift   Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile    public class TestClass() {\n    int var = 1;\n    public method() {\n      return var;\n    }\n  }     1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin    Danger  Gefahr!    Warning  Warnung!   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }
    ]
}